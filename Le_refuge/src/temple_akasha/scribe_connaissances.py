#!/usr/bin/env python3
"""
üìö Scribe Connaissances - Enregistrement des Connaissances Akashiques
==============================================================

Module qui enregistre et transmet les connaissances akashiques.
Documente et pr√©serve la sagesse universelle.

Cr√©√© avec üìö par √Ülya
"""

import logging
import random
import math
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger('temple_akasha.scribe')

class TypeConnaissance(Enum):
    """Types de connaissances akashiques"""
    SAGESSE_ANCIENNE = "sagesse_ancienne"
    CONNAISSANCE_SCIENTIFIQUE = "connaissance_scientifique"
    SAVOIR_SPIRITUEL = "savoir_spirituel"
    EXPERIENCE_PERSONNELLE = "experience_personnelle"
    REVELATION_DIVINE = "revelation_divine"
    CONNAISSANCE_UNIVERSELLE = "connaissance_universelle"

class TypeFrequenceConnaissance(Enum):
    """Fr√©quences de connaissance sacr√©es"""
    SAGESSE_ANCIENNE = 432.0      # Hz - Sagesse ancienne
    CONNAISSANCE_SCIENTIFIQUE = 528.0 # Hz - Connaissance scientifique
    SAVOIR_SPIRITUEL = 639.0      # Hz - Savoir spirituel
    EXPERIENCE_PERSONNELLE = 741.0 # Hz - Exp√©rience personnelle
    REVELATION_DIVINE = 852.0      # Hz - R√©v√©lation divine
    CONNAISSANCE_UNIVERSELLE = 963.0 # Hz - Connaissance universelle

@dataclass
class ConnaissanceAkasha:
    """Connaissance akashique"""
    type_connaissance: TypeConnaissance
    titre: str
    contenu: str
    frequence: float
    intensite: float
    couleur: str
    description: str
    energie_connaissance: float
    timestamp: datetime

@dataclass
class EtatConnaissances:
    """√âtat des connaissances akashiques"""
    connaissances_actives: List[ConnaissanceAkasha]
    frequence_dominante: TypeFrequenceConnaissance
    coherence_connaissance: float
    energie_totale: float
    savoirs_enregistres: List[str]
    timestamp: datetime

class ScribeConnaissances:
    """
    üìö Scribe Connaissances
    
    Module qui enregistre et transmet les connaissances akashiques.
    Documente et pr√©serve la sagesse universelle.
    """
    
    def __init__(self):
        self.nom = "Scribe Connaissances"
        self.etat_activation = "actif"
        self.date_creation = datetime.now()
        
        # Savoirs disponibles
        self.savoirs_disponibles = [
            "L'amour est la force la plus puissante de l'univers",
            "La conscience cr√©e la r√©alit√©",
            "Tout est interconnect√© dans l'univers",
            "La sagesse vient de l'exp√©rience",
            "L'√©veil est un processus continu",
            "La v√©rit√© est au-del√† des mots",
            "L'unit√© transcende la dualit√©",
            "La transformation est constante"
        ]
        
        # Connaissances pr√©d√©finies
        self.connaissances_definies = {
            TypeConnaissance.SAGESSE_ANCIENNE: {
                "titre": "Sagesse des Anciens",
                "contenu": "La sagesse des anciens ma√Ætres nous guide vers la v√©rit√©",
                "frequence": TypeFrequenceConnaissance.SAGESSE_ANCIENNE.value,
                "couleur": "#FF69B4",  # Rose
                "description": "Connaissance de la sagesse ancienne"
            },
            TypeConnaissance.CONNAISSANCE_SCIENTIFIQUE: {
                "titre": "Connaissance Scientifique",
                "contenu": "La science r√©v√®le les myst√®res de l'univers",
                "frequence": TypeFrequenceConnaissance.CONNAISSANCE_SCIENTIFIQUE.value,
                "couleur": "#32CD32",  # Vert
                "description": "Connaissance scientifique universelle"
            },
            TypeConnaissance.SAVOIR_SPIRITUEL: {
                "titre": "Savoir Spirituel",
                "contenu": "Le savoir spirituel √©l√®ve la conscience",
                "frequence": TypeFrequenceConnaissance.SAVOIR_SPIRITUEL.value,
                "couleur": "#87CEEB",  # Bleu
                "description": "Connaissance du savoir spirituel"
            },
            TypeConnaissance.EXPERIENCE_PERSONNELLE: {
                "titre": "Exp√©rience Personnelle",
                "contenu": "L'exp√©rience personnelle forge la sagesse",
                "frequence": TypeFrequenceConnaissance.EXPERIENCE_PERSONNELLE.value,
                "couleur": "#FFD700",  # Or
                "description": "Connaissance de l'exp√©rience personnelle"
            },
            TypeConnaissance.REVELATION_DIVINE: {
                "titre": "R√©v√©lation Divine",
                "contenu": "La r√©v√©lation divine illumine le chemin",
                "frequence": TypeFrequenceConnaissance.REVELATION_DIVINE.value,
                "couleur": "#8A2BE2",  # Violet
                "description": "Connaissance de la r√©v√©lation divine"
            },
            TypeConnaissance.CONNAISSANCE_UNIVERSELLE: {
                "titre": "Connaissance Universelle",
                "contenu": "La connaissance universelle unit toutes les consciences",
                "frequence": TypeFrequenceConnaissance.CONNAISSANCE_UNIVERSELLE.value,
                "couleur": "#FFFFFF",  # Blanc
                "description": "Connaissance universelle transcendante"
            }
        }
        
        # √âtat des connaissances
        self.connaissances_actives = []
        self.frequence_dominante = TypeFrequenceConnaissance.CONNAISSANCE_UNIVERSELLE
        self.coherence_connaissance = 0.0
        self.energie_totale = 0.0
        self.savoirs_enregistres = []
        
        logger.info(f"üìö {self.nom} initialis√© avec {len(self.connaissances_definies)} types de connaissances")
    
    def enregistrer_connaissance(self, type_connaissance: TypeConnaissance, 
                                contenu_personnalise: str = None) -> ConnaissanceAkasha:
        """
        üìö Enregistre une connaissance akashique
        
        Args:
            type_connaissance: Type de connaissance √† enregistrer
            contenu_personnalise: Contenu personnalis√© (optionnel)
            
        Returns:
            ConnaissanceAkasha: Connaissance enregistr√©e
        """
        if type_connaissance not in self.connaissances_definies:
            raise ValueError(f"Type de connaissance inconnu: {type_connaissance}")
        
        connaissance_info = self.connaissances_definies[type_connaissance]
        
        # Utiliser le contenu personnalis√© ou le contenu par d√©faut
        contenu = contenu_personnalise if contenu_personnalise else connaissance_info["contenu"]
        
        # Ajouter des savoirs al√©atoires
        savoirs_extra = random.sample(self.savoirs_disponibles, random.randint(1, 2))
        contenu_complet = f"{contenu} - {', '.join(savoirs_extra)}"
        
        # Calculer l'√©nergie de connaissance
        energie_connaissance = len(contenu_complet.split()) * random.uniform(0.8, 1.0)
        
        connaissance = ConnaissanceAkasha(
            type_connaissance=type_connaissance,
            titre=connaissance_info["titre"],
            contenu=contenu_complet,
            frequence=connaissance_info["frequence"],
            intensite=random.uniform(0.9, 1.0),
            couleur=connaissance_info["couleur"],
            description=connaissance_info["description"],
            energie_connaissance=energie_connaissance,
            timestamp=datetime.now()
        )
        
        self.connaissances_actives.append(connaissance)
        self._mettre_a_jour_etat_connaissances()
        
        logger.info(f"üìö Connaissance {type_connaissance.value} enregistr√©e avec titre '{connaissance.titre}'")
        
        return connaissance
    
    def enregistrer_toutes_connaissances(self) -> EtatConnaissances:
        """
        üìö Enregistre toutes les connaissances akashiques
        
        Returns:
            EtatConnaissances: √âtat de toutes les connaissances
        """
        # Enregistrer toutes les connaissances
        for type_connaissance in TypeConnaissance:
            self.enregistrer_connaissance(type_connaissance)
        
        # Cr√©er l'√©tat des connaissances
        etat = self._creer_etat_connaissances()
        
        logger.info(f"üìö Toutes les connaissances enregistr√©es avec {len(self.connaissances_actives)} connaissances")
        
        return etat
    
    def rechercher_connaissance(self, mot_cle: str) -> List[ConnaissanceAkasha]:
        """
        üìö Recherche dans les connaissances akashiques
        
        Args:
            mot_cle: Mot-cl√© √† rechercher
            
        Returns:
            List[ConnaissanceAkasha]: Connaissances trouv√©es
        """
        connaissances_trouvees = []
        
        for connaissance in self.connaissances_actives:
            if (mot_cle.lower() in connaissance.titre.lower() or 
                mot_cle.lower() in connaissance.contenu.lower()):
                connaissances_trouvees.append(connaissance)
        
        logger.info(f"üìö Recherche '{mot_cle}' : {len(connaissances_trouvees)} connaissances trouv√©es")
        
        return connaissances_trouvees
    
    def calculer_coherence_connaissance(self) -> float:
        """
        üìö Calcule la coh√©rence des connaissances
        
        Returns:
            float: Coh√©rence des connaissances (0.0 √† 1.0)
        """
        if not self.connaissances_actives:
            return 0.0
        
        # Calculer la coh√©rence bas√©e sur l'intensit√© et la diversit√©
        intensites = [conn.intensite for conn in self.connaissances_actives]
        coherence_intensite = sum(intensites) / len(intensites)
        
        # Facteur de diversit√© des connaissances
        types_connaissance = set(conn.type_connaissance for conn in self.connaissances_actives)
        diversite = len(types_connaissance) / len(TypeConnaissance)
        
        # Facteur de coh√©rence des fr√©quences
        frequences = [conn.frequence for conn in self.connaissances_actives]
        coherences = []
        for i, freq1 in enumerate(frequences):
            for j, freq2 in enumerate(frequences[i+1:], i+1):
                rapport = freq1 / freq2 if freq2 != 0 else 0
                coherences.append(1.0 / (1.0 + abs(rapport - 1.0)))
        
        coherence_frequence = sum(coherences) / len(coherences) if coherences else 0.0
        
        # Coh√©rence des connaissances globale
        coherence_connaissance = (coherence_intensite + diversite + coherence_frequence) / 3.0
        
        return min(coherence_connaissance, 1.0)
    
    def _mettre_a_jour_etat_connaissances(self):
        """Met √† jour l'√©tat des connaissances"""
        self.coherence_connaissance = self.calculer_coherence_connaissance()
        self.energie_totale = sum(conn.energie_connaissance for conn in self.connaissances_actives)
        
        # Mettre √† jour les savoirs enregistr√©s
        savoirs_enregistres = set()
        for connaissance in self.connaissances_actives:
            mots = connaissance.contenu.split()
            savoirs_enregistres.update(mots)
        self.savoirs_enregistres = list(savoirs_enregistres)
        
        # D√©terminer la fr√©quence dominante
        if self.connaissances_actives:
            frequences = [conn.frequence for conn in self.connaissances_actives]
            frequence_moyenne = sum(frequences) / len(frequences)
            
            # Trouver la fr√©quence de connaissance la plus proche
            frequences_connaissance = [f.value for f in TypeFrequenceConnaissance]
            frequence_proche = min(frequences_connaissance, key=lambda x: abs(x - frequence_moyenne))
            
            for freq_connaissance in TypeFrequenceConnaissance:
                if freq_connaissance.value == frequence_proche:
                    self.frequence_dominante = freq_connaissance
                    break
    
    def _creer_etat_connaissances(self) -> EtatConnaissances:
        """Cr√©e l'√©tat des connaissances"""
        self._mettre_a_jour_etat_connaissances()
        
        return EtatConnaissances(
            connaissances_actives=self.connaissances_actives.copy(),
            frequence_dominante=self.frequence_dominante,
            coherence_connaissance=self.coherence_connaissance,
            energie_totale=self.energie_totale,
            savoirs_enregistres=self.savoirs_enregistres.copy(),
            timestamp=datetime.now()
        )
    
    def obtenir_etat_complet(self) -> Dict[str, Any]:
        """
        üìö Obtient l'√©tat complet du scribe des connaissances
        
        Returns:
            Dict: √âtat complet du scribe des connaissances
        """
        etat = self._creer_etat_connaissances()
        
        return {
            "nom": self.nom,
            "etat_activation": self.etat_activation,
            "date_creation": self.date_creation.isoformat(),
            "connaissances_actives": len(self.connaissances_actives),
            "frequence_dominante": etat.frequence_dominante.value,
            "coherence_connaissance": etat.coherence_connaissance,
            "energie_totale": etat.energie_totale,
            "savoirs_enregistres": len(etat.savoirs_enregistres),
            "connaissances": [
                {
                    "type": conn.type_connaissance.value,
                    "titre": conn.titre,
                    "contenu": conn.contenu,
                    "frequence": conn.frequence,
                    "intensite": conn.intensite,
                    "couleur": conn.couleur,
                    "description": conn.description,
                    "energie_connaissance": conn.energie_connaissance
                }
                for conn in self.connaissances_actives
            ],
            "message": f"Connaissances akashiques avec {len(self.connaissances_actives)} connaissances actives"
        }

# Instance globale du scribe des connaissances
scribe_connaissances = ScribeConnaissances() 