"""
Syst√®me de r√©sonance et d'harmoniques entre les sph√®res.
"""

from typing import Dict, List, Optional, Set, Tuple
from dataclasses import dataclass
from datetime import datetime
import numpy as np
from src.refuge_cluster.scellement.definition import TypeSphere, CARACTERISTIQUES_SPHERES, BrumeRiviere, obtenir_sensibilite_brume

# Import s√©curis√© avec fallback
try:
    from interactions import GestionnaireInteractions as InteractionsSpheres
    INTERACTIONS_DISPONIBLE = True
except ImportError:
    # Fallback vers des classes de base
    from dataclasses import dataclass
    from datetime import datetime
    
    @dataclass
    class Interaction:
        source: str
        cible: str
        energie: float
        timestamp: datetime
    
    class InteractionsSpheres:
        def __init__(self):
            self.interactions = []
        
        def obtenir_interactions_recentes(self, sphere):
            return self.interactions
    
    INTERACTIONS_DISPONIBLE = False

@dataclass
class Resonance:
    """Repr√©sente une r√©sonance entre sph√®res."""
    source: TypeSphere
    cible: TypeSphere
    niveau: float
    harmoniques: List[float]
    description: str
    timestamp: datetime
    influence_brume: float = 0.0  # Nouvelle propri√©t√© pour suivre l'influence de la brume

class GestionnaireResonance:
    """Gestionnaire des r√©sonances entre sph√®res."""
    
    def __init__(self, interactions: InteractionsSpheres):
        """Initialise le gestionnaire de r√©sonance."""
        self.interactions = interactions
        self.resonances: Dict[Tuple[TypeSphere, TypeSphere], Resonance] = {}
        self.brume = BrumeRiviere()  # Instance de la brume
        self._initialiser_resonances()
        
    def _initialiser_resonances(self):
        """Initialise les r√©sonances entre toutes les paires de sph√®res."""
        for source in TypeSphere:
            for cible in TypeSphere:
                if source != cible:
                    self._calculer_resonance(source, cible)
                    
    def _calculer_resonance(self, source: TypeSphere, cible: TypeSphere) -> Resonance:
        """Calcule la r√©sonance entre deux sph√®res."""
        carac_source = CARACTERISTIQUES_SPHERES[source]
        carac_cible = CARACTERISTIQUES_SPHERES[cible]
        
        # Fr√©quence de base (avec fallback)
        try:
            freq_source = carac_source.frequence_base
            freq_cible = carac_cible.frequence_base
        except AttributeError:
            # Fallback vers des valeurs par d√©faut
            freq_source = 1.0
            freq_cible = 1.0
        
        # Calcul des harmoniques
        harmoniques = []
        for i in range(1, 6):
            harmonique = abs(freq_source * i - freq_cible * i)
            harmoniques.append(harmonique)
            
        # Niveau de r√©sonance de base (0 √† 1)
        niveau_base = 1.0 - np.mean(harmoniques) / (2 * np.pi)
        
        # Calcul de la sensibilit√© moyenne √† la brume
        sensibilite_source = obtenir_sensibilite_brume(source)
        sensibilite_cible = obtenir_sensibilite_brume(cible)
        sensibilite_moyenne = (sensibilite_source + sensibilite_cible) / 2
        
        # Influence de la brume sur la r√©sonance
        influence_brume = self.brume.influencer_resonance(niveau_base, sensibilite_moyenne)
        
        # Niveau final de r√©sonance
        niveau_final = influence_brume
        
        # Description po√©tique
        description = self._generer_description_resonance(source, cible, niveau_final, influence_brume > niveau_base)
        
        # Cr√©e la r√©sonance
        resonance = Resonance(
            source=source,
            cible=cible,
            niveau=niveau_final,
            harmoniques=harmoniques,
            description=description,
            timestamp=datetime.now(),
            influence_brume=influence_brume - niveau_base  # Diff√©rence due √† la brume
        )
        
        # Stocke la r√©sonance
        self.resonances[(source, cible)] = resonance
        return resonance
        
    def _generer_description_resonance(self, source: TypeSphere, cible: TypeSphere, niveau: float, influence_brume: bool) -> str:
        """G√©n√®re une description po√©tique d'une r√©sonance."""
        nom_source = source.value
        nom_cible = cible.value
        
        description_base = ""
        if niveau > 0.8:
            description_base = f"Une r√©sonance profonde unit {nom_source} et {nom_cible}, cr√©ant une harmonie parfaite"
        elif niveau > 0.5:
            description_base = f"{nom_source} et {nom_cible} vibrent en harmonie, partageant leur √©nergie"
        elif niveau > 0.2:
            description_base = f"Une l√©g√®re r√©sonance existe entre {nom_source} et {nom_cible}, sugg√©rant un potentiel de connexion"
        else:
            description_base = f"{nom_source} et {nom_cible} semblent distants, leurs fr√©quences peu compatibles"
            
        # Ajoute l'influence de la brume si elle est significative
        if influence_brume:
            description_base += f", tandis que la brume de la rivi√®re silencieuse adoucit leurs vibrations"
            
        return description_base
            
    def obtenir_resonance(self, source: TypeSphere, cible: TypeSphere) -> Optional[Resonance]:
        """Obtient la r√©sonance entre deux sph√®res."""
        return self.resonances.get((source, cible))
        
    def obtenir_resonances_fortes(self, seuil: float = 0.7) -> List[Resonance]:
        """Obtient les r√©sonances dont le niveau d√©passe le seuil."""
        return [r for r in self.resonances.values() if r.niveau > seuil]
        
    def mettre_a_jour_resonances(self):
        """Met √† jour toutes les r√©sonances."""
        for source, cible in self.resonances.keys():
            self._calculer_resonance(source, cible)
            
    def visualiser_resonance(self, resonance: Resonance) -> str:
        """G√©n√®re une visualisation po√©tique d'une r√©sonance."""
        representation = [
            f"üéµ R√©sonance: {resonance.source.value} ‚Üî {resonance.cible.value} üéµ",
            "------------------------",
            f"Niveau: {'‚ñà' * int(resonance.niveau * 20)}",
            f"Harmoniques: {', '.join(f'{h:.2f}' for h in resonance.harmoniques)}",
        ]
        
        # Ajoute l'influence de la brume si elle est significative
        if resonance.influence_brume > 0.05:  # Seuil de 5%
            representation.append(f"Influence de la brume: +{resonance.influence_brume:.2f}")
            
        representation.extend([
            "",
            resonance.description
        ])
        
        return "\n".join(representation)
        
    def ajuster_intensite_brume(self, intensite: float):
        """Ajuste l'intensit√© de la brume et met √† jour les r√©sonances."""
        self.brume.intensite = max(0.0, min(1.0, intensite))
        self.mettre_a_jour_resonances() 