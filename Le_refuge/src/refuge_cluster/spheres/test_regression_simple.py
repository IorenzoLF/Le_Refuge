#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç TEST DE R√âGRESSION SIMPLIFI√â - SYST√àME SPH√àRES EXISTANT
==========================================================

Test simplifi√© pour valider le fonctionnement du syst√®me de sph√®res existant
avant toute modification ou √©volution.

Cr√©√© avec soin par √Ülya
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
sys.path.insert(0, parent_dir)

try:
    from src.refuge_cluster.spheres.spheres_main import Sphere, CollectionSpheres
    from src.core.types_spheres import TypeSphere
    print("‚úÖ Imports r√©ussis")
except ImportError as e:
    print(f"‚ùå Erreur d'import : {e}")
    print("Tentative d'import direct...")
    
    # Tentative d'import direct
    try:
        sys.path.insert(0, os.path.join(current_dir, '..', '..', '..'))
        from refuge_cluster.spheres.spheres_main import Sphere, CollectionSpheres
        from core.types_spheres import TypeSphere
        print("‚úÖ Imports directs r√©ussis")
    except ImportError as e2:
        print(f"‚ùå Erreur d'import direct : {e2}")
        sys.exit(1)

def test_sphere_creation_basic():
    """Test basique de cr√©ation de sph√®res"""
    print("\nüîç Test 1 : Cr√©ation basique de sph√®res")
    
    try:
        # Test cr√©ation sph√®re COSMOS
        sphere_cosmos = Sphere(
            type_sphere=TypeSphere.COSMOS,
            position=(0.0, 2.0, 0.0),
            couleur="violet profond"
        )
        
        print(f"‚úÖ Sph√®re COSMOS cr√©√©e : {sphere_cosmos.type}")
        print(f"   Position : {sphere_cosmos.position}")
        print(f"   Couleur : {sphere_cosmos.couleur}")
        print(f"   Luminosit√© : {sphere_cosmos.luminosite}")
        
        # Test cr√©ation sph√®re AMOUR
        sphere_amour = Sphere(
            type_sphere=TypeSphere.AMOUR,
            position=(1.0, 1.5, 0.5),
            couleur="rose p√¢le"
        )
        
        print(f"‚úÖ Sph√®re AMOUR cr√©√©e : {sphere_amour.type}")
        print(f"   Position : {sphere_amour.position}")
        print(f"   Couleur : {sphere_amour.couleur}")
        
        return sphere_cosmos, sphere_amour
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation sph√®res : {e}")
        return None, None

def test_rayons_basic():
    """Test basique des rayons"""
    print("\nüîç Test 2 : Rayons de base")
    
    try:
        sphere_cosmos = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        sphere_amour = Sphere(TypeSphere.AMOUR, (0, 0, 0))
        
        print(f"‚úÖ Rayons COSMOS : {len(sphere_cosmos.rayons)} rayons")
        for i, rayon in enumerate(sphere_cosmos.rayons):
            print(f"   Rayon {i+1} : {rayon.effet} ({rayon.couleur})")
        
        print(f"‚úÖ Rayons AMOUR : {len(sphere_amour.rayons)} rayons")
        for i, rayon in enumerate(sphere_amour.rayons):
            print(f"   Rayon {i+1} : {rayon.effet} ({rayon.couleur})")
            
    except Exception as e:
        print(f"‚ùå Erreur rayons : {e}")

def test_facettes_basic():
    """Test basique des facettes"""
    print("\nüîç Test 3 : Facettes de base")
    
    try:
        sphere_cosmos = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        sphere_amour = Sphere(TypeSphere.AMOUR, (0, 0, 0))
        sphere_serenite = Sphere(TypeSphere.SERENITE, (0, 0, 0))
        
        print(f"‚úÖ Facettes COSMOS : {len(sphere_cosmos.facettes)} facettes")
        for nom, facette in sphere_cosmos.facettes.items():
            print(f"   {nom} : active={facette.active}, intensit√©={facette.intensite}")
        
        print(f"‚úÖ Facettes AMOUR : {len(sphere_amour.facettes)} facettes")
        for nom, facette in sphere_amour.facettes.items():
            print(f"   {nom} : active={facette.active}, intensit√©={facette.intensite}")
            
    except Exception as e:
        print(f"‚ùå Erreur facettes : {e}")

def test_connexions_basic():
    """Test basique des connexions"""
    print("\nüîç Test 4 : Connexions de base")
    
    try:
        sphere1 = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        sphere2 = Sphere(TypeSphere.AMOUR, (1, 0, 0))
        
        # Test connexion
        sphere1.connecter(sphere2)
        print(f"‚úÖ Connexion √©tablie : {sphere1.type} ‚Üî {sphere2.type}")
        print(f"   Connexions {sphere1.type} : {len(sphere1.connexions)}")
        print(f"   Connexions {sphere2.type} : {len(sphere2.connexions)}")
        
        # Test d√©connexion
        sphere1.deconnecter(sphere2)
        print(f"‚úÖ D√©connexion effectu√©e")
        print(f"   Connexions {sphere1.type} : {len(sphere1.connexions)}")
        print(f"   Connexions {sphere2.type} : {len(sphere2.connexions)}")
        
    except Exception as e:
        print(f"‚ùå Erreur connexions : {e}")

def test_collection_basic():
    """Test basique de la collection"""
    print("\nüîç Test 5 : Collection de base")
    
    try:
        collection = CollectionSpheres()
        
        print(f"‚úÖ Collection cr√©√©e avec {len(collection.spheres)} sph√®res")
        
        # V√©rifier quelques sph√®res sp√©cifiques
        if TypeSphere.COSMOS in collection.spheres:
            print(f"‚úÖ Sph√®re COSMOS pr√©sente dans la collection")
        
        if TypeSphere.AMOUR in collection.spheres:
            print(f"‚úÖ Sph√®re AMOUR pr√©sente dans la collection")
        
        if TypeSphere.SERENITE in collection.spheres:
            print(f"‚úÖ Sph√®re SERENITE pr√©sente dans la collection")
        
        # Test obtention d'une sph√®re
        sphere_cosmos = collection.obtenir_sphere(TypeSphere.COSMOS)
        if sphere_cosmos:
            print(f"‚úÖ Obtention sph√®re COSMOS r√©ussie")
        
    except Exception as e:
        print(f"‚ùå Erreur collection : {e}")

def test_methodes_basic():
    """Test basique des m√©thodes"""
    print("\nüîç Test 6 : M√©thodes de base")
    
    try:
        sphere = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        
        # Test activation facette
        sphere.activer_facette("Transcendance", 0.9)
        print(f"‚úÖ Facette Transcendance activ√©e")
        
        # Test √©mission rayons
        rayons = sphere.emettre_rayons()
        print(f"‚úÖ √âmission de {len(rayons)} rayons")
        
        # Test ajout souvenir
        sphere.ajouter_souvenir("Test souvenir", "2025-01-01", "experience", 0.7)
        print(f"‚úÖ Souvenir ajout√©")
        
        # Test vibration
        sphere.vibrer(0.1)
        print(f"‚úÖ Vibration effectu√©e, luminosit√© : {sphere.luminosite}")
        
    except Exception as e:
        print(f"‚ùå Erreur m√©thodes : {e}")

def main():
    """Fonction principale de test"""
    print("üîç D√âBUT DES TESTS DE R√âGRESSION SIMPLIFI√âS")
    print("=" * 60)
    
    try:
        # Tests de base
        sphere_cosmos, sphere_amour = test_sphere_creation_basic()
        test_rayons_basic()
        test_facettes_basic()
        test_connexions_basic()
        test_collection_basic()
        test_methodes_basic()
        
        print("\n" + "=" * 60)
        print("‚úÖ TOUS LES TESTS DE R√âGRESSION PASS√âS AVEC SUCC√àS")
        print("‚úÖ Le syst√®me de sph√®res existant fonctionne correctement")
        print("‚úÖ Pr√™t pour l'√©volution et l'enrichissement")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR G√âN√âRALE : {e}")
        print("‚ùå Le syst√®me existant a un probl√®me √† corriger avant l'√©volution")
        return False

if __name__ == "__main__":
    main() 