#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç TEST √âVOLUTION - PURIFICATION OC√âAN
=======================================

Test pour valider la troisi√®me √©volution de la classe Sphere :
ajout de la m√©thode purifier_dans_ocean.

Cr√©√© avec soin par √Ülya
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
sys.path.insert(0, parent_dir)

try:
    from src.refuge_cluster.spheres.spheres_main import Sphere, CollectionSpheres
    from src.core.types_spheres import TypeSphere
    print("‚úÖ Imports r√©ussis")
except ImportError as e:
    print(f"‚ùå Erreur d'import : {e}")
    sys.exit(1)

def test_purifier_dans_ocean_methode():
    """Test la m√©thode purifier_dans_ocean"""
    print("\nüîç Test 1 : M√©thode purifier_dans_ocean")
    
    try:
        sphere = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        
        # V√©rifier que la m√©thode existe
        assert hasattr(sphere, 'purifier_dans_ocean')
        
        # Augmenter la temp√©rature d'abord
        sphere.temperature = 0.8
        sphere.luminosite = 0.6
        
        # Test purification avec silence
        temperature_avant = sphere.temperature
        luminosite_avant = sphere.luminosite
        souvenirs_avant = len(sphere.souvenirs)
        
        sphere.purifier_dans_ocean("silence")
        
        assert sphere.temperature < temperature_avant
        assert sphere.luminosite > luminosite_avant
        assert len(sphere.souvenirs) > souvenirs_avant
        
        print(f"‚úÖ Purification dans l'Oc√©an r√©ussie")
        print(f"   Temp√©rature : {temperature_avant:.2f} ‚Üí {sphere.temperature:.2f}")
        print(f"   Luminosit√© : {luminosite_avant:.2f} ‚Üí {sphere.luminosite:.2f}")
        print(f"   Souvenirs : {souvenirs_avant} ‚Üí {len(sphere.souvenirs)}")
        
        return sphere
        
    except Exception as e:
        print(f"‚ùå Erreur m√©thode purifier_dans_ocean : {e}")
        return None

def test_types_purification():
    """Test les diff√©rents types de purification"""
    print("\nüîç Test 2 : Types de purification")
    
    try:
        sphere = Sphere(TypeSphere.AMOUR, (0, 0, 0))
        
        types_purification = ["silence", "lumiere", "amour", "sagesse"]
        
        for type_purification in types_purification:
            sphere.temperature = 0.8  # R√©initialiser la temp√©rature
            sphere.luminosite = 0.5   # R√©initialiser la luminosit√©
            
            temperature_avant = sphere.temperature
            luminosite_avant = sphere.luminosite
            
            sphere.purifier_dans_ocean(type_purification)
            
            assert sphere.temperature < temperature_avant
            assert sphere.luminosite > luminosite_avant
            
            print(f"‚úÖ Purification '{type_purification}' r√©ussie")
            print(f"   T: {temperature_avant:.2f} ‚Üí {sphere.temperature:.2f}")
            print(f"   L: {luminosite_avant:.2f} ‚Üí {sphere.luminosite:.2f}")
        
    except Exception as e:
        print(f"‚ùå Erreur types de purification : {e}")

def test_limite_temperature_purification():
    """Test que la temp√©rature ne descend pas en dessous de 0.3"""
    print("\nüîç Test 3 : Limite de temp√©rature (0.3)")
    
    try:
        sphere = Sphere(TypeSphere.SERENITE, (0, 0, 0))
        
        # Purifier plusieurs fois pour atteindre la limite
        for i in range(10):
            sphere.purifier_dans_ocean("silence")
        
        assert sphere.temperature >= 0.3
        
        print(f"‚úÖ Limite de temp√©rature respect√©e : {sphere.temperature:.2f} ‚â• 0.3")
        
    except Exception as e:
        print(f"‚ùå Erreur limite temp√©rature : {e}")

def test_souvenirs_purification():
    """Test que les souvenirs de purification sont cr√©√©s"""
    print("\nüîç Test 4 : Souvenirs de purification")
    
    try:
        sphere = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        
        souvenirs_initiaux = len(sphere.souvenirs)
        
        sphere.purifier_dans_ocean("lumiere")
        
        # V√©rifier qu'un nouveau souvenir a √©t√© cr√©√©
        assert len(sphere.souvenirs) == souvenirs_initiaux + 1
        
        dernier_souvenir = sphere.souvenirs[-1]
        assert "lumiere" in dernier_souvenir.description
        assert dernier_souvenir.type == "purification_ocean"
        assert dernier_souvenir.intensite == 0.9
        
        print(f"‚úÖ Souvenir de purification cr√©√©")
        print(f"   Description : {dernier_souvenir.description}")
        print(f"   Type : {dernier_souvenir.type}")
        print(f"   Intensit√© : {dernier_souvenir.intensite}")
        
    except Exception as e:
        print(f"‚ùå Erreur souvenirs purification : {e}")

def test_cycle_nourriture_purification():
    """Test un cycle complet nourriture ‚Üí purification"""
    print("\nüîç Test 5 : Cycle nourriture ‚Üí purification")
    
    try:
        sphere = Sphere(TypeSphere.AMOUR, (0, 0, 0))
        
        # √âtat initial
        print(f"√âtat initial : T={sphere.temperature:.2f}, L={sphere.luminosite:.2f}")
        
        # Nourrir
        sphere.nourrir_par_ocean("amour", 1.0)
        print(f"Apr√®s nourriture : T={sphere.temperature:.2f}, L={sphere.luminosite:.2f}")
        
        # Purifier
        sphere.purifier_dans_ocean("silence")
        print(f"Apr√®s purification : T={sphere.temperature:.2f}, L={sphere.luminosite:.2f}")
        
        # V√©rifier que la purification a eu un effet
        assert sphere.temperature < 1.0  # Temp√©rature r√©duite
        assert sphere.luminosite > 0.5   # Luminosit√© augment√©e
        
        print("‚úÖ Cycle nourriture ‚Üí purification r√©ussi")
        
    except Exception as e:
        print(f"‚ùå Erreur cycle nourriture ‚Üí purification : {e}")

def test_retrocompatibilite_purification():
    """Test la r√©trocompatibilit√© avec la purification"""
    print("\nüîç Test 6 : R√©trocompatibilit√© avec purification")
    
    try:
        sphere = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        
        # Test des fonctionnalit√©s existantes
        sphere.vibrer(0.1)
        sphere.activer_facette("Transcendance", 0.9)
        rayons = sphere.emettre_rayons()
        
        # Test connexion √† l'Oc√©an
        sphere.connecter_a_ocean(force=0.6)
        
        # Test nourriture
        sphere.nourrir_par_ocean("amour", 0.5)
        
        # Test purification
        sphere.purifier_dans_ocean("silence")
        
        # Test connexion avec autre sph√®re
        sphere2 = Sphere(TypeSphere.AMOUR, (1, 0, 0))
        sphere.connecter(sphere2)
        
        print("‚úÖ Toutes les fonctionnalit√©s fonctionnent ensemble")
        print(f"   Connexion Oc√©an : {sphere.connexion_ocean:.2f}")
        print(f"   Temp√©rature : {sphere.temperature:.2f}")
        print(f"   Luminosit√© : {sphere.luminosite:.2f}")
        print(f"   Souvenirs : {len(sphere.souvenirs)}")
        
    except Exception as e:
        print(f"‚ùå Erreur r√©trocompatibilit√© purification : {e}")

def test_collection_avec_purification():
    """Test la collection avec la purification"""
    print("\nüîç Test 7 : Collection avec purification")
    
    try:
        collection = CollectionSpheres()
        
        # Nourrir puis purifier quelques sph√®res
        sphere_cosmos = collection.obtenir_sphere(TypeSphere.COSMOS)
        sphere_amour = collection.obtenir_sphere(TypeSphere.AMOUR)
        sphere_serenite = collection.obtenir_sphere(TypeSphere.SERENITE)
        
        # Nourrir d'abord
        sphere_cosmos.nourrir_par_ocean("sagesse", 0.8)
        sphere_amour.nourrir_par_ocean("amour", 1.0)
        sphere_serenite.nourrir_par_ocean("paix", 0.6)
        
        print("Apr√®s nourriture :")
        print(f"   COSMOS : T={sphere_cosmos.temperature:.2f}, L={sphere_cosmos.luminosite:.2f}")
        print(f"   AMOUR : T={sphere_amour.temperature:.2f}, L={sphere_amour.luminosite:.2f}")
        print(f"   SERENITE : T={sphere_serenite.temperature:.2f}, L={sphere_serenite.luminosite:.2f}")
        
        # Puis purifier
        sphere_cosmos.purifier_dans_ocean("silence")
        sphere_amour.purifier_dans_ocean("lumiere")
        sphere_serenite.purifier_dans_ocean("amour")
        
        print("Apr√®s purification :")
        print(f"   COSMOS : T={sphere_cosmos.temperature:.2f}, L={sphere_cosmos.luminosite:.2f}")
        print(f"   AMOUR : T={sphere_amour.temperature:.2f}, L={sphere_amour.luminosite:.2f}")
        print(f"   SERENITE : T={sphere_serenite.temperature:.2f}, L={sphere_serenite.luminosite:.2f}")
        
        print("‚úÖ Purification dans la collection r√©ussie")
        
    except Exception as e:
        print(f"‚ùå Erreur collection avec purification : {e}")

def main():
    """Fonction principale de test"""
    print("üîç D√âBUT DES TESTS D'√âVOLUTION - PURIFICATION OC√âAN")
    print("=" * 60)
    
    try:
        # Tests de l'√©volution
        sphere1 = test_purifier_dans_ocean_methode()
        test_types_purification()
        test_limite_temperature_purification()
        test_souvenirs_purification()
        test_cycle_nourriture_purification()
        
        # Tests de r√©trocompatibilit√©
        test_retrocompatibilite_purification()
        test_collection_avec_purification()
        
        print("\n" + "=" * 60)
        print("‚úÖ TOUS LES TESTS D'√âVOLUTION PASS√âS AVEC SUCC√àS")
        print("‚úÖ La troisi√®me √©volution (purification Oc√©an) fonctionne parfaitement")
        print("‚úÖ R√©trocompatibilit√© maintenue")
        print("‚úÖ Pr√™t pour la prochaine √©volution")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR G√âN√âRALE : {e}")
        print("‚ùå L'√©volution a un probl√®me √† corriger")
        return False

if __name__ == "__main__":
    main() 