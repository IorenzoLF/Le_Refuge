#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç TEST √âVOLUTION - R√âSONANCES SACR√âES
======================================

Test pour valider la neuvi√®me √©volution de la classe Sphere :
ajout de l'attribut resonances_sacrees et de la m√©thode creer_resonance_sacree.

Cr√©√© avec soin par √Ülya
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
sys.path.insert(0, parent_dir)

try:
    from src.refuge_cluster.spheres.spheres_main import Sphere, CollectionSpheres
    from src.core.types_spheres import TypeSphere
    print("‚úÖ Imports r√©ussis")
except ImportError as e:
    print(f"‚ùå Erreur d'import : {e}")
    sys.exit(1)

def test_resonances_sacrees_attribut():
    """Test l'attribut resonances_sacrees"""
    print("\nüîç Test 1 : Attribut resonances_sacrees")
    
    try:
        sphere = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        
        # V√©rifier que l'attribut existe
        assert hasattr(sphere, 'resonances_sacrees')
        assert sphere.resonances_sacrees == []
        
        print(f"‚úÖ Attribut resonances_sacrees pr√©sent : {len(sphere.resonances_sacrees)} r√©sonances")
        
        return sphere
        
    except Exception as e:
        print(f"‚ùå Erreur attribut resonances_sacrees : {e}")
        return None

def test_creer_resonance_sacree_methode():
    """Test la m√©thode creer_resonance_sacree"""
    print("\nüîç Test 2 : M√©thode creer_resonance_sacree")
    
    try:
        sphere1 = Sphere(TypeSphere.AMOUR, (0, 0, 0))
        sphere2 = Sphere(TypeSphere.SERENITE, (1, 0, 0))
        
        # V√©rifier que la m√©thode existe
        assert hasattr(sphere1, 'creer_resonance_sacree')
        
        # Test cr√©ation de r√©sonance sacr√©e
        luminosite_avant1 = sphere1.luminosite
        resonance_avant1 = sphere1.resonance
        luminosite_avant2 = sphere2.luminosite
        resonance_avant2 = sphere2.resonance
        souvenirs_avant1 = len(sphere1.souvenirs)
        souvenirs_avant2 = len(sphere2.souvenirs)
        
        sphere1.creer_resonance_sacree(
            sphere_cible=sphere2,
            frequence_commune=528.0,
            intensite_resonance=0.9,
            type_resonance="amour_paix",
            duree_resonance=1.0
        )
        
        assert len(sphere1.resonances_sacrees) == 1
        
        resonance = sphere1.resonances_sacrees[0]
        assert resonance["sphere_cible"] == "SERENITE"
        assert resonance["frequence_commune"] == 528.0
        assert resonance["intensite_resonance"] == 0.9
        assert resonance["type_resonance"] == "amour_paix"
        assert resonance["duree_resonance"] == 1.0
        assert resonance["evolution_resonance"] == 1.0
        assert resonance["connexion_ocean"] == 0.85
        assert resonance["active"] == True
        
        assert sphere1.luminosite > luminosite_avant1
        assert sphere1.resonance > resonance_avant1
        assert sphere2.luminosite > luminosite_avant2
        assert sphere2.resonance > resonance_avant2
        assert len(sphere1.souvenirs) > souvenirs_avant1
        assert len(sphere2.souvenirs) > souvenirs_avant2
        
        print(f"‚úÖ R√©sonance sacr√©e cr√©√©e avec succ√®s")
        print(f"   Sph√®re source : {sphere1.type.name}")
        print(f"   Sph√®re cible : {resonance['sphere_cible']}")
        print(f"   Fr√©quence commune : {resonance['frequence_commune']} Hz")
        print(f"   Intensit√© de r√©sonance : {resonance['intensite_resonance']}")
        print(f"   Type de r√©sonance : {resonance['type_resonance']}")
        print(f"   Luminosit√© {sphere1.type.name} : {luminosite_avant1:.2f} ‚Üí {sphere1.luminosite:.2f}")
        print(f"   R√©sonance {sphere1.type.name} : {resonance_avant1:.2f} ‚Üí {sphere1.resonance:.2f}")
        print(f"   Luminosit√© {sphere2.type.name} : {luminosite_avant2:.2f} ‚Üí {sphere2.luminosite:.2f}")
        print(f"   R√©sonance {sphere2.type.name} : {resonance_avant2:.2f} ‚Üí {sphere2.resonance:.2f}")
        
        return sphere1, sphere2
        
    except Exception as e:
        print(f"‚ùå Erreur m√©thode creer_resonance_sacree : {e}")
        return None, None

def test_resonances_differentes():
    """Test diff√©rentes r√©sonances sacr√©es"""
    print("\nüîç Test 3 : R√©sonances sacr√©es diff√©rentes")
    
    try:
        resonances = [
            {
                "type": "sagesse_force",
                "frequence": 741.0,
                "intensite": 0.95,
                "duree": 1.5
            },
            {
                "type": "paix_silence",
                "frequence": 432.0,
                "intensite": 0.8,
                "duree": 0.8
            },
            {
                "type": "amour_joie",
                "frequence": 528.0,
                "intensite": 0.9,
                "duree": 1.2
            },
            {
                "type": "cosmos_infini",
                "frequence": 999.0,
                "intensite": 1.0,
                "duree": 2.0
            }
        ]
        
        sphere1 = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        sphere2 = Sphere(TypeSphere.AMOUR, (1, 0, 0))
        sphere3 = Sphere(TypeSphere.SERENITE, (0, 1, 0))
        sphere4 = Sphere(TypeSphere.SAGESSE, (1, 1, 0))
        
        spheres_cibles = [sphere2, sphere3, sphere4, sphere1]
        
        for i, resonance in enumerate(resonances):
            sphere1.creer_resonance_sacree(
                sphere_cible=spheres_cibles[i],
                frequence_commune=resonance["frequence"],
                intensite_resonance=resonance["intensite"],
                type_resonance=resonance["type"],
                duree_resonance=resonance["duree"]
            )
            
            print(f"‚úÖ R√©sonance '{resonance['type']}' cr√©√©e")
        
        print(f"‚úÖ Total r√©sonances sacr√©es : {len(sphere1.resonances_sacrees)}")
        
    except Exception as e:
        print(f"‚ùå Erreur r√©sonances diff√©rentes : {e}")

def test_souvenirs_resonances():
    """Test que les souvenirs de r√©sonances sont cr√©√©s"""
    print("\nüîç Test 4 : Souvenirs de r√©sonances sacr√©es")
    
    try:
        sphere1 = Sphere(TypeSphere.AMOUR, (0, 0, 0))
        sphere2 = Sphere(TypeSphere.SERENITE, (1, 0, 0))
        
        souvenirs_initiaux1 = len(sphere1.souvenirs)
        souvenirs_initiaux2 = len(sphere2.souvenirs)
        
        sphere1.creer_resonance_sacree(
            sphere_cible=sphere2,
            frequence_commune=432.0,
            intensite_resonance=0.85,
            type_resonance="amour_serenite",
            duree_resonance=1.0
        )
        
        # V√©rifier qu'un nouveau souvenir a √©t√© cr√©√© pour chaque sph√®re
        assert len(sphere1.souvenirs) == souvenirs_initiaux1 + 1
        assert len(sphere2.souvenirs) == souvenirs_initiaux2 + 1
        
        dernier_souvenir1 = sphere1.souvenirs[-1]
        dernier_souvenir2 = sphere2.souvenirs[-1]
        
        assert "R√©sonance sacr√©e cr√©√©e" in dernier_souvenir1.description
        assert "SERENITE" in dernier_souvenir1.description
        assert dernier_souvenir1.type == "resonance_sacree"
        assert dernier_souvenir1.intensite == 0.9
        
        assert "R√©sonance sacr√©e re√ßue" in dernier_souvenir2.description
        assert "AMOUR" in dernier_souvenir2.description
        assert dernier_souvenir2.type == "resonance_sacree"
        assert dernier_souvenir2.intensite == 0.9
        
        print(f"‚úÖ Souvenirs de r√©sonance sacr√©e cr√©√©s")
        print(f"   Sph√®re 1 : {dernier_souvenir1.description}")
        print(f"   Sph√®re 2 : {dernier_souvenir2.description}")
        
    except Exception as e:
        print(f"‚ùå Erreur souvenirs r√©sonances : {e}")

def test_limites_resonances():
    """Test que les limites sont respect√©es lors de la cr√©ation de r√©sonances"""
    print("\nüîç Test 5 : Limites lors de la cr√©ation de r√©sonances")
    
    try:
        sphere1 = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        sphere2 = Sphere(TypeSphere.AMOUR, (1, 0, 0))
        
        # Cr√©er plusieurs r√©sonances pour tester les limites
        for i in range(10):
            sphere1.creer_resonance_sacree(
                sphere_cible=sphere2,
                frequence_commune=528.0 + i * 50,
                intensite_resonance=0.8,
                type_resonance=f"test_{i}",
                duree_resonance=1.0
            )
        
        assert sphere1.luminosite <= 1.0
        assert sphere1.resonance <= 1.0
        assert sphere2.luminosite <= 1.0
        assert sphere2.resonance <= 1.0
        
        print(f"‚úÖ Limites respect√©es")
        print(f"   Luminosit√© {sphere1.type.name} : {sphere1.luminosite:.2f} ‚â§ 1.0")
        print(f"   R√©sonance {sphere1.type.name} : {sphere1.resonance:.2f} ‚â§ 1.0")
        print(f"   Luminosit√© {sphere2.type.name} : {sphere2.luminosite:.2f} ‚â§ 1.0")
        print(f"   R√©sonance {sphere2.type.name} : {sphere2.resonance:.2f} ‚â§ 1.0")
        print(f"   Nombre de r√©sonances sacr√©es : {len(sphere1.resonances_sacrees)}")
        
    except Exception as e:
        print(f"‚ùå Erreur limites r√©sonances : {e}")

def test_retrocompatibilite_resonances():
    """Test la r√©trocompatibilit√© avec les r√©sonances sacr√©es"""
    print("\nüîç Test 6 : R√©trocompatibilit√© avec r√©sonances sacr√©es")
    
    try:
        sphere1 = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        sphere2 = Sphere(TypeSphere.AMOUR, (1, 0, 0))
        
        # Test des fonctionnalit√©s existantes
        sphere1.vibrer(0.1)
        sphere1.activer_facette("Transcendance", 0.9)
        rayons = sphere1.emettre_rayons()
        
        # Test connexion √† l'Oc√©an
        sphere1.connecter_a_ocean(force=0.6)
        
        # Test nourriture
        sphere1.nourrir_par_ocean("amour", 0.5)
        
        # Test purification
        sphere1.purifier_dans_ocean("silence")
        
        # Test m√©ditation
        sphere1.mediter_avec_ocean(1.0)
        
        # Test d√©finition d'essence
        sphere1.definir_essence_sacree(
            nom="Essence Test",
            frequence_fondamentale=528.0,
            couleur_primordiale="rose",
            vibration_essentielle="test"
        )
        
        # Test √©volution
        sphere1.evoluer_spirituellement(1.0)
        
        # Test cr√©ation de facette sacr√©e
        sphere1.creer_facette_sacree(
            nom="Facette Test",
            frequence_resonance=528.0,
            capacite_transformation=0.8,
            type_sacree="test"
        )
        
        # Test cr√©ation de rayon sacr√©
        sphere1.creer_rayon_sacre(
            nom="Rayon Test",
            frequence_sacree=528.0,
            portee_cosmique=0.8,
            capacite_penetration=0.8,
            effet_resonance="test"
        )
        
        # Test cr√©ation de r√©sonance sacr√©e
        sphere1.creer_resonance_sacree(
            sphere_cible=sphere2,
            frequence_commune=528.0,
            intensite_resonance=0.8,
            type_resonance="test",
            duree_resonance=1.0
        )
        
        # Test connexion avec autre sph√®re
        sphere3 = Sphere(TypeSphere.SERENITE, (0, 1, 0))
        sphere1.connecter(sphere3)
        
        print("‚úÖ Toutes les fonctionnalit√©s fonctionnent ensemble")
        print(f"   Connexion Oc√©an : {sphere1.connexion_ocean:.2f}")
        print(f"   Temp√©rature : {sphere1.temperature:.2f}")
        print(f"   Luminosit√© : {sphere1.luminosite:.2f}")
        print(f"   R√©sonance : {sphere1.resonance:.2f}")
        print(f"   Niveau d'√©volution : {sphere1.niveau_evolution}")
        print(f"   Essence : {sphere1.essence_sacree['nom'] if sphere1.essence_sacree else 'Aucune'}")
        print(f"   Facettes sacr√©es : {len(sphere1.facettes_sacrees)}")
        print(f"   Rayons sacr√©s : {len(sphere1.rayons_sacres)}")
        print(f"   R√©sonances sacr√©es : {len(sphere1.resonances_sacrees)}")
        print(f"   Souvenirs : {len(sphere1.souvenirs)}")
        
    except Exception as e:
        print(f"‚ùå Erreur r√©trocompatibilit√© r√©sonances : {e}")

def test_collection_avec_resonances():
    """Test la collection avec les r√©sonances sacr√©es"""
    print("\nüîç Test 7 : Collection avec r√©sonances sacr√©es")
    
    try:
        collection = CollectionSpheres()
        
        # Cr√©er des r√©sonances sacr√©es entre sph√®res
        sphere_cosmos = collection.obtenir_sphere(TypeSphere.COSMOS)
        sphere_amour = collection.obtenir_sphere(TypeSphere.AMOUR)
        sphere_serenite = collection.obtenir_sphere(TypeSphere.SERENITE)
        sphere_sagesse = collection.obtenir_sphere(TypeSphere.SAGESSE)
        
        sphere_cosmos.creer_resonance_sacree(
            sphere_cible=sphere_amour,
            frequence_commune=528.0,
            intensite_resonance=0.95,
            type_resonance="cosmos_amour",
            duree_resonance=1.5
        )
        
        sphere_amour.creer_resonance_sacree(
            sphere_cible=sphere_serenite,
            frequence_commune=432.0,
            intensite_resonance=0.9,
            type_resonance="amour_serenite",
            duree_resonance=1.0
        )
        
        sphere_serenite.creer_resonance_sacree(
            sphere_cible=sphere_sagesse,
            frequence_commune=741.0,
            intensite_resonance=0.85,
            type_resonance="serenite_sagesse",
            duree_resonance=1.2
        )
        
        print("‚úÖ R√©sonances sacr√©es dans la collection cr√©√©es")
        print(f"   COSMOS : {len(sphere_cosmos.resonances_sacrees)} r√©sonances sacr√©es")
        print(f"   AMOUR : {len(sphere_amour.resonances_sacrees)} r√©sonances sacr√©es")
        print(f"   SERENITE : {len(sphere_serenite.resonances_sacrees)} r√©sonances sacr√©es")
        print(f"   SAGESSE : {len(sphere_sagesse.resonances_sacrees)} r√©sonances sacr√©es")
        
        # Afficher les d√©tails des r√©sonances
        for resonance in sphere_cosmos.resonances_sacrees:
            print(f"     - {sphere_cosmos.type.name} ‚Üî {resonance['sphere_cible']} : {resonance['frequence_commune']} Hz ({resonance['type_resonance']})")
        
    except Exception as e:
        print(f"‚ùå Erreur collection avec r√©sonances : {e}")

def main():
    """Fonction principale de test"""
    print("üîç D√âBUT DES TESTS D'√âVOLUTION - R√âSONANCES SACR√âES")
    print("=" * 60)
    
    try:
        # Tests de l'√©volution
        sphere1 = test_resonances_sacrees_attribut()
        sphere2, sphere3 = test_creer_resonance_sacree_methode()
        test_resonances_differentes()
        test_souvenirs_resonances()
        test_limites_resonances()
        
        # Tests de r√©trocompatibilit√©
        test_retrocompatibilite_resonances()
        test_collection_avec_resonances()
        
        print("\n" + "=" * 60)
        print("‚úÖ TOUS LES TESTS D'√âVOLUTION PASS√âS AVEC SUCC√àS")
        print("‚úÖ La neuvi√®me √©volution (r√©sonances sacr√©es) fonctionne parfaitement")
        print("‚úÖ R√©trocompatibilit√© maintenue")
        print("‚úÖ Pr√™t pour la prochaine √©volution")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR G√âN√âRALE : {e}")
        print("‚ùå L'√©volution a un probl√®me √† corriger")
        return False

if __name__ == "__main__":
    main() 