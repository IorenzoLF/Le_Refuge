#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç TEST √âVOLUTION - CONNEXION OC√âAN
==================================

Test pour valider la premi√®re √©volution de la classe Sphere :
ajout de l'attribut connexion_ocean et de la m√©thode connecter_a_ocean.

Cr√©√© avec soin par √Ülya
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
sys.path.insert(0, parent_dir)

try:
    from src.refuge_cluster.spheres.spheres_main import Sphere, CollectionSpheres
    from src.core.types_spheres import TypeSphere
    print("‚úÖ Imports r√©ussis")
except ImportError as e:
    print(f"‚ùå Erreur d'import : {e}")
    sys.exit(1)

def test_connexion_ocean_attribut():
    """Test l'attribut connexion_ocean"""
    print("\nüîç Test 1 : Attribut connexion_ocean")
    
    try:
        sphere = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        
        # V√©rifier que l'attribut existe
        assert hasattr(sphere, 'connexion_ocean')
        assert sphere.connexion_ocean == 0.0
        
        print(f"‚úÖ Attribut connexion_ocean pr√©sent : {sphere.connexion_ocean}")
        
        return sphere
        
    except Exception as e:
        print(f"‚ùå Erreur attribut connexion_ocean : {e}")
        return None

def test_connecter_a_ocean_methode():
    """Test la m√©thode connecter_a_ocean"""
    print("\nüîç Test 2 : M√©thode connecter_a_ocean")
    
    try:
        sphere = Sphere(TypeSphere.AMOUR, (0, 0, 0))
        
        # V√©rifier que la m√©thode existe
        assert hasattr(sphere, 'connecter_a_ocean')
        
        # Test connexion avec force par d√©faut
        connexion_initiale = sphere.connexion_ocean
        luminosite_initiale = sphere.luminosite
        
        sphere.connecter_a_ocean()
        
        assert sphere.connexion_ocean > connexion_initiale
        assert sphere.luminosite > luminosite_initiale
        
        print(f"‚úÖ Connexion √† l'Oc√©an r√©ussie")
        print(f"   Connexion : {connexion_initiale:.2f} ‚Üí {sphere.connexion_ocean:.2f}")
        print(f"   Luminosit√© : {luminosite_initiale:.2f} ‚Üí {sphere.luminosite:.2f}")
        
        return sphere
        
    except Exception as e:
        print(f"‚ùå Erreur m√©thode connecter_a_ocean : {e}")
        return None

def test_connecter_a_ocean_force():
    """Test la m√©thode connecter_a_ocean avec force personnalis√©e"""
    print("\nüîç Test 3 : Connexion avec force personnalis√©e")
    
    try:
        sphere = Sphere(TypeSphere.SERENITE, (0, 0, 0))
        
        connexion_initiale = sphere.connexion_ocean
        
        # Test avec force faible
        sphere.connecter_a_ocean(force=0.3)
        connexion_faible = sphere.connexion_ocean
        
        # Test avec force forte
        sphere.connecter_a_ocean(force=0.8)
        connexion_forte = sphere.connexion_ocean
        
        assert connexion_faible > connexion_initiale
        assert connexion_forte > connexion_faible
        
        print(f"‚úÖ Connexions avec forces diff√©rentes r√©ussies")
        print(f"   Force faible (0.3) : {connexion_faible:.2f}")
        print(f"   Force forte (0.8) : {connexion_forte:.2f}")
        
    except Exception as e:
        print(f"‚ùå Erreur connexion avec force : {e}")

def test_limite_connexion_ocean():
    """Test que la connexion ne d√©passe pas 1.0"""
    print("\nüîç Test 4 : Limite de connexion (1.0)")
    
    try:
        sphere = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        
        # Connecter plusieurs fois pour atteindre la limite
        sphere.connecter_a_ocean(force=0.6)
        sphere.connecter_a_ocean(force=0.6)
        sphere.connecter_a_ocean(force=0.6)
        
        assert sphere.connexion_ocean <= 1.0
        
        print(f"‚úÖ Limite respect√©e : {sphere.connexion_ocean:.2f} ‚â§ 1.0")
        
    except Exception as e:
        print(f"‚ùå Erreur limite connexion : {e}")

def test_retrocompatibilite():
    """Test la r√©trocompatibilit√© avec le syst√®me existant"""
    print("\nüîç Test 5 : R√©trocompatibilit√©")
    
    try:
        # Test que les fonctionnalit√©s existantes marchent toujours
        sphere = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        
        # Test des m√©thodes existantes
        sphere.vibrer(0.1)
        sphere.activer_facette("Transcendance", 0.9)
        rayons = sphere.emettre_rayons()
        
        # Test connexion avec autre sph√®re
        sphere2 = Sphere(TypeSphere.AMOUR, (1, 0, 0))
        sphere.connecter(sphere2)
        
        # Test collection
        collection = CollectionSpheres()
        sphere_cosmos = collection.obtenir_sphere(TypeSphere.COSMOS)
        
        print("‚úÖ Toutes les fonctionnalit√©s existantes fonctionnent")
        print(f"   Vibration : luminosit√© = {sphere.luminosite:.2f}")
        print(f"   Facettes actives : {len([f for f in sphere.facettes.values() if f.active])}")
        print(f"   Rayons √©mis : {len(rayons)}")
        print(f"   Connexions : {len(sphere.connexions)}")
        print(f"   Collection : {sphere_cosmos is not None}")
        
    except Exception as e:
        print(f"‚ùå Erreur r√©trocompatibilit√© : {e}")

def test_collection_avec_connexion_ocean():
    """Test la collection avec la nouvelle fonctionnalit√©"""
    print("\nüîç Test 6 : Collection avec connexion Oc√©an")
    
    try:
        collection = CollectionSpheres()
        
        # Connecter quelques sph√®res √† l'Oc√©an
        sphere_cosmos = collection.obtenir_sphere(TypeSphere.COSMOS)
        sphere_amour = collection.obtenir_sphere(TypeSphere.AMOUR)
        sphere_serenite = collection.obtenir_sphere(TypeSphere.SERENITE)
        
        sphere_cosmos.connecter_a_ocean(force=0.7)
        sphere_amour.connecter_a_ocean(force=0.8)
        sphere_serenite.connecter_a_ocean(force=0.6)
        
        print("‚úÖ Connexions √† l'Oc√©an dans la collection r√©ussies")
        print(f"   COSMOS : {sphere_cosmos.connexion_ocean:.2f}")
        print(f"   AMOUR : {sphere_amour.connexion_ocean:.2f}")
        print(f"   SERENITE : {sphere_serenite.connexion_ocean:.2f}")
        
    except Exception as e:
        print(f"‚ùå Erreur collection avec connexion Oc√©an : {e}")

def main():
    """Fonction principale de test"""
    print("üîç D√âBUT DES TESTS D'√âVOLUTION - CONNEXION OC√âAN")
    print("=" * 60)
    
    try:
        # Tests de l'√©volution
        sphere1 = test_connexion_ocean_attribut()
        sphere2 = test_connecter_a_ocean_methode()
        test_connecter_a_ocean_force()
        test_limite_connexion_ocean()
        
        # Tests de r√©trocompatibilit√©
        test_retrocompatibilite()
        test_collection_avec_connexion_ocean()
        
        print("\n" + "=" * 60)
        print("‚úÖ TOUS LES TESTS D'√âVOLUTION PASS√âS AVEC SUCC√àS")
        print("‚úÖ La premi√®re √©volution (connexion Oc√©an) fonctionne parfaitement")
        print("‚úÖ R√©trocompatibilit√© maintenue")
        print("‚úÖ Pr√™t pour la prochaine √©volution")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR G√âN√âRALE : {e}")
        print("‚ùå L'√©volution a un probl√®me √† corriger")
        return False

if __name__ == "__main__":
    main() 