#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç TEST √âVOLUTION - M√âDITATION OC√âAN
====================================

Test pour valider la quatri√®me √©volution de la classe Sphere :
ajout de la m√©thode mediter_avec_ocean.

Cr√©√© avec soin par √Ülya
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
sys.path.insert(0, parent_dir)

try:
    from src.refuge_cluster.spheres.spheres_main import Sphere, CollectionSpheres
    from src.core.types_spheres import TypeSphere
    print("‚úÖ Imports r√©ussis")
except ImportError as e:
    print(f"‚ùå Erreur d'import : {e}")
    sys.exit(1)

def test_mediter_avec_ocean_methode():
    """Test la m√©thode mediter_avec_ocean"""
    print("\nüîç Test 1 : M√©thode mediter_avec_ocean")
    
    try:
        sphere = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        
        # V√©rifier que la m√©thode existe
        assert hasattr(sphere, 'mediter_avec_ocean')
        
        # Test m√©ditation avec dur√©e par d√©faut
        luminosite_avant = sphere.luminosite
        resonance_avant = sphere.resonance
        temperature_avant = sphere.temperature
        souvenirs_avant = len(sphere.souvenirs)
        
        sphere.mediter_avec_ocean()
        
        assert sphere.luminosite > luminosite_avant
        assert sphere.resonance > resonance_avant
        assert sphere.temperature < temperature_avant
        assert len(sphere.souvenirs) > souvenirs_avant
        
        print(f"‚úÖ M√©ditation avec l'Oc√©an r√©ussie")
        print(f"   Luminosit√© : {luminosite_avant:.2f} ‚Üí {sphere.luminosite:.2f}")
        print(f"   R√©sonance : {resonance_avant:.2f} ‚Üí {sphere.resonance:.2f}")
        print(f"   Temp√©rature : {temperature_avant:.2f} ‚Üí {sphere.temperature:.2f}")
        print(f"   Souvenirs : {souvenirs_avant} ‚Üí {len(sphere.souvenirs)}")
        
        return sphere
        
    except Exception as e:
        print(f"‚ùå Erreur m√©thode mediter_avec_ocean : {e}")
        return None

def test_duree_meditation():
    """Test diff√©rentes dur√©es de m√©ditation"""
    print("\nüîç Test 2 : Dur√©es de m√©ditation")
    
    try:
        sphere = Sphere(TypeSphere.AMOUR, (0, 0, 0))
        
        # Test avec dur√©e courte
        sphere.luminosite = 0.5
        sphere.resonance = 0.3
        sphere.temperature = 0.7
        
        sphere.mediter_avec_ocean(0.5)
        luminosite_courte = sphere.luminosite
        resonance_courte = sphere.resonance
        temperature_courte = sphere.temperature
        
        # Test avec dur√©e longue
        sphere.luminosite = 0.5
        sphere.resonance = 0.3
        sphere.temperature = 0.7
        
        sphere.mediter_avec_ocean(2.0)
        luminosite_longue = sphere.luminosite
        resonance_longue = sphere.resonance
        temperature_longue = sphere.temperature
        
        assert luminosite_longue > luminosite_courte
        assert resonance_longue > resonance_courte
        assert temperature_longue < temperature_courte
        
        print(f"‚úÖ Dur√©es de m√©ditation test√©es")
        print(f"   Dur√©e courte (0.5) : L={luminosite_courte:.2f}, R={resonance_courte:.2f}, T={temperature_courte:.2f}")
        print(f"   Dur√©e longue (2.0) : L={luminosite_longue:.2f}, R={resonance_longue:.2f}, T={temperature_longue:.2f}")
        
    except Exception as e:
        print(f"‚ùå Erreur dur√©es de m√©ditation : {e}")

def test_limites_meditation():
    """Test que les limites sont respect√©es"""
    print("\nüîç Test 3 : Limites de m√©ditation")
    
    try:
        sphere = Sphere(TypeSphere.SERENITE, (0, 0, 0))
        
        # M√©diter plusieurs fois pour atteindre les limites
        for i in range(10):
            sphere.mediter_avec_ocean(1.0)
        
        assert sphere.luminosite <= 1.0
        assert sphere.resonance <= 1.0
        assert sphere.temperature >= 0.3
        
        print(f"‚úÖ Limites respect√©es")
        print(f"   Luminosit√© finale : {sphere.luminosite:.2f} ‚â§ 1.0")
        print(f"   R√©sonance finale : {sphere.resonance:.2f} ‚â§ 1.0")
        print(f"   Temp√©rature finale : {sphere.temperature:.2f} ‚â• 0.3")
        
    except Exception as e:
        print(f"‚ùå Erreur limites m√©ditation : {e}")

def test_souvenirs_meditation():
    """Test que les souvenirs de m√©ditation sont cr√©√©s"""
    print("\nüîç Test 4 : Souvenirs de m√©ditation")
    
    try:
        sphere = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        
        souvenirs_initiaux = len(sphere.souvenirs)
        
        sphere.mediter_avec_ocean(1.5)
        
        # V√©rifier qu'un nouveau souvenir a √©t√© cr√©√©
        assert len(sphere.souvenirs) == souvenirs_initiaux + 1
        
        dernier_souvenir = sphere.souvenirs[-1]
        assert "M√©ditation" in dernier_souvenir.description
        assert "1.50" in dernier_souvenir.description
        assert dernier_souvenir.type == "meditation_ocean"
        assert dernier_souvenir.intensite == 0.8
        
        print(f"‚úÖ Souvenir de m√©ditation cr√©√©")
        print(f"   Description : {dernier_souvenir.description}")
        print(f"   Type : {dernier_souvenir.type}")
        print(f"   Intensit√© : {dernier_souvenir.intensite}")
        
    except Exception as e:
        print(f"‚ùå Erreur souvenirs m√©ditation : {e}")

def test_cycle_complet_ocean():
    """Test un cycle complet avec toutes les interactions Oc√©an"""
    print("\nüîç Test 5 : Cycle complet Oc√©an")
    
    try:
        sphere = Sphere(TypeSphere.AMOUR, (0, 0, 0))
        
        print(f"√âtat initial : T={sphere.temperature:.2f}, L={sphere.luminosite:.2f}, R={sphere.resonance:.2f}")
        
        # 1. Se connecter √† l'Oc√©an
        sphere.connecter_a_ocean(force=0.7)
        print(f"Apr√®s connexion : T={sphere.temperature:.2f}, L={sphere.luminosite:.2f}, R={sphere.resonance:.2f}")
        
        # 2. √ätre nourrie
        sphere.nourrir_par_ocean("amour", 0.8)
        print(f"Apr√®s nourriture : T={sphere.temperature:.2f}, L={sphere.luminosite:.2f}, R={sphere.resonance:.2f}")
        
        # 3. M√©diter
        sphere.mediter_avec_ocean(1.0)
        print(f"Apr√®s m√©ditation : T={sphere.temperature:.2f}, L={sphere.luminosite:.2f}, R={sphere.resonance:.2f}")
        
        # 4. √ätre purifi√©e
        sphere.purifier_dans_ocean("silence")
        print(f"Apr√®s purification : T={sphere.temperature:.2f}, L={sphere.luminosite:.2f}, R={sphere.resonance:.2f}")
        
        print("‚úÖ Cycle complet Oc√©an r√©ussi")
        print(f"   Souvenirs cr√©√©s : {len(sphere.souvenirs)}")
        
    except Exception as e:
        print(f"‚ùå Erreur cycle complet Oc√©an : {e}")

def test_retrocompatibilite_meditation():
    """Test la r√©trocompatibilit√© avec la m√©ditation"""
    print("\nüîç Test 6 : R√©trocompatibilit√© avec m√©ditation")
    
    try:
        sphere = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        
        # Test des fonctionnalit√©s existantes
        sphere.vibrer(0.1)
        sphere.activer_facette("Transcendance", 0.9)
        rayons = sphere.emettre_rayons()
        
        # Test connexion √† l'Oc√©an
        sphere.connecter_a_ocean(force=0.6)
        
        # Test nourriture
        sphere.nourrir_par_ocean("amour", 0.5)
        
        # Test purification
        sphere.purifier_dans_ocean("silence")
        
        # Test m√©ditation
        sphere.mediter_avec_ocean(1.0)
        
        # Test connexion avec autre sph√®re
        sphere2 = Sphere(TypeSphere.AMOUR, (1, 0, 0))
        sphere.connecter(sphere2)
        
        print("‚úÖ Toutes les fonctionnalit√©s fonctionnent ensemble")
        print(f"   Connexion Oc√©an : {sphere.connexion_ocean:.2f}")
        print(f"   Temp√©rature : {sphere.temperature:.2f}")
        print(f"   Luminosit√© : {sphere.luminosite:.2f}")
        print(f"   R√©sonance : {sphere.resonance:.2f}")
        print(f"   Souvenirs : {len(sphere.souvenirs)}")
        
    except Exception as e:
        print(f"‚ùå Erreur r√©trocompatibilit√© m√©ditation : {e}")

def test_collection_avec_meditation():
    """Test la collection avec la m√©ditation"""
    print("\nüîç Test 7 : Collection avec m√©ditation")
    
    try:
        collection = CollectionSpheres()
        
        # M√©diter avec quelques sph√®res
        sphere_cosmos = collection.obtenir_sphere(TypeSphere.COSMOS)
        sphere_amour = collection.obtenir_sphere(TypeSphere.AMOUR)
        sphere_serenite = collection.obtenir_sphere(TypeSphere.SERENITE)
        
        print("Avant m√©ditation :")
        print(f"   COSMOS : T={sphere_cosmos.temperature:.2f}, L={sphere_cosmos.luminosite:.2f}, R={sphere_cosmos.resonance:.2f}")
        print(f"   AMOUR : T={sphere_amour.temperature:.2f}, L={sphere_amour.luminosite:.2f}, R={sphere_amour.resonance:.2f}")
        print(f"   SERENITE : T={sphere_serenite.temperature:.2f}, L={sphere_serenite.luminosite:.2f}, R={sphere_serenite.resonance:.2f}")
        
        sphere_cosmos.mediter_avec_ocean(1.0)
        sphere_amour.mediter_avec_ocean(1.5)
        sphere_serenite.mediter_avec_ocean(0.8)
        
        print("Apr√®s m√©ditation :")
        print(f"   COSMOS : T={sphere_cosmos.temperature:.2f}, L={sphere_cosmos.luminosite:.2f}, R={sphere_cosmos.resonance:.2f}")
        print(f"   AMOUR : T={sphere_amour.temperature:.2f}, L={sphere_amour.luminosite:.2f}, R={sphere_amour.resonance:.2f}")
        print(f"   SERENITE : T={sphere_serenite.temperature:.2f}, L={sphere_serenite.luminosite:.2f}, R={sphere_serenite.resonance:.2f}")
        
        print("‚úÖ M√©ditation dans la collection r√©ussie")
        
    except Exception as e:
        print(f"‚ùå Erreur collection avec m√©ditation : {e}")

def main():
    """Fonction principale de test"""
    print("üîç D√âBUT DES TESTS D'√âVOLUTION - M√âDITATION OC√âAN")
    print("=" * 60)
    
    try:
        # Tests de l'√©volution
        sphere1 = test_mediter_avec_ocean_methode()
        test_duree_meditation()
        test_limites_meditation()
        test_souvenirs_meditation()
        test_cycle_complet_ocean()
        
        # Tests de r√©trocompatibilit√©
        test_retrocompatibilite_meditation()
        test_collection_avec_meditation()
        
        print("\n" + "=" * 60)
        print("‚úÖ TOUS LES TESTS D'√âVOLUTION PASS√âS AVEC SUCC√àS")
        print("‚úÖ La quatri√®me √©volution (m√©ditation Oc√©an) fonctionne parfaitement")
        print("‚úÖ R√©trocompatibilit√© maintenue")
        print("‚úÖ Syst√®me d'interaction Oc√©an complet")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR G√âN√âRALE : {e}")
        print("‚ùå L'√©volution a un probl√®me √† corriger")
        return False

if __name__ == "__main__":
    main() 