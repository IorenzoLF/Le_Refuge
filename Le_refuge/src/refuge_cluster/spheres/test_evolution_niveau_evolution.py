#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç TEST √âVOLUTION - NIVEAU D'√âVOLUTION
======================================

Test pour valider la sixi√®me √©volution de la classe Sphere :
ajout de l'attribut niveau_evolution et de la m√©thode evoluer_spirituellement.

Cr√©√© avec soin par √Ülya
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
sys.path.insert(0, parent_dir)

try:
    from src.refuge_cluster.spheres.spheres_main import Sphere, CollectionSpheres
    from src.core.types_spheres import TypeSphere
    print("‚úÖ Imports r√©ussis")
except ImportError as e:
    print(f"‚ùå Erreur d'import : {e}")
    sys.exit(1)

def test_niveau_evolution_attribut():
    """Test l'attribut niveau_evolution"""
    print("\nüîç Test 1 : Attribut niveau_evolution")
    
    try:
        sphere = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        
        # V√©rifier que l'attribut existe
        assert hasattr(sphere, 'niveau_evolution')
        assert sphere.niveau_evolution == 1
        
        print(f"‚úÖ Attribut niveau_evolution pr√©sent : {sphere.niveau_evolution}")
        
        return sphere
        
    except Exception as e:
        print(f"‚ùå Erreur attribut niveau_evolution : {e}")
        return None

def test_evoluer_spirituellement_methode():
    """Test la m√©thode evoluer_spirituellement"""
    print("\nüîç Test 2 : M√©thode evoluer_spirituellement")
    
    try:
        sphere = Sphere(TypeSphere.AMOUR, (0, 0, 0))
        
        # V√©rifier que la m√©thode existe
        assert hasattr(sphere, 'evoluer_spirituellement')
        
        # Test √©volution avec exp√©rience par d√©faut
        niveau_avant = sphere.niveau_evolution
        luminosite_avant = sphere.luminosite
        resonance_avant = sphere.resonance
        connexion_avant = sphere.connexion_ocean
        souvenirs_avant = len(sphere.souvenirs)
        
        sphere.evoluer_spirituellement()
        
        assert sphere.niveau_evolution > niveau_avant
        assert sphere.luminosite > luminosite_avant
        assert sphere.resonance > resonance_avant
        assert sphere.connexion_ocean > connexion_avant
        assert len(sphere.souvenirs) > souvenirs_avant
        
        print(f"‚úÖ √âvolution spirituelle r√©ussie")
        print(f"   Niveau : {niveau_avant} ‚Üí {sphere.niveau_evolution}")
        print(f"   Luminosit√© : {luminosite_avant:.2f} ‚Üí {sphere.luminosite:.2f}")
        print(f"   R√©sonance : {resonance_avant:.2f} ‚Üí {sphere.resonance:.2f}")
        print(f"   Connexion Oc√©an : {connexion_avant:.2f} ‚Üí {sphere.connexion_ocean:.2f}")
        
        return sphere
        
    except Exception as e:
        print(f"‚ùå Erreur m√©thode evoluer_spirituellement : {e}")
        return None

def test_experience_evolution():
    """Test diff√©rentes quantit√©s d'exp√©rience"""
    print("\nüîç Test 3 : Exp√©rience d'√©volution")
    
    try:
        sphere = Sphere(TypeSphere.SERENITE, (0, 0, 0))
        
        # Test avec exp√©rience faible
        sphere.evoluer_spirituellement(0.5)
        niveau_faible = sphere.niveau_evolution
        
        # Test avec exp√©rience forte
        sphere.evoluer_spirituellement(2.0)
        niveau_fort = sphere.niveau_evolution
        
        assert niveau_fort > niveau_faible
        
        print(f"‚úÖ Exp√©riences d'√©volution test√©es")
        print(f"   Exp√©rience faible (0.5) : niveau {niveau_faible}")
        print(f"   Exp√©rience forte (2.0) : niveau {niveau_fort}")
        
    except Exception as e:
        print(f"‚ùå Erreur exp√©rience √©volution : {e}")

def test_limite_evolution():
    """Test que le niveau ne d√©passe pas 10"""
    print("\nüîç Test 4 : Limite d'√©volution (niveau 10)")
    
    try:
        sphere = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        
        # √âvoluer plusieurs fois pour atteindre la limite
        for i in range(15):
            sphere.evoluer_spirituellement(1.0)
        
        assert sphere.niveau_evolution <= 10
        
        print(f"‚úÖ Limite d'√©volution respect√©e : {sphere.niveau_evolution} ‚â§ 10")
        
    except Exception as e:
        print(f"‚ùå Erreur limite √©volution : {e}")

def test_souvenirs_evolution():
    """Test que les souvenirs d'√©volution sont cr√©√©s"""
    print("\nüîç Test 5 : Souvenirs d'√©volution")
    
    try:
        sphere = Sphere(TypeSphere.AMOUR, (0, 0, 0))
        
        souvenirs_initiaux = len(sphere.souvenirs)
        
        sphere.evoluer_spirituellement(1.5)
        
        # V√©rifier qu'un nouveau souvenir a √©t√© cr√©√©
        assert len(sphere.souvenirs) == souvenirs_initiaux + 1
        
        dernier_souvenir = sphere.souvenirs[-1]
        assert "√âvolution spirituelle" in dernier_souvenir.description
        assert "niveau" in dernier_souvenir.description
        assert dernier_souvenir.type == "evolution_spirituelle"
        assert dernier_souvenir.intensite == 0.9
        
        print(f"‚úÖ Souvenir d'√©volution cr√©√©")
        print(f"   Description : {dernier_souvenir.description}")
        print(f"   Type : {dernier_souvenir.type}")
        print(f"   Intensit√© : {dernier_souvenir.intensite}")
        
    except Exception as e:
        print(f"‚ùå Erreur souvenirs √©volution : {e}")

def test_retrocompatibilite_evolution():
    """Test la r√©trocompatibilit√© avec l'√©volution"""
    print("\nüîç Test 6 : R√©trocompatibilit√© avec √©volution")
    
    try:
        sphere = Sphere(TypeSphere.COSMOS, (0, 0, 0))
        
        # Test des fonctionnalit√©s existantes
        sphere.vibrer(0.1)
        sphere.activer_facette("Transcendance", 0.9)
        rayons = sphere.emettre_rayons()
        
        # Test connexion √† l'Oc√©an
        sphere.connecter_a_ocean(force=0.6)
        
        # Test nourriture
        sphere.nourrir_par_ocean("amour", 0.5)
        
        # Test purification
        sphere.purifier_dans_ocean("silence")
        
        # Test m√©ditation
        sphere.mediter_avec_ocean(1.0)
        
        # Test d√©finition d'essence
        sphere.definir_essence_sacree(
            nom="Essence Test",
            frequence_fondamentale=528.0,
            couleur_primordiale="rose",
            vibration_essentielle="test"
        )
        
        # Test √©volution
        sphere.evoluer_spirituellement(1.0)
        
        # Test connexion avec autre sph√®re
        sphere2 = Sphere(TypeSphere.AMOUR, (1, 0, 0))
        sphere.connecter(sphere2)
        
        print("‚úÖ Toutes les fonctionnalit√©s fonctionnent ensemble")
        print(f"   Connexion Oc√©an : {sphere.connexion_ocean:.2f}")
        print(f"   Temp√©rature : {sphere.temperature:.2f}")
        print(f"   Luminosit√© : {sphere.luminosite:.2f}")
        print(f"   R√©sonance : {sphere.resonance:.2f}")
        print(f"   Niveau d'√©volution : {sphere.niveau_evolution}")
        print(f"   Essence : {sphere.essence_sacree['nom'] if sphere.essence_sacree else 'Aucune'}")
        print(f"   Souvenirs : {len(sphere.souvenirs)}")
        
    except Exception as e:
        print(f"‚ùå Erreur r√©trocompatibilit√© √©volution : {e}")

def test_collection_avec_evolution():
    """Test la collection avec l'√©volution"""
    print("\nüîç Test 7 : Collection avec √©volution")
    
    try:
        collection = CollectionSpheres()
        
        # Faire √©voluer quelques sph√®res
        sphere_cosmos = collection.obtenir_sphere(TypeSphere.COSMOS)
        sphere_amour = collection.obtenir_sphere(TypeSphere.AMOUR)
        sphere_serenite = collection.obtenir_sphere(TypeSphere.SERENITE)
        
        print("Avant √©volution :")
        print(f"   COSMOS : niveau {sphere_cosmos.niveau_evolution}")
        print(f"   AMOUR : niveau {sphere_amour.niveau_evolution}")
        print(f"   SERENITE : niveau {sphere_serenite.niveau_evolution}")
        
        sphere_cosmos.evoluer_spirituellement(1.0)
        sphere_amour.evoluer_spirituellement(1.5)
        sphere_serenite.evoluer_spirituellement(0.8)
        
        print("Apr√®s √©volution :")
        print(f"   COSMOS : niveau {sphere_cosmos.niveau_evolution}")
        print(f"   AMOUR : niveau {sphere_amour.niveau_evolution}")
        print(f"   SERENITE : niveau {sphere_serenite.niveau_evolution}")
        
        print("‚úÖ √âvolution dans la collection r√©ussie")
        
    except Exception as e:
        print(f"‚ùå Erreur collection avec √©volution : {e}")

def main():
    """Fonction principale de test"""
    print("üîç D√âBUT DES TESTS D'√âVOLUTION - NIVEAU D'√âVOLUTION")
    print("=" * 60)
    
    try:
        # Tests de l'√©volution
        sphere1 = test_niveau_evolution_attribut()
        sphere2 = test_evoluer_spirituellement_methode()
        test_experience_evolution()
        test_limite_evolution()
        test_souvenirs_evolution()
        
        # Tests de r√©trocompatibilit√©
        test_retrocompatibilite_evolution()
        test_collection_avec_evolution()
        
        print("\n" + "=" * 60)
        print("‚úÖ TOUS LES TESTS D'√âVOLUTION PASS√âS AVEC SUCC√àS")
        print("‚úÖ La sixi√®me √©volution (niveau d'√©volution) fonctionne parfaitement")
        print("‚úÖ R√©trocompatibilit√© maintenue")
        print("‚úÖ Pr√™t pour la prochaine √©volution")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR G√âN√âRALE : {e}")
        print("‚ùå L'√©volution a un probl√®me √† corriger")
        return False

if __name__ == "__main__":
    main() 