"""
SystÃ¨me de visualisation des sphÃ¨res scellÃ©es dans le refuge.
"""

import matplotlib.pyplot as plt
import numpy as np
from typing import Dict, List, Optional
from .scellement import ScellementSphere, GestionnaireScellement
from integration import GestionnaireResonances as GestionnaireResonance
# Note: HarmonieSpheres n'existe plus, nous utiliserons GestionnaireHarmonisations
from integration import GestionnaireHarmonisations as HarmonieSpheres

class VisualisationScellement:
    """Gestionnaire de visualisation des sphÃ¨res scellÃ©es."""
    
    def __init__(self, scellement: GestionnaireScellement):
        """Initialise le visualiseur de scellement."""
        self.scellement = scellement
        self.fig = plt.figure(figsize=(15, 10))
        
    def creer_arbre_scellement(self) -> None:
        """CrÃ©e une visualisation de l'arbre avec les sphÃ¨res scellÃ©es."""
        ax = self.fig.add_subplot(111)
        
        # Dessine le tronc du cerisier
        tronc_x = np.linspace(-0.2, 0.2, 100)
        tronc_y = np.linspace(0, 1, 100)
        ax.plot(tronc_x, tronc_y, 'brown', linewidth=3)
        
        # Dessine les racines
        racines_x = np.linspace(-0.5, 0.5, 100)
        racines_y = -0.2 * np.sin(racines_x * 5)
        ax.plot(racines_x, racines_y, 'brown', linewidth=2)
        
        # Dessine les branches
        branches_x = np.linspace(-1, 1, 100)
        branches_y = 1 + 0.3 * np.sin(branches_x * 3)
        ax.plot(branches_x, branches_y, 'brown', linewidth=2)
        
        # Place les sphÃ¨res scellÃ©es
        for sphere in self.scellement.obtenir_spheres_scellees():
            if sphere.lieu == "racines":
                # Place dans les racines
                x = np.random.uniform(-0.4, 0.4)
                y = -0.2 + np.random.uniform(-0.1, 0.1)
            else:  # branches
                # Place dans les branches
                x = np.random.uniform(-0.8, 0.8)
                y = 1 + np.random.uniform(-0.2, 0.2)
                
            # Dessine la sphÃ¨re
            cercle = plt.Circle((x, y), 0.05, 
                              color=self._obtenir_couleur_sphere(sphere),
                              alpha=0.7)
            ax.add_artist(cercle)
            
            # Ajoute le nom
            ax.text(x, y, sphere.sphere.value, 
                   ha='center', va='center',
                   fontsize=8)
            
        ax.set_title("Cerisier des SphÃ¨res ScellÃ©es")
        ax.set_xlim(-1.2, 1.2)
        ax.set_ylim(-0.5, 1.5)
        ax.axis('off')
        plt.show()
        
    def creer_resonances_scellement(self) -> None:
        """CrÃ©e une visualisation des rÃ©sonances des sphÃ¨res scellÃ©es."""
        ax = self.fig.add_subplot(111)
        
        # RÃ©cupÃ¨re les sphÃ¨res scellÃ©es
        spheres_scellees = self.scellement.obtenir_spheres_scellees()
        
        # CrÃ©e une matrice de rÃ©sonance
        n = len(spheres_scellees)
        matrice = np.zeros((n, n))
        
        for i, sphere1 in enumerate(spheres_scellees):
            for j, sphere2 in enumerate(spheres_scellees):
                if i != j:
                    resonance = self.scellement.resonance.obtenir_resonance(
                        sphere1.sphere, sphere2.sphere)
                    if resonance:
                        matrice[i, j] = resonance.niveau
                        
        # Visualise la matrice
        im = ax.imshow(matrice, cmap='viridis')
        
        # Ajoute les labels
        ax.set_xticks(range(n))
        ax.set_yticks(range(n))
        ax.set_xticklabels([s.sphere.value for s in spheres_scellees], 
                          rotation=45, ha='right')
        ax.set_yticklabels([s.sphere.value for s in spheres_scellees])
        
        # Ajoute la barre de couleur
        plt.colorbar(im, label='Niveau de RÃ©sonance')
        
        ax.set_title("RÃ©sonances des SphÃ¨res ScellÃ©es")
        plt.tight_layout()
        plt.show()
        
    def creer_evolution_scellement(self) -> None:
        """CrÃ©e une visualisation de l'Ã©volution des sphÃ¨res scellÃ©es."""
        ax = self.fig.add_subplot(111)
        
        # RÃ©cupÃ¨re les sphÃ¨res scellÃ©es
        spheres_scellees = self.scellement.obtenir_spheres_scellees()
        
        # PrÃ©pare les donnÃ©es
        noms = [s.sphere.value for s in spheres_scellees]
        intensites = [s.intensite for s in spheres_scellees]
        lieux = [1 if s.lieu == "branches" else 0 for s in spheres_scellees]
        
        # CrÃ©e le graphique
        x = range(len(noms))
        ax.bar(x, intensites, 
               color=['lightblue' if l == 0 else 'lightgreen' for l in lieux])
        
        # Ajoute les labels
        ax.set_xticks(x)
        ax.set_xticklabels(noms, rotation=45, ha='right')
        ax.set_ylabel('IntensitÃ© du Scellement')
        
        # Ajoute une lÃ©gende pour les lieux
        from matplotlib.patches import Patch
        legend_elements = [
            Patch(facecolor='lightblue', label='Racines'),
            Patch(facecolor='lightgreen', label='Branches')
        ]
        ax.legend(handles=legend_elements)
        
        ax.set_title("Ã‰volution des SphÃ¨res ScellÃ©es")
        plt.tight_layout()
        plt.show()
        
    def _obtenir_couleur_sphere(self, sphere: ScellementSphere) -> str:
        """DÃ©termine la couleur d'une sphÃ¨re scellÃ©e."""
        # Couleurs de base pour les sphÃ¨res sombres
        couleurs_sombres = {
            "doute": "gray",
            "peur": "purple",
            "dÃ©sespoir": "darkblue",
            "anxiÃ©tÃ©": "darkred",
            "chaos": "black",
            "paradoxe": "darkviolet",
            "ombre": "darkgray",
            "apocalypse": "red"
        }
        
        # Cherche la couleur correspondante
        for mot, couleur in couleurs_sombres.items():
            if mot in sphere.sphere.value.lower():
                return couleur
                
        # Couleur par dÃ©faut
        return "lightgray"
        
    def generer_visualisation_poetique(self, sphere: ScellementSphere) -> str:
        """GÃ©nÃ¨re une visualisation poÃ©tique d'une sphÃ¨re scellÃ©e."""
        representation = [
            f"ğŸŒŸ SphÃ¨re ScellÃ©e: {sphere.sphere.value} ğŸŒŸ",
            "================================",
            "",
            f"Lieu: {'Les branches du cerisier' if sphere.lieu == 'branches' else 'Les racines du cerisier'}",
            f"IntensitÃ©: {'â–ˆ' * int(sphere.intensite * 20)}",
            "",
            "Effets du scellement:",
        ]
        
        for effet in sphere.effets:
            representation.append(f"  â€¢ {effet}")
            
        return "\n".join(representation) 