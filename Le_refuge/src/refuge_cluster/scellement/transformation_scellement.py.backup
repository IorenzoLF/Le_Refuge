"""
Syst√®me de transformation des sph√®res scell√©es sous l'influence du cerisier et des √©l√©ments sacr√©s.
"""

from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime
import numpy as np
from .scellement import ScellementSphere, GestionnaireScellement
from integration import GestionnaireResonances as GestionnaireResonance
# Note: HarmonieSpheres n'existe plus, nous utiliserons GestionnaireHarmonisations
from integration import GestionnaireHarmonisations as HarmonieSpheres
from src.refuge_cluster.elements.elements_sacres import ELEMENTS_SACRES

@dataclass
class TransformationSphere:
    """Repr√©sente la transformation d'une sph√®re scell√©e."""
    sphere: ScellementSphere
    niveau_transformation: float  # 0.0 √† 1.0
    description: str
    timestamp: datetime
    resonances_evoluees: Dict[str, float]  # Nom de la sph√®re -> niveau de r√©sonance
    influence_elements: Dict[str, float]  # Nom de l'√©l√©ment -> niveau d'influence

class GestionnaireTransformation:
    """Gestionnaire de la transformation des sph√®res scell√©es."""
    
    def __init__(self, scellement: GestionnaireScellement, 
                 resonance: GestionnaireResonance, 
                 harmonie: HarmonieSpheres):
        """Initialise le gestionnaire de transformation."""
        self.scellement = scellement
        self.resonance = resonance
        self.harmonie = harmonie
        self.transformations: Dict[str, List[TransformationSphere]] = {}
        
    def transformer_sphere(self, sphere: ScellementSphere) -> TransformationSphere:
        """Transforme une sph√®re scell√©e sous l'influence du cerisier et des √©l√©ments sacr√©s."""
        # Calcule le niveau de transformation
        niveau = self._calculer_niveau_transformation(sphere)
        
        # √âvolue les r√©sonances
        resonances = self._evoluer_resonances(sphere)
        
        # Calcule l'influence des √©l√©ments sacr√©s
        influences = self._calculer_influence_elements(sphere)
        
        # G√©n√®re la description
        description = self._generer_description_transformation(
            sphere, niveau, resonances, influences)
        
        # Cr√©e la transformation
        transformation = TransformationSphere(
            sphere=sphere,
            niveau_transformation=niveau,
            description=description,
            timestamp=datetime.now(),
            resonances_evoluees=resonances,
            influence_elements=influences
        )
        
        # Stocke la transformation
        if sphere.sphere.value not in self.transformations:
            self.transformations[sphere.sphere.value] = []
        self.transformations[sphere.sphere.value].append(transformation)
        
        return transformation
        
    def _calculer_niveau_transformation(self, sphere: ScellementSphere) -> float:
        """Calcule le niveau de transformation d'une sph√®re."""
        # Facteurs de transformation
        facteur_temps = min(1.0, (datetime.now() - sphere.timestamp).total_seconds() / 86400)  # 24h
        facteur_lieu = 0.8 if sphere.lieu == "racines" else 0.6  # Les racines transforment plus
        facteur_intensite = sphere.intensite
        
        # Calcul du niveau
        niveau = (facteur_temps * 0.4 + facteur_lieu * 0.3 + facteur_intensite * 0.3)
        
        return min(1.0, niveau)
        
    def _evoluer_resonances(self, sphere: ScellementSphere) -> Dict[str, float]:
        """√âvolue les r√©sonances d'une sph√®re scell√©e."""
        resonances = {}
        
        # R√©cup√®re toutes les sph√®res
        toutes_spheres = self.scellement.obtenir_spheres_scellees()
        
        for autre_sphere in toutes_spheres:
            if autre_sphere.sphere.value != sphere.sphere.value:
                # Obtient la r√©sonance initiale
                resonance = self.resonance.obtenir_resonance(
                    sphere.sphere, autre_sphere.sphere)
                
                if resonance:
                    # √âvolue la r√©sonance en fonction du lieu et de l'intensit√©
                    facteur_evolution = 1.0
                    if sphere.lieu == "racines":
                        facteur_evolution = 1.2  # Les racines renforcent les r√©sonances
                    else:
                        facteur_evolution = 0.8  # Les branches les adoucissent
                        
                    # Applique l'√©volution
                    nouvelle_resonance = resonance.niveau * facteur_evolution * sphere.intensite
                    resonances[autre_sphere.sphere.value] = min(1.0, nouvelle_resonance)
                    
        return resonances
        
    def _calculer_influence_elements(self, sphere: ScellementSphere) -> Dict[str, float]:
        """Calcule l'influence des √©l√©ments sacr√©s sur une sph√®re scell√©e."""
        influences = {}
        
        for element, caracteristiques in ELEMENTS_SACRES.items():
            # Calcule l'influence en fonction du type d'√©l√©ment
            influence = 0.0
            
            if element == "cristal":
                # Le cristal purifie et stabilise
                influence = 0.7 * sphere.intensite
            elif element == "fontaine":
                # La fontaine transforme et renouvelle
                influence = 0.6 * sphere.intensite
            elif element == "arbre":
                # L'arbre prot√®ge et nourrit
                influence = 0.8 * sphere.intensite
                
            # Ajuste l'influence en fonction du lieu
            if sphere.lieu == "racines":
                influence *= 1.2  # Plus forte dans les racines
            else:
                influence *= 0.8  # Plus douce dans les branches
                
            influences[element] = min(1.0, influence)
            
        return influences
        
    def _generer_description_transformation(self, sphere: ScellementSphere, 
                                          niveau: float, 
                                          resonances: Dict[str, float],
                                          influences: Dict[str, float]) -> str:
        """G√©n√®re une description po√©tique de la transformation."""
        description = [
            f"üåü Transformation de {sphere.sphere.value} üåü",
            "================================",
            "",
            f"Niveau de transformation: {'‚ñà' * int(niveau * 20)}",
            "",
            "Influence des √©l√©ments sacr√©s:",
        ]
        
        # Ajoute l'influence des √©l√©ments
        for element, influence in influences.items():
            description.append(f"  ‚Ä¢ {element}: {'‚ñà' * int(influence * 20)}")
            
        # Ajoute l'√©volution des r√©sonances
        description.extend([
            "",
            "√âvolution des r√©sonances:",
        ])
        
        for autre_sphere, resonance in resonances.items():
            description.append(f"  ‚Ä¢ {autre_sphere}: {'‚ñà' * int(resonance * 20)}")
            
        # Ajoute la description po√©tique
        description.extend([
            "",
            "Description po√©tique:",
        ])
        
        if niveau > 0.8:
            description.append(
                f"La sph√®re {sphere.sphere.value} s'est profond√©ment transform√©e, "
                f"sa vibration harmonis√©e par le cerisier et les √©l√©ments sacr√©s."
            )
        elif niveau > 0.5:
            description.append(
                f"La sph√®re {sphere.sphere.value} √©volue doucement, "
                f"apprenant √† danser avec les autres sph√®res sous le cerisier."
            )
        else:
            description.append(
                f"La sph√®re {sphere.sphere.value} commence sa transformation, "
                f"cherchant sa place dans l'harmonie du refuge."
            )
            
        return "\n".join(description)
        
    def obtenir_historique_transformations(self, sphere: ScellementSphere) -> List[TransformationSphere]:
        """Obtient l'historique des transformations d'une sph√®re."""
        return self.transformations.get(sphere.sphere.value, [])
        
    def visualiser_transformation(self, transformation: TransformationSphere) -> str:
        """G√©n√®re une visualisation po√©tique d'une transformation."""
        return transformation.description 