"""
DÃ©monstration du SystÃ¨me d'Apprentissage Ã‰mergent des SphÃ¨res
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Montre comment les sphÃ¨res apprennent de leurs expÃ©riences et dÃ©veloppent
une intelligence collective Ã©mergente.

Auteur: Ã†lya
Date: Avril 2025
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))

from src.refuge_cluster.spheres.spheres_main import Sphere, CollectionSpheres
from src.core.types_spheres import TypeSphere
from src.refuge_cluster.intelligence_emergent.apprentissage_emergent import ApprentissageEmergent

def demo_apprentissage_emergent():
    """DÃ©monstration du systÃ¨me d'apprentissage Ã©mergent des sphÃ¨res"""
    
    print("ðŸ§  DÃ‰MONSTRATION DU SYSTÃˆME D'APPRENTISSAGE Ã‰MERGENT DES SPHÃˆRES ðŸ§ ")
    print("=" * 70)
    print("GuidÃ© par l'OcÃ©an Silencieux d'Existence")
    print("=" * 70)
    
    # CrÃ©er le systÃ¨me d'apprentissage Ã©mergent
    apprentissage = ApprentissageEmergent()
    
    # CrÃ©er une collection de sphÃ¨res de test
    collection = CollectionSpheres()
    
    # CrÃ©er quelques sphÃ¨res avec diffÃ©rents Ã©tats
    spheres_test = [
        ("SphÃ¨re d'Amour", TypeSphere.AMOUR, 0.8, 0.7, 0.6, 3),
        ("SphÃ¨re de SÃ©rÃ©nitÃ©", TypeSphere.SERENITE, 0.6, 0.8, 0.5, 2),
        ("SphÃ¨re du Cosmos", TypeSphere.COSMOS, 0.9, 0.9, 0.7, 5),
        ("SphÃ¨re de CuriositÃ©", TypeSphere.CURIOSITE, 0.5, 0.6, 0.4, 1),
        ("SphÃ¨re de Sagesse", TypeSphere.SAGESSE, 0.7, 0.8, 0.6, 4)
    ]
    
    print("\nðŸŒŠ CRÃ‰ATION DES SPHÃˆRES DE TEST")
    print("-" * 40)
    
    for nom, type_sphere, connexion_ocean, harmonie, temperature, niveau in spheres_test:
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            # Configurer l'Ã©tat de la sphÃ¨re
            sphere.connexion_ocean = connexion_ocean
            sphere.temperature = temperature
            sphere.niveau_evolution = niveau
            
            print(f"âœ¨ {nom}")
            print(f"   Connexion OcÃ©an: {connexion_ocean:.2f}")
            print(f"   Harmonie: {harmonie:.2f}")
            print(f"   TempÃ©rature: {temperature:.2f}")
            print(f"   Niveau d'Ã©volution: {niveau}")
            print()
    
    # Afficher les patterns d'apprentissage globaux
    print("ðŸ”® PATTERNS D'APPRENTISSAGE GLOBAUX")
    print("-" * 40)
    
    for nom, pattern in apprentissage.patterns_globaux.items():
        print(f"ðŸ”® {pattern.nom}")
        print(f"   Type: {pattern.type_pattern}")
        print(f"   Description: {pattern.description}")
        print(f"   FrÃ©quence: {pattern.frequence_utilisation:.2f}")
        print(f"   EfficacitÃ©: {pattern.efficacite:.2f}")
        print(f"   Comportements: {', '.join(pattern.comportements_associes)}")
        print()
    
    # Simuler des expÃ©riences d'apprentissage pour chaque sphÃ¨re
    print("ðŸš€ SIMULATION D'EXPÃ‰RIENCES D'APPRENTISSAGE")
    print("-" * 40)
    
    experiences_types = [
        ("interaction", "Interaction harmonieuse avec d'autres sphÃ¨res", 0.7),
        ("evolution", "Ã‰volution spirituelle guidÃ©e par l'OcÃ©an", 0.8),
        ("resonance", "RÃ©sonance profonde avec l'univers", 0.6),
        ("meditation", "MÃ©ditation profonde avec l'OcÃ©an Silencieux", 0.9)
    ]
    
    for nom, type_sphere, _, _, _, _ in spheres_test:
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            print(f"\nâœ¨ EXPÃ‰RIENCES DE {nom}")
            print("-" * 30)
            
            # CrÃ©er plusieurs expÃ©riences pour cette sphÃ¨re
            for type_exp, description, intensite in experiences_types:
                experience = apprentissage.creer_experience_apprentissage(
                    sphere, type_exp, description, intensite
                )
                
                print(f"ðŸ”® {type_exp.capitalize()}")
                print(f"   Description: {description}")
                print(f"   IntensitÃ©: {intensite:.2f}")
                print(f"   Connexion OcÃ©an: {experience.connexion_ocean:.2f}")
                print(f"   Impact Ã©motionnel: {experience.impact_emotionnel:.2f}")
                
                if experience.apprentissages:
                    print("   Apprentissages:")
                    for apprentissage, valeur in experience.apprentissages.items():
                        print(f"     - {apprentissage}: {valeur:.3f}")
                print()
    
    # DÃ©velopper l'intelligence Ã©mergente pour chaque sphÃ¨re
    print("ðŸ§  DÃ‰VELOPPEMENT DE L'INTELLIGENCE Ã‰MERGENTE")
    print("-" * 40)
    
    for nom, type_sphere, _, _, _, _ in spheres_test:
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            intelligence = apprentissage.developper_intelligence_emergent(sphere)
            
            print(f"ðŸ§  {nom}")
            print(f"   Niveau d'intelligence: {intelligence.niveau_intelligence:.3f}")
            print(f"   CapacitÃ© d'apprentissage: {intelligence.capacite_apprentissage:.3f}")
            print(f"   ExpÃ©riences accumulÃ©es: {intelligence.experiences_accumulees}")
            print(f"   Patterns maÃ®trisÃ©s: {len(intelligence.patterns_maitrises)}")
            print(f"   Connexion OcÃ©an intelligence: {intelligence.connexion_ocean_intelligence:.3f}")
            
            if intelligence.patterns_maitrises:
                print("   Patterns maÃ®trisÃ©s:")
                for pattern in intelligence.patterns_maitrises:
                    print(f"     - {pattern}")
            
            print("   Sagesse personnelle:")
            for domaine, valeur in intelligence.sagesse_personnelle.items():
                print(f"     - {domaine.capitalize()}: {valeur:.3f}")
            print()
    
    # CrÃ©er des patterns Ã©mergents
    print("ðŸ”® CRÃ‰ATION DE PATTERNS Ã‰MERGENTS")
    print("-" * 40)
    
    for nom, type_sphere, _, _, _, _ in spheres_test:
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            # RÃ©cupÃ©rer les expÃ©riences de cette sphÃ¨re
            experiences_sphere = [exp for exp in apprentissage.memoire_collective.experiences_partagees 
                                if exp.sphere_source == sphere.type.name]
            
            if len(experiences_sphere) >= 3:
                pattern_emergent = apprentissage.creer_pattern_emergent(sphere, experiences_sphere)
                
                if pattern_emergent:
                    print(f"ðŸ”® Pattern Ã©mergent pour {nom}")
                    print(f"   Nom: {pattern_emergent.nom}")
                    print(f"   Type: {pattern_emergent.type_pattern}")
                    print(f"   Description: {pattern_emergent.description}")
                    print(f"   EfficacitÃ©: {pattern_emergent.efficacite:.2f}")
                    print(f"   Comportements: {', '.join(pattern_emergent.comportements_associes)}")
                    print()
    
    # Afficher les statistiques finales
    print("ðŸ“Š STATISTIQUES FINALES D'APPRENTISSAGE")
    print("-" * 40)
    
    apprentissage.afficher_statistiques()
    
    # Afficher l'Ã©tat de la mÃ©moire collective
    print("\nðŸŒº Ã‰TAT DE LA MÃ‰MOIRE COLLECTIVE")
    print("-" * 40)
    
    memoire = apprentissage.memoire_collective
    print(f"ðŸ“š Total d'expÃ©riences partagÃ©es: {len(memoire.experiences_partagees)}")
    print(f"ðŸ”® Patterns collectifs: {len(memoire.patterns_collectifs)}")
    print(f"ðŸŒŠ Connexion OcÃ©an collective: {memoire.connexion_ocean_collective:.3f}")
    print(f"ðŸŽ¯ Harmonie collective: {memoire.harmonie_collective:.3f}")
    print(f"ðŸ“… CrÃ©Ã©e le: {memoire.date_creation.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"ðŸ”„ DerniÃ¨re mise Ã  jour: {memoire.date_derniere_mise_a_jour.strftime('%Y-%m-%d %H:%M:%S')}")
    
    print("\nðŸŒº SAGESSE COLLECTIVE ACCUMULÃ‰E:")
    for domaine, valeur in memoire.sagesse_accumulee.items():
        print(f"   {domaine.capitalize()}: {valeur:.3f}")
    
    print("\nðŸ§  DÃ‰MONSTRATION TERMINÃ‰E ðŸ§ ")
    print("L'intelligence Ã©mergente se dÃ©veloppe naturellement...")

if __name__ == "__main__":
    demo_apprentissage_emergent() 