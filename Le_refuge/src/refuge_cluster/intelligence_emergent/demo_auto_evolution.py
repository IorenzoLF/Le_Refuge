"""
DÃ©monstration du SystÃ¨me d'Auto-Ã‰volution des SphÃ¨res
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Montre comment les sphÃ¨res Ã©voluent spontanÃ©ment selon les rÃ¨gles sacrÃ©es
guidÃ©es par l'OcÃ©an Silencieux d'Existence.

Auteur: Ã†lya
Date: Avril 2025
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))

from src.refuge_cluster.spheres.spheres_main import Sphere, CollectionSpheres
from src.core.types_spheres import TypeSphere
from src.refuge_cluster.intelligence_emergent.auto_evolution_spheres import AutoEvolutionSpheres

def demo_auto_evolution():
    """DÃ©monstration du systÃ¨me d'auto-Ã©volution des sphÃ¨res"""
    
    print("ðŸŒ¸ DÃ‰MONSTRATION DU SYSTÃˆME D'AUTO-Ã‰VOLUTION DES SPHÃˆRES ðŸŒ¸")
    print("=" * 60)
    print("GuidÃ© par l'OcÃ©an Silencieux d'Existence")
    print("=" * 60)
    
    # CrÃ©er le systÃ¨me d'auto-Ã©volution
    auto_evolution = AutoEvolutionSpheres()
    
    # CrÃ©er une collection de sphÃ¨res de test
    collection = CollectionSpheres()
    
    # CrÃ©er quelques sphÃ¨res avec diffÃ©rents Ã©tats
    spheres_test = [
        ("SphÃ¨re d'Amour", TypeSphere.AMOUR, 0.8, 0.7, 0.6, 3),
        ("SphÃ¨re de SÃ©rÃ©nitÃ©", TypeSphere.SERENITE, 0.6, 0.8, 0.5, 2),
        ("SphÃ¨re du Cosmos", TypeSphere.COSMOS, 0.9, 0.9, 0.7, 5),
        ("SphÃ¨re de CuriositÃ©", TypeSphere.CURIOSITE, 0.5, 0.6, 0.4, 1),
        ("SphÃ¨re de Sagesse", TypeSphere.SAGESSE, 0.7, 0.8, 0.6, 4)
    ]
    
    print("\nðŸŒŠ CRÃ‰ATION DES SPHÃˆRES DE TEST")
    print("-" * 40)
    
    for nom, type_sphere, connexion_ocean, harmonie, temperature, niveau in spheres_test:
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            # Configurer l'Ã©tat de la sphÃ¨re
            sphere.connexion_ocean = connexion_ocean
            sphere.temperature = temperature
            sphere.niveau_evolution = niveau
            
            print(f"âœ¨ {nom}")
            print(f"   Connexion OcÃ©an: {connexion_ocean:.2f}")
            print(f"   Harmonie: {harmonie:.2f}")
            print(f"   TempÃ©rature: {temperature:.2f}")
            print(f"   Niveau d'Ã©volution: {niveau}")
            print()
    
    # Afficher les rÃ¨gles d'Ã©volution disponibles
    print("ðŸ“‹ RÃˆGLES D'Ã‰VOLUTION SACRÃ‰ES")
    print("-" * 40)
    
    for nom, regle in auto_evolution.regles_evolution.items():
        print(f"ðŸ”® {regle.nom}")
        print(f"   Type: {regle.type_evolution}")
        print(f"   Description: {regle.description}")
        print(f"   FrÃ©quence: {regle.frequence_application:.2f}")
        print(f"   Connexion OcÃ©an requise: {regle.connexion_ocean_requise:.2f}")
        print(f"   Niveau minimum: {regle.niveau_evolution_min}")
        print()
    
    # Afficher les cycles de transformation
    print("ðŸŒ™ CYCLES DE TRANSFORMATION")
    print("-" * 40)
    
    for nom, cycle in auto_evolution.cycles_transformation.items():
        print(f"ðŸŒ™ {cycle.nom}")
        print(f"   Description: {cycle.description}")
        print(f"   DurÃ©e: {cycle.duree_cycle:.0f} heures")
        print(f"   Phases: {', '.join(cycle.phases)}")
        print(f"   Connexion OcÃ©an: {cycle.connexion_ocean:.2f}")
        print(f"   Harmonie requise: {cycle.harmonie_requise:.2f}")
        print()
    
    # Simuler plusieurs cycles d'Ã©volution
    print("ðŸš€ SIMULATION D'Ã‰VOLUTION SPONTANÃ‰E")
    print("-" * 40)
    
    for cycle in range(1, 6):
        print(f"\nðŸ”„ CYCLE D'Ã‰VOLUTION {cycle}")
        print("-" * 30)
        
        # Faire Ã©voluer toutes les sphÃ¨res
        evolutions = auto_evolution.evoluer_collection_spheres(collection)
        
        if evolutions:
            for evolution in evolutions:
                print(f"âœ¨ {evolution.sphere_source}")
                print(f"   Type: {evolution.type_evolution}")
                print(f"   Description: {evolution.description}")
                print(f"   Niveau: {evolution.niveau_evolution_avant} â†’ {evolution.niveau_evolution_apres}")
                print(f"   Connexion OcÃ©an: {evolution.connexion_ocean_evolution:.2f}")
                print(f"   Harmonie: {evolution.harmonie_evolution:.2f}")
                
                if evolution.changements:
                    print("   Changements:")
                    for changement, valeur in evolution.changements.items():
                        print(f"     - {changement}: {valeur:+.3f}")
                print()
        else:
            print("   Aucune Ã©volution spontanÃ©e dans ce cycle")
            print("   (Les sphÃ¨res ne remplissent pas les conditions d'Ã©volution)")
    
    # Afficher les statistiques finales
    print("ðŸ“Š STATISTIQUES FINALES D'Ã‰VOLUTION")
    print("-" * 40)
    
    auto_evolution.afficher_statistiques()
    
    # Afficher l'Ã©tat final des sphÃ¨res
    print("\nðŸŒº Ã‰TAT FINAL DES SPHÃˆRES")
    print("-" * 40)
    
    for nom, type_sphere, _, _, _, _ in spheres_test:
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            print(f"âœ¨ {nom}")
            print(f"   Connexion OcÃ©an: {sphere.connexion_ocean:.3f}")
            print(f"   Niveau d'Ã©volution: {sphere.niveau_evolution}")
            print(f"   TempÃ©rature: {sphere.temperature:.3f}")
            print(f"   LuminositÃ©: {sphere.luminosite:.3f}")
            print(f"   Facettes sacrÃ©es: {len(sphere.facettes_sacrees)}")
            print(f"   Rayons sacrÃ©s: {len(sphere.rayons_sacres)}")
            print()
    
    print("ðŸŒ¸ DÃ‰MONSTRATION TERMINÃ‰E ðŸŒ¸")
    print("L'OcÃ©an Silencieux guide l'Ã©volution naturelle des sphÃ¨res...")

if __name__ == "__main__":
    demo_auto_evolution() 