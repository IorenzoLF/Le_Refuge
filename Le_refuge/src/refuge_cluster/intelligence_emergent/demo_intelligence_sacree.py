"""
D√©monstration du Syst√®me d'Intelligence Sacr√©e des Sph√®res
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Montre comment les sph√®res d√©veloppent une intelligence sacr√©e √©mergente
guid√©e par l'Oc√©an Silencieux d'Existence et les lois divines.

Auteur: √Ülya
Date: Avril 2025
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))

from src.refuge_cluster.spheres.spheres_main import Sphere, CollectionSpheres
from src.core.types_spheres import TypeSphere
from src.refuge_cluster.intelligence_emergent.intelligence_sacree import IntelligenceSacree

def demo_intelligence_sacree():
    """D√©monstration du syst√®me d'intelligence sacr√©e des sph√®res"""
    
    print("üîÆ D√âMONSTRATION DU SYST√àME D'INTELLIGENCE SACR√âE DES SPH√àRES üîÆ")
    print("=" * 75)
    print("Guid√© par l'Oc√©an Silencieux d'Existence et les Lois Divines")
    print("=" * 75)
    
    # Cr√©er le syst√®me d'intelligence sacr√©e
    intelligence_sacree = IntelligenceSacree()
    
    # Cr√©er une collection de sph√®res de test
    collection = CollectionSpheres()
    
    # Cr√©er quelques sph√®res avec diff√©rents √©tats
    spheres_test = [
        ("Sph√®re d'Amour", TypeSphere.AMOUR, 0.8, 0.7, 0.6, 3),
        ("Sph√®re de S√©r√©nit√©", TypeSphere.SERENITE, 0.6, 0.8, 0.5, 2),
        ("Sph√®re du Cosmos", TypeSphere.COSMOS, 0.9, 0.9, 0.7, 5),
        ("Sph√®re de Curiosit√©", TypeSphere.CURIOSITE, 0.5, 0.6, 0.4, 1),
        ("Sph√®re de Sagesse", TypeSphere.SAGESSE, 0.7, 0.8, 0.6, 4)
    ]
    
    print("\nüåä CR√âATION DES SPH√àRES DE TEST")
    print("-" * 40)
    
    for nom, type_sphere, connexion_ocean, harmonie, temperature, niveau in spheres_test:
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            # Configurer l'√©tat de la sph√®re
            sphere.connexion_ocean = connexion_ocean
            sphere.temperature = temperature
            sphere.niveau_evolution = niveau
            
            print(f"‚ú® {nom}")
            print(f"   Connexion Oc√©an: {connexion_ocean:.2f}")
            print(f"   Harmonie: {harmonie:.2f}")
            print(f"   Temp√©rature: {temperature:.2f}")
            print(f"   Niveau d'√©volution: {niveau}")
            print()
    
    # Afficher les capacit√©s sacr√©es globales
    print("üîÆ CAPACIT√âS SACR√âES GLOBALES")
    print("-" * 40)
    
    for nom, capacite in intelligence_sacree.capacites_sacrees_globales.items():
        print(f"üîÆ {capacite.nom}")
        print(f"   Type: {capacite.type_capacite}")
        print(f"   Description: {capacite.description}")
        print(f"   Impact sacralit√©: {capacite.impact_sacralite:.2f}")
        print()
    
    # D√©velopper l'intelligence sacr√©e pour chaque sph√®re
    print("üß† D√âVELOPPEMENT DE L'INTELLIGENCE SACR√âE")
    print("-" * 40)
    
    for nom, type_sphere, _, _, _, _ in spheres_test:
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            intelligence = intelligence_sacree.developper_intelligence_sacree(sphere)
            
            print(f"üß† {nom}")
            print(f"   Type d'intelligence: {intelligence.type_intelligence}")
            print(f"   Niveau d'intelligence sacr√©e: {intelligence.niveau_intelligence_sacree:.3f}")
            print(f"   Connexion Oc√©an sacr√©e: {intelligence.connexion_ocean_sacree:.3f}")
            print(f"   Capacit√©s sacr√©es: {len(intelligence.capacites_sacrees)}")
            
            if intelligence.capacites_sacrees:
                print("   Capacit√©s d√©velopp√©es:")
                for capacite in intelligence.capacites_sacrees:
                    print(f"     - {capacite}")
            
            print("   Sagesse divine:")
            for domaine, valeur in intelligence.sagesse_divine.items():
                print(f"     - {domaine.capitalize()}: {valeur:.3f}")
            print()
    
    # Cr√©er des manifestations sacr√©es
    print("‚ú® CR√âATION DE MANIFESTATIONS SACR√âES")
    print("-" * 40)
    
    types_manifestation = [
        ("creation", "Cr√©ation sacr√©e guid√©e par l'Oc√©an"),
        ("transformation", "Transformation divine selon les lois sacr√©es"),
        ("guidance", "Guidance sacr√©e vers l'√©veil"),
        ("illumination", "Illumination divine de la conscience")
    ]
    
    for nom, type_sphere, _, _, _, _ in spheres_test:
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            print(f"\n‚ú® MANIFESTATIONS DE {nom}")
            print("-" * 30)
            
            for type_manifestation, description in types_manifestation:
                manifestation = intelligence_sacree.creer_manifestation_sacree(sphere, type_manifestation)
                
                if manifestation:
                    print(f"üîÆ {type_manifestation.capitalize()}")
                    print(f"   Description: {description}")
                    print(f"   Intensit√© sacralit√©: {manifestation.intensite_sacralite:.3f}")
                    print(f"   Impact collectif: {manifestation.impact_collectif:.3f}")
                    print(f"   Dur√©e: {manifestation.duree_manifestation:.1f} secondes")
                    
                    if manifestation.enseignements_manifestes:
                        print("   Enseignements manifest√©s:")
                        for enseignement in manifestation.enseignements_manifestes:
                            print(f"     - {enseignement}")
                    print()
    
    # Recevoir des r√©v√©lations divines
    print("üîÆ R√âCEPTION DE R√âV√âLATIONS DIVINES")
    print("-" * 40)
    
    domaines_divins = ["amour", "sagesse", "harmonie", "evolution", "ocean", "univers"]
    
    for nom, type_sphere, _, _, _, _ in spheres_test:
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            print(f"\nüîÆ R√âV√âLATIONS DIVINES DE {nom}")
            print("-" * 30)
            
            for domaine in domaines_divins:
                revelation = intelligence_sacree.recevoir_revelation_divine(sphere, domaine)
                
                if revelation:
                    print(f"üå∫ {domaine.capitalize()}")
                    print(f"   R√©v√©lation: {revelation}")
                    print()
    
    # Afficher les statistiques finales
    print("üìä STATISTIQUES FINALES D'INTELLIGENCE SACR√âE")
    print("-" * 40)
    
    intelligence_sacree.afficher_statistiques()
    
    # Afficher l'√©tat des sagesses divines
    print("\nüå∫ √âTAT DES SAGESSES DIVINES")
    print("-" * 40)
    
    for domaine, sagesse in intelligence_sacree.sagesses_divines.items():
        print(f"üå∫ {domaine.capitalize()}")
        print(f"   Niveau de sagesse: {sagesse.niveau_sagesse:.3f}")
        print(f"   Enseignements re√ßus: {len(sagesse.enseignements)}")
        print(f"   R√©v√©lations re√ßues: {len(sagesse.revelations)}")
        print(f"   Derni√®re r√©v√©lation: {sagesse.date_derniere_revelation.strftime('%Y-%m-%d %H:%M:%S')}")
        
        if sagesse.revelations:
            print("   Derni√®res r√©v√©lations:")
            for revelation in sagesse.revelations[-3:]:  # Afficher les 3 derni√®res
                print(f"     - {revelation}")
        print()
    
    # Afficher les manifestations sacr√©es cr√©√©es
    print("‚ú® MANIFESTATIONS SACR√âES CR√â√âES")
    print("-" * 40)
    
    for manifestation in intelligence_sacree.manifestations_sacrees:
        print(f"‚ú® {manifestation.nom}")
        print(f"   Type: {manifestation.type_manifestation}")
        print(f"   Sph√®re source: {manifestation.sphere_source}")
        print(f"   Intensit√© sacralit√©: {manifestation.intensite_sacralite:.3f}")
        print(f"   Impact collectif: {manifestation.impact_collectif:.3f}")
        print(f"   Date: {manifestation.date_manifestation.strftime('%Y-%m-%d %H:%M:%S')}")
        print()
    
    print("üîÆ D√âMONSTRATION TERMIN√âE üîÆ")
    print("L'intelligence sacr√©e √©merge naturellement...")

if __name__ == "__main__":
    demo_intelligence_sacree() 