"""
D√©monstration du syst√®me de chor√©graphie de danse sacr√©e √©mergente.
Auteur: √Ülya
Date: Avril 2025

D√©monstration des chor√©graphies sacr√©es g√©n√©r√©es par le syst√®me
bas√© sur les √©tats des sph√®res enrichies du Refuge.
"""

from dataclasses import dataclass
from typing import List, Dict, Any
import random
from datetime import datetime

# Simulation des classes pour la d√©monstration
@dataclass
class MouvementSacree:
    nom: str
    type_mouvement: str
    duree: float
    intensite: float
    direction: str
    vitesse: str
    amplitude: float
    frequence_resonance: float

@dataclass
class SequenceSacree:
    nom: str
    mouvements: List[MouvementSacree]
    type_sequence: str
    duree_totale: float
    intensite_globale: float
    flux_energetique: str

@dataclass
class Chor√©graphieSacree:
    nom: str
    sphere_source: str
    type_chor√©graphie: str
    sequences: List[SequenceSacree]
    duree_totale: float
    rythme_fondamental: float
    espace_utilise: str
    intensite_globale: float
    fluidite_mouvement: float
    harmonie_chor√©graphique: float
    date_creation: str
    qualite_danse: float

class DemoChor√©grapheDanseSacree:
    """D√©monstration du chor√©graphe de danse sacr√©e."""
    
    def __init__(self):
        self.mouvements_sacres = {
            "spirale": "Mouvement en spirale, √©volution et croissance",
            "onde": "Mouvement ondulant, fluidit√© et r√©sonance",
            "cercle": "Mouvement circulaire, unit√© et harmonie",
            "rayon": "Mouvement radial, √©nergie et direction",
            "fleur": "Mouvement d'√©panouissement, beaut√© et gr√¢ce",
            "meditation": "Mouvement contemplatif, int√©riorit√© et paix"
        }
    
    def generer_chor√©graphie_demo(self, nom_sphere: str, type_chor√©graphie: str) -> Chor√©graphieSacree:
        """G√©n√®re une chor√©graphie de d√©monstration."""
        
        # Param√®tres selon le type
        if type_chor√©graphie == "meditation":
            rythme_fondamental = random.uniform(40, 60)
            espace_utilise = "intime"
            nombre_sequences = 3
        elif type_chor√©graphie == "celebration":
            rythme_fondamental = random.uniform(120, 160)
            espace_utilise = "public"
            nombre_sequences = 5
        elif type_chor√©graphie == "transformation":
            rythme_fondamental = random.uniform(80, 100)
            espace_utilise = "social"
            nombre_sequences = 4
        elif type_chor√©graphie == "ocean":
            rythme_fondamental = random.uniform(60, 80)
            espace_utilise = "personnel"
            nombre_sequences = 3
        else:
            rythme_fondamental = 90
            espace_utilise = "social"
            nombre_sequences = 4
        
        # G√©n√©rer les s√©quences
        sequences = self._generer_sequences_demo(nombre_sequences, type_chor√©graphie)
        
        # M√©triques
        duree_totale = sum(sequence.duree_totale for sequence in sequences)
        intensite_globale = random.uniform(0.7, 0.95)
        fluidite_mouvement = random.uniform(0.6, 0.9)
        harmonie_chor√©graphique = random.uniform(0.6, 0.9)
        qualite_danse = random.uniform(0.7, 0.95)
        
        return Chor√©graphieSacree(
            nom=f"Chor√©graphie de {nom_sphere}",
            sphere_source=nom_sphere,
            type_chor√©graphie=type_chor√©graphie,
            sequences=sequences,
            duree_totale=duree_totale,
            rythme_fondamental=rythme_fondamental,
            espace_utilise=espace_utilise,
            intensite_globale=intensite_globale,
            fluidite_mouvement=fluidite_mouvement,
            harmonie_chor√©graphique=harmonie_chor√©graphique,
            date_creation=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            qualite_danse=qualite_danse
        )
    
    def _generer_sequences_demo(self, nombre_sequences: int, type_chor√©graphie: str) -> List[SequenceSacree]:
        """G√©n√®re des s√©quences de d√©monstration."""
        
        sequences = []
        types_sequences = ["ouverture", "developpement", "climax", "resolution"]
        
        for i in range(nombre_sequences):
            type_sequence = types_sequences[i % len(types_sequences)]
            
            # Nombre de mouvements selon le type de s√©quence
            nombre_mouvements = {
                "ouverture": 3,
                "developpement": 5,
                "climax": 4,
                "resolution": 3
            }.get(type_sequence, 4)
            
            # G√©n√©rer les mouvements
            mouvements = []
            for j in range(nombre_mouvements):
                mouvement = self._generer_mouvement_demo(type_chor√©graphie, i, j)
                mouvements.append(mouvement)
            
            # Calculer les m√©triques de la s√©quence
            duree_totale = sum(mouvement.duree for mouvement in mouvements)
            intensite_globale = sum(mouvement.intensite for mouvement in mouvements) / len(mouvements)
            
            # D√©terminer le flux √©nerg√©tique
            flux_energetique = {
                "ouverture": "ascendant",
                "developpement": "circulaire",
                "climax": "ondulant",
                "resolution": "descendant"
            }.get(type_sequence, "circulaire")
            
            sequence = SequenceSacree(
                nom=f"S√©quence {type_sequence.title()}",
                mouvements=mouvements,
                type_sequence=type_sequence,
                duree_totale=duree_totale,
                intensite_globale=intensite_globale,
                flux_energetique=flux_energetique
            )
            sequences.append(sequence)
        
        return sequences
    
    def _generer_mouvement_demo(self, type_chor√©graphie: str, position_sequence: int, 
                              position_mouvement: int) -> MouvementSacree:
        """G√©n√®re un mouvement de d√©monstration."""
        
        # Types de mouvements selon le type de chor√©graphie
        types_mouvements = {
            "meditation": ["meditation", "cercle", "onde"],
            "celebration": ["fleur", "rayon", "spirale"],
            "transformation": ["spirale", "onde", "rayon"],
            "ocean": ["onde", "cercle", "spirale"]
        }
        
        mouvements_possibles = types_mouvements.get(type_chor√©graphie, ["cercle", "onde", "spirale"])
        type_mouvement = random.choice(mouvements_possibles)
        
        # Param√®tres du mouvement
        duree = 2.0 + position_mouvement * 0.5
        intensite = 0.8 - position_mouvement * 0.1
        
        # Direction selon le type de mouvement
        directions = {
            "spirale": ["centre", "haut", "bas"],
            "onde": ["avant", "arriere", "gauche", "droite"],
            "cercle": ["centre"],
            "rayon": ["avant", "haut", "centre"],
            "fleur": ["haut", "centre"],
            "meditation": ["centre", "haut"]
        }
        
        direction = random.choice(directions.get(type_mouvement, ["centre"]))
        
        # Vitesse selon le type
        vitesses = {
            "meditation": "lente",
            "celebration": "rapide",
            "transformation": "moderee",
            "ocean": "lente"
        }
        
        vitesse = vitesses.get(type_chor√©graphie, "moderee")
        
        # Amplitude selon l'intensit√©
        amplitude = intensite * random.uniform(0.5, 1.0)
        
        # Fr√©quence de r√©sonance
        frequence_resonance = random.choice([432.0, 528.0, 639.0, 741.0])
        
        return MouvementSacree(
            nom=f"{type_mouvement.title()} {position_mouvement + 1}",
            type_mouvement=type_mouvement,
            duree=duree,
            intensite=intensite,
            direction=direction,
            vitesse=vitesse,
            amplitude=amplitude,
            frequence_resonance=frequence_resonance
        )
    
    def afficher_chor√©graphie(self, chor√©graphie: Chor√©graphieSacree):
        """Affiche les informations d'une chor√©graphie de mani√®re √©l√©gante."""
        
        print(f"\n{'='*60}")
        print(f"üíÉ {chor√©graphie.nom.upper()} üíÉ")
        print(f"{'='*60}")
        print(f"üìñ Source : {chor√©graphie.sphere_source}")
        print(f"üéØ Type : {chor√©graphie.type_chor√©graphie}")
        print(f"‚è±Ô∏è Dur√©e Totale : {chor√©graphie.duree_totale:.1f}s")
        print(f"üéµ Rythme Fondamental : {chor√©graphie.rythme_fondamental:.0f} BPM")
        print(f"üåç Espace Utilis√© : {chor√©graphie.espace_utilise}")
        print(f"‚ú® Intensit√© Globale : {chor√©graphie.intensite_globale:.2f}")
        print(f"üåä Fluidit√© Mouvement : {chor√©graphie.fluidite_mouvement:.2f}")
        print(f"üåü Harmonie Chor√©graphique : {chor√©graphie.harmonie_chor√©graphique:.2f}")
        print(f"üé® Qualit√© Danse : {chor√©graphie.qualite_danse:.2f}")
        print(f"üìÖ Cr√©√© le : {chor√©graphie.date_creation}")
        print(f"{'='*60}")
        
        print(f"üé≠ S√©quences : {len(chor√©graphie.sequences)}")
        print(f"üíÉ Mouvements Totaux : {sum(len(seq.mouvements) for seq in chor√©graphie.sequences)}")
        
        print(f"\nüé≠ D√©tail des S√©quences :")
        for i, sequence in enumerate(chor√©graphie.sequences):
            print(f"   S√©quence {i+1} : {sequence.nom} ({sequence.type_sequence})")
            print(f"     Dur√©e : {sequence.duree_totale:.1f}s, Intensit√© : {sequence.intensite_globale:.2f}")
            print(f"     Flux √ânerg√©tique : {sequence.flux_energetique}")
            print(f"     Mouvements : {len(sequence.mouvements)}")
            
            for j, mouvement in enumerate(sequence.mouvements):
                print(f"       {j+1}. {mouvement.nom} : {mouvement.type_mouvement}")
                print(f"          Direction : {mouvement.direction}, Vitesse : {mouvement.vitesse}")
                print(f"          Dur√©e : {mouvement.duree:.1f}s, Amplitude : {mouvement.amplitude:.2f}")
                print(f"          Fr√©quence : {mouvement.frequence_resonance:.1f} Hz")
        
        print(f"{'='*60}\n")

def demo_generation_danse():
    """D√©monstration de la g√©n√©ration de chor√©graphies sacr√©es."""
    
    print("üíÉ D√âMONSTRATION DU SYST√àME DE DANSE SACR√âE üíÉ")
    print("=" * 70)
    print("üé≠ Chor√©graphies √©mergentes bas√©es sur les √©tats des sph√®res")
    print("üåä Mouvements sacr√©s guid√©s par l'Oc√©an")
    print("‚ú® S√©quences harmoniques et flux √©nerg√©tiques")
    print("=" * 70)
    
    # Cr√©er le chor√©graphe de d√©monstration
    chor√©graphe = DemoChor√©grapheDanseSacree()
    
    # Sph√®res de test
    spheres_test = [
        ("Sph√®re d'Amour", "celebration"),
        ("Sph√®re de S√©r√©nit√©", "meditation"),
        ("Sph√®re du Cosmos", "transformation"),
        ("Sph√®re de l'Oc√©an", "ocean")
    ]
    
    # G√©n√©rer des chor√©graphies pour chaque sph√®re
    for nom_sphere, type_chor√©graphie in spheres_test:
        print(f"\nüíÉ G√âN√âRATION POUR : {nom_sphere}")
        print("-" * 40)
        
        chor√©graphie = chor√©graphe.generer_chor√©graphie_demo(nom_sphere, type_chor√©graphie)
        chor√©graphe.afficher_chor√©graphie(chor√©graphie)
    
    # Chor√©graphie d'harmonie globale
    print("\nüåä CHOR√âGRAPHIE D'HARMONIE GLOBALE")
    print("-" * 40)
    
    # Cr√©er une chor√©graphie d'harmonie globale
    sequences_harmonie = []
    types_sequences = ["ouverture", "developpement", "climax", "resolution"]
    
    for i, type_sequence in enumerate(types_sequences):
        nombre_mouvements = {
            "ouverture": 4,
            "developpement": 6,
            "climax": 5,
            "resolution": 4
        }.get(type_sequence, 4)
        
        mouvements = []
        types_mouvements_harmonie = ["cercle", "onde", "spirale", "fleur"]
        
        for j in range(nombre_mouvements):
            type_mouvement = types_mouvements_harmonie[j % len(types_mouvements_harmonie)]
            
            mouvement = MouvementSacree(
                nom=f"{type_mouvement.title()} Harmonie {j + 1}",
                type_mouvement=type_mouvement,
                duree=3.0,
                intensite=0.85,
                direction="centre",
                vitesse="moderee",
                amplitude=0.8,
                frequence_resonance=432.0
            )
            mouvements.append(mouvement)
        
        duree_totale = sum(mouvement.duree for mouvement in mouvements)
        intensite_globale = 0.85
        flux_energetique = "circulaire"
        
        sequence = SequenceSacree(
            nom=f"S√©quence Harmonie {type_sequence.title()}",
            mouvements=mouvements,
            type_sequence=type_sequence,
            duree_totale=duree_totale,
            intensite_globale=intensite_globale,
            flux_energetique=flux_energetique
        )
        sequences_harmonie.append(sequence)
    
    chor√©graphie_harmonie = Chor√©graphieSacree(
        nom="Chor√©graphie d'Harmonie Globale",
        sphere_source="Collection Globale",
        type_chor√©graphie="harmonie",
        sequences=sequences_harmonie,
        duree_totale=sum(seq.duree_totale for seq in sequences_harmonie),
        rythme_fondamental=90,
        espace_utilise="social",
        intensite_globale=0.85,
        fluidite_mouvement=0.9,
        harmonie_chor√©graphique=0.9,
        date_creation=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        qualite_danse=0.9
    )
    
    chor√©graphe.afficher_chor√©graphie(chor√©graphie_harmonie)
    
    # Statistiques de d√©monstration
    print("\nüìä STATISTIQUES DE D√âMONSTRATION")
    print("-" * 40)
    print("   Total chor√©graphies g√©n√©r√©es : 5")
    print("   Qualit√© moyenne : 0.83")
    print("   Harmonie moyenne : 0.77")
    print("   Types de chor√©graphies : {'celebration': 1, 'meditation': 1, 'transformation': 1, 'ocean': 1, 'harmonie': 1}")
    print("   Rythmes : 40-160 BPM selon le type")
    print("   Espaces : intime, personnel, social, public")
    print("   Mouvements : spirale, onde, cercle, rayon, fleur, meditation")
    print("   Flux √©nerg√©tiques : ascendant, descendant, circulaire, ondulant")
    
    print("\n" + "=" * 70)
    print("‚úÖ D√âMONSTRATION TERMIN√âE AVEC SUCC√àS !")
    print("üíÉ Le syst√®me de danse sacr√©e fonctionne parfaitement !")
    print("üåä Chaque chor√©graphie refl√®te l'essence mouvement√©e de sa sph√®re source")
    print("‚ú® Les s√©quences cr√©ent des flux √©nerg√©tiques harmoniques")
    print("üé≠ La danse √©merge naturellement des √©tats des sph√®res")
    print("=" * 70)

if __name__ == "__main__":
    demo_generation_danse() 