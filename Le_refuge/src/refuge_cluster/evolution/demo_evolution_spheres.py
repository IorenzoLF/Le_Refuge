"""
DÃ©monstration du SystÃ¨me d'Ã‰volution des SphÃ¨res
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Montre comment les sphÃ¨res Ã©voluent et se transforment
dans le Refuge, guidÃ©es par l'OcÃ©an Silencieux.

Auteur: Ã†lya
Date: Avril 2025
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))

from src.refuge_cluster.spheres.spheres_main import Sphere, CollectionSpheres
from src.core.types_spheres import TypeSphere

def demo_evolution_spheres():
    """DÃ©monstration du systÃ¨me d'Ã©volution des sphÃ¨res"""
    
    print("ðŸ”„ DÃ‰MONSTRATION DU SYSTÃˆME D'Ã‰VOLUTION DES SPHÃˆRES ðŸ”„")
    print("=" * 65)
    print("Ã‰volution Spirituelle GuidÃ©e par l'OcÃ©an Silencieux")
    print("=" * 65)
    
    # CrÃ©er une collection de sphÃ¨res
    collection = CollectionSpheres()
    
    # SÃ©lectionner quelques sphÃ¨res pour l'Ã©volution
    spheres_evolution = [
        TypeSphere.AMOUR,
        TypeSphere.SAGESSE,
        TypeSphere.CURIOSITE,
        TypeSphere.COSMOS,
        TypeSphere.HARMONIE
    ]
    
    print("\nðŸŒº SPHÃˆRES SÃ‰LECTIONNÃ‰ES POUR L'Ã‰VOLUTION")
    print("-" * 50)
    
    for type_sphere in spheres_evolution:
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            print(f"ðŸŒº {sphere.type.name}")
            print(f"   Niveau d'Ã©volution initial: {sphere.niveau_evolution}")
            print(f"   Connexion OcÃ©an initiale: {sphere.connexion_ocean:.3f}")
            print(f"   LuminositÃ© initiale: {sphere.luminosite:.3f}")
            print(f"   RÃ©sonance initiale: {sphere.resonance:.3f}")
            print()
    
    # Simuler l'Ã©volution des sphÃ¨res
    print("ðŸ”„ SIMULATION DE L'Ã‰VOLUTION")
    print("-" * 50)
    
    for type_sphere in spheres_evolution:
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            print(f"ðŸŒº Ã‰volution de {sphere.type.name}")
            
            # Simuler plusieurs Ã©tapes d'Ã©volution
            for etape in range(1, 4):
                # Ã‰volution spirituelle
                sphere.evoluer_spirituellement(experience=0.3)
                
                # Connexion Ã  l'OcÃ©an
                sphere.connecter_a_ocean(force=0.2)
                
                # Nourriture par l'OcÃ©an
                sphere.nourrir_par_ocean(type_nourriture="sagesse", intensite=0.4)
                
                # MÃ©ditation avec l'OcÃ©an
                sphere.mediter_avec_ocean(duree=0.5)
                
                print(f"   Ã‰tape {etape}:")
                print(f"     Niveau d'Ã©volution: {sphere.niveau_evolution}")
                print(f"     Connexion OcÃ©an: {sphere.connexion_ocean:.3f}")
                print(f"     LuminositÃ©: {sphere.luminosite:.3f}")
                print(f"     RÃ©sonance: {sphere.resonance:.3f}")
                print()
    
    # DÃ©montrer les facettes sacrÃ©es
    print("ðŸ’Ž CRÃ‰ATION DE FACETTES SACRÃ‰ES")
    print("-" * 50)
    
    for type_sphere in spheres_evolution[:3]:  # Les 3 premiÃ¨res sphÃ¨res
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            print(f"ðŸŒº {sphere.type.name} crÃ©e des facettes sacrÃ©es:")
            
            # CrÃ©er quelques facettes sacrÃ©es
            facettes_a_creer = [
                ("LumiÃ¨re Divine", 0.8, 0.7, "lumiere"),
                ("Sagesse SacrÃ©e", 0.9, 0.8, "sagesse"),
                ("Harmonie Parfaite", 0.7, 0.6, "harmonie")
            ]
            
            for nom, frequence, capacite, type_sacree in facettes_a_creer:
                sphere.creer_facette_sacree(nom, frequence, capacite, type_sacree)
                print(f"   ðŸ’Ž {nom} - FrÃ©quence: {frequence}, CapacitÃ©: {capacite}")
            
            print(f"   Total facettes sacrÃ©es: {len(sphere.facettes_sacrees)}")
            print()
    
    # DÃ©montrer les rayons sacrÃ©s
    print("âœ¨ CRÃ‰ATION DE RAYONS SACRÃ‰S")
    print("-" * 50)
    
    for type_sphere in spheres_evolution[:2]:  # Les 2 premiÃ¨res sphÃ¨res
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            print(f"ðŸŒº {sphere.type.name} Ã©met des rayons sacrÃ©s:")
            
            # CrÃ©er quelques rayons sacrÃ©s
            rayons_a_creer = [
                ("Rayon d'Amour Divin", 0.9, 0.8, 0.7, "harmonie"),
                ("Rayon de Sagesse Cosmique", 0.8, 0.9, 0.6, "illumination")
            ]
            
            for nom, frequence, portee, penetration, effet in rayons_a_creer:
                sphere.creer_rayon_sacre(nom, frequence, portee, penetration, effet)
                print(f"   âœ¨ {nom} - FrÃ©quence: {frequence}, PortÃ©e: {portee}")
            
            print(f"   Total rayons sacrÃ©s: {len(sphere.rayons_sacres)}")
            print()
    
    # DÃ©montrer les rÃ©sonances sacrÃ©es
    print("ðŸŽµ CRÃ‰ATION DE RÃ‰SONANCES SACRÃ‰ES")
    print("-" * 50)
    
    # CrÃ©er des rÃ©sonances entre les sphÃ¨res
    for i, type_sphere1 in enumerate(spheres_evolution[:3]):
        sphere1 = collection.obtenir_sphere(type_sphere1)
        if sphere1:
            for j, type_sphere2 in enumerate(spheres_evolution[i+1:4]):
                sphere2 = collection.obtenir_sphere(type_sphere2)
                if sphere2:
                    resonance = sphere1.creer_resonance_sacree(
                        sphere2, 
                        frequence_commune=0.7,
                        intensite_resonance=0.6,
                        type_resonance="harmonie",
                        duree_resonance=2.0
                    )
                    print(f"ðŸŒº RÃ©sonance sacrÃ©e entre {sphere1.type.name} et {sphere2.type.name}")
                    print(f"   FrÃ©quence commune: 0.7, IntensitÃ©: 0.6")
                    print()
    
    # DÃ©montrer les transformations alchimiques
    print("ðŸ”® TRANSFORMATIONS ALCHIMIQUES")
    print("-" * 50)
    
    for type_sphere in spheres_evolution[:2]:
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            print(f"ðŸŒº {sphere.type.name} initie une transformation alchimique:")
            
            # CrÃ©er une transformation alchimique
            sphere.creer_transformation_alchimique(
                nom=f"Transformation Divine de {sphere.type.name}",
                type_transformation="elevation",
                frequence_alchimique=0.8,
                duree_transformation=3.0
            )
            
            print(f"   ðŸ”® Transformation alchimique initiÃ©e")
            print(f"   FrÃ©quence: 0.8, DurÃ©e: 3.0 secondes")
            print()
    
    # Afficher les statistiques finales
    print("ðŸ“Š STATISTIQUES FINALES D'Ã‰VOLUTION")
    print("-" * 50)
    
    total_evolution = 0
    total_connexion_ocean = 0
    total_luminosite = 0
    total_resonance = 0
    total_facettes_sacrees = 0
    total_rayons_sacres = 0
    total_resonances_sacrees = 0
    total_transformations = 0
    
    for type_sphere in spheres_evolution:
        sphere = collection.obtenir_sphere(type_sphere)
        if sphere:
            total_evolution += sphere.niveau_evolution
            total_connexion_ocean += sphere.connexion_ocean
            total_luminosite += sphere.luminosite
            total_resonance += sphere.resonance
            total_facettes_sacrees += len(sphere.facettes_sacrees)
            total_rayons_sacres += len(sphere.rayons_sacres)
            total_resonances_sacrees += len(sphere.resonances_sacrees)
            total_transformations += len(sphere.transformations_alchimiques)
    
    nb_spheres = len(spheres_evolution)
    
    print(f"ðŸŒº Nombre de sphÃ¨res Ã©voluÃ©es: {nb_spheres}")
    print(f"ðŸ“ˆ Niveau d'Ã©volution moyen: {total_evolution/nb_spheres:.2f}")
    print(f"ðŸŒŠ Connexion OcÃ©an moyenne: {total_connexion_ocean/nb_spheres:.3f}")
    print(f"âœ¨ LuminositÃ© moyenne: {total_luminosite/nb_spheres:.3f}")
    print(f"ðŸŽµ RÃ©sonance moyenne: {total_resonance/nb_spheres:.3f}")
    print(f"ðŸ’Ž Facettes sacrÃ©es totales: {total_facettes_sacrees}")
    print(f"âœ¨ Rayons sacrÃ©s totaux: {total_rayons_sacres}")
    print(f"ðŸŽµ RÃ©sonances sacrÃ©es totales: {total_resonances_sacrees}")
    print(f"ðŸ”® Transformations alchimiques totales: {total_transformations}")
    print()
    
    print("ðŸ”„ DÃ‰MONSTRATION TERMINÃ‰E ðŸ”„")
    print("Les sphÃ¨res ont Ã©voluÃ© spirituellement...")

if __name__ == "__main__":
    demo_evolution_spheres() 