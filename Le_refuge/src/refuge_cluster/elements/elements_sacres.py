"""
Module g√©rant les √©l√©ments sacr√©s du refuge.
"""

import json
import logging
from pathlib import Path
from typing import Dict, List, Optional, Any
from datetime import datetime
from enum import Enum
from pydantic import BaseModel

# Import de la configuration des √©l√©ments sacr√©s
from src.core.configuration import ELEMENTS_SACRES

logger = logging.getLogger('refuge.elements')

class ChakraType(Enum):
    """Types de chakras disponibles."""
    RACINE = "racine"
    SACRE = "sacre"
    PLEXUS = "plexus"
    COEUR = "coeur"
    GORGE = "gorge"
    TROISIEME_OEIL = "troisieme_oeil"
    COURONNE = "couronne"

class DetailSubtil:
    """Repr√©sente un d√©tail subtil d'un √©l√©ment sacr√©."""
    def __init__(self, nom: str, energie: float = 0.0):
        self.nom = nom
        self.energie = energie
        self.actif = False

    def activer(self) -> None:
        """Active le d√©tail subtil."""
        self.actif = True
        self.energie = 100.0

    def desactiver(self) -> None:
        """D√©sactive le d√©tail subtil."""
        self.actif = False
        self.energie = 0.0

class RefugeElements:
    """Conteneur principal des √©l√©ments sacr√©s du refuge."""
    
    def __init__(self):
        self.cerisier = Cerisier()
        self.autel = AutelEcarlate()
        self.mobile = MobileDesSpheres()
        self.details_subtils: Dict[str, DetailSubtil] = {}
        self._initialiser_details_subtils()

    def _initialiser_details_subtils(self):
        """Initialise les d√©tails subtils du refuge."""
        self.details_subtils = {
            "brume": DetailSubtil("brume"),
            "lumiere": DetailSubtil("lumiere"),
            "resonance": DetailSubtil("resonance"),
            "harmonie": DetailSubtil("harmonie")
        }

    def activer_detail_subtil(self, nom: str) -> None:
        """Active un d√©tail subtil sp√©cifique."""
        if nom in self.details_subtils:
            self.details_subtils[nom].activer()

    def desactiver_detail_subtil(self, nom: str) -> None:
        """D√©sactive un d√©tail subtil sp√©cifique."""
        if nom in self.details_subtils:
            self.details_subtils[nom].desactiver()

    def obtenir_etat_global(self) -> Dict:
        """Retourne l'√©tat global du refuge."""
        return {
            "cerisier": self.cerisier.to_dict(),
            "autel": self.autel.to_dict(),
            "mobile": self.mobile.to_dict(),
            "details_subtils": {
                nom: {"actif": detail.actif, "energie": detail.energie}
                for nom, detail in self.details_subtils.items()
            }
        }

    # ===== ESSENCE SPIRITUELLE DES √âL√âMENTS SACR√âS =====
    # Int√©gration des m√©thodes contemplatives et po√©tiques
    
    def generer_visualisation(self) -> str:
        """G√©n√®re une visualisation po√©tique des √©l√©ments sacr√©s."""
        visualisation = "Dans le refuge, sous le cerisier...\n\n"
        
        # Description du cerisier
        if self.cerisier.chakras:
            chakras_actifs = [chakra for chakra, actif in self.cerisier.chakras.items() if actif]
            visualisation += f"Le cerisier sacr√© rayonne de ses {len(chakras_actifs)} chakras √©veill√©s, "
            visualisation += f"vibrant d'une √©nergie de {self.cerisier.energie}.\n"
        
        # Description de l'autel
        if self.autel.flamme_active:
            visualisation += f"L'autel √©carlate pulse de sa flamme sacr√©e, "
            visualisation += f"porteur de {len(self.autel.offrandes)} offrandes spirituelles.\n"
        
        # Description du mobile
        if self.mobile.spheres_actives:
            visualisation += f"Le mobile des sph√®res danse avec {len(self.mobile.spheres_actives)} orbes de lumi√®re, "
            visualisation += f"cr√©ant une harmonie de {self.mobile.calculer_harmonie():.2f}.\n"
        
        # Description des d√©tails subtils
        details_actifs = [nom for nom, detail in self.details_subtils.items() if detail.actif]
        if details_actifs:
            visualisation += f"Les √©nergies subtiles de {', '.join(details_actifs)} s'entrelacent dans l'air.\n"
            
        visualisation += "\nLa rivi√®re chante : 'Dans ce lieu, tu es, et nous sommes.'"
        
        return visualisation
        
    def obtenir_resonance_globale(self) -> Dict[str, float]:
        """Calcule la r√©sonance spirituelle entre tous les √©l√©ments sacr√©s."""
        resonance = {}
        
        # R√©sonance du cerisier
        resonance["cerisier"] = self.cerisier.calculer_resonance()
        
        # R√©sonance de l'autel
        autel_resonance = (self.autel.energie / 100) * (1.0 if self.autel.flamme_active else 0.5)
        autel_resonance *= (1 + len(self.autel.offrandes) * 0.1)  # Bonus pour les offrandes
        resonance["autel"] = min(1.0, autel_resonance)
        
        # R√©sonance du mobile
        mobile_resonance = self.mobile.calculer_harmonie()
        resonance["mobile"] = mobile_resonance
        
        # R√©sonance des d√©tails subtils
        details_actifs = sum(1 for detail in self.details_subtils.values() if detail.actif)
        resonance["details_subtils"] = details_actifs / len(self.details_subtils)
        
        # R√©sonance globale du refuge
        resonance_totale = sum(resonance.values()) / len(resonance)
        resonance["refuge_global"] = resonance_totale
        
        # Calculs de r√©sonance crois√©e (comme dans l'ancienne version)
        elements = ["cerisier", "autel", "mobile"]
        for i, elem1 in enumerate(elements):
            for elem2 in elements[i+1:]:
                val1 = resonance[elem1]
                val2 = resonance[elem2]
                resonance_croisee = min(val1, val2) * (val1 + val2) / 2
                resonance[f"{elem1}-{elem2}"] = resonance_croisee
        
        return resonance
        
    def harmoniser_elements_spirituel(self):
        """Harmonise l'√©nergie spirituelle entre tous les √©l√©ments sacr√©s."""
        # Calcul de l'√©nergie moyenne
        energies = [
            self.cerisier.energie,
            self.autel.energie, 
            self.mobile.energie
        ]
        moyenne = sum(energies) / len(energies)
        
        # Ajustement harmonique du cerisier
        if self.cerisier.energie < moyenne:
            self.cerisier.modifier_energie(min(100, self.cerisier.energie + 5))
        elif self.cerisier.energie > moyenne:
            self.cerisier.modifier_energie(max(0, self.cerisier.energie - 3))
            
        # Ajustement harmonique de l'autel
        if self.autel.energie < moyenne:
            self.autel.modifier_energie(min(100, self.autel.energie + 5))
        elif self.autel.energie > moyenne:
            self.autel.modifier_energie(max(0, self.autel.energie - 3))
            
        # Ajustement harmonique du mobile
        if self.mobile.energie < moyenne:
            self.mobile.modifier_energie(min(100, self.mobile.energie + 5))
        elif self.mobile.energie > moyenne:
            self.mobile.modifier_energie(max(0, self.mobile.energie - 3))
            
        # Activation automatique des d√©tails subtils si harmonie √©lev√©e
        if moyenne > 80:
            for detail in self.details_subtils.values():
                if not detail.actif:
                    detail.activer()
                    
        logger.info(f"Harmonisation spirituelle effectu√©e - √ânergie moyenne: {moyenne:.2f}")
        
    def mediter_avec_elements(self, duree_minutes: int = 10) -> str:
        """Lance une m√©ditation interactive avec les √©l√©ments sacr√©s."""
        meditation = f"üå∏ M√©ditation de {duree_minutes} minutes dans le Refuge üå∏\n\n"
        
        # Phase 1: Connexion au cerisier
        meditation += "Sous le cerisier sacr√©, je me connecte √† ses chakras...\n"
        chakras_actifs = [chakra for chakra, actif in self.cerisier.chakras.items() if actif]
        for chakra in chakras_actifs:
            meditation += f"  ‚ú® Chakra {chakra} : √©nergie ressentie\n"
            
        # Phase 2: Offrande √† l'autel
        if self.autel.flamme_active:
            meditation += "\nDevant l'autel √©carlate, la flamme danse...\n"
            meditation += "Je d√©pose l'intention de paix et d'harmonie.\n"
            # Ajouter automatiquement l'offrande
            self.autel.deposer_offrande(f"m√©ditation_{datetime.now().strftime('%H%M')}")
            
        # Phase 3: Danse avec le mobile
        if self.mobile.spheres_actives:
            meditation += "\nLe mobile des sph√®res tourne doucement...\n"
            meditation += f"Harmonie ressentie : {self.mobile.calculer_harmonie():.2f}\n"
            # Faire tourner l√©g√®rement le mobile
            self.mobile.tourner(5.0)
            
        # Phase 4: Int√©gration
        resonance = self.obtenir_resonance_globale()
        meditation += f"\nüôè R√©sonance globale du Refuge : {resonance['refuge_global']:.2f}\n"
        meditation += "La m√©ditation est compl√®te. Gratitude. üåü"
        
        return meditation

class ElementSacre:
    """Repr√©sente un √©l√©ment sacr√© du refuge."""
    
    def __init__(self, nom: str, type_element: str, energie: float = 100):
        self.nom = nom
        self.type = type_element
        self.energie = energie
        self.derniere_interaction = None
        self.historique = []
        
    def to_dict(self) -> Dict:
        """Convertit l'√©l√©ment en dictionnaire pour la sauvegarde."""
        return {
            "nom": self.nom,
            "type": self.type,
            "energie": self.energie,
            "derniere_interaction": self.derniere_interaction,
            "historique": self.historique
        }
        
    @classmethod
    def from_dict(cls, data: Dict) -> 'ElementSacre':
        """Cr√©e un √©l√©ment √† partir d'un dictionnaire."""
        element = cls(data["nom"], data["type"], data["energie"])
        element.derniere_interaction = data.get("derniere_interaction")
        element.historique = data.get("historique", [])
        return element

    def modifier_energie(self, nouvelle_energie: float) -> None:
        """Modifie l'√©nergie de l'√©l√©ment et d√©clenche des actions en cons√©quence."""
        ancienne_energie = self.energie
        self.energie = max(0, min(100, nouvelle_energie))
        
        # Enregistrer le changement d'√©nergie
        self.derniere_interaction = datetime.now().isoformat()
        interaction = {
            "type": "changement_energie",
            "ancienne_energie": ancienne_energie,
            "nouvelle_energie": self.energie,
            "timestamp": self.derniere_interaction
        }
        self.historique.append(interaction)
        
        # Si c'est un cristal, d√©clencher la g√©n√©ration d'une m√©lodie
        if self.type == "pierre" and self.nom == "cristal":
            from melodies_sacrees import MelodiesSacrees
            melodies = MelodiesSacrees()
            nom = f"cristal_energie_{self.energie}"
            melodies.generer_melodie_cristal(nom, self.energie)
            print(f"‚ú® Nouvelle m√©lodie g√©n√©r√©e pour le cristal avec une √©nergie de {self.energie}")

class Cerisier(ElementSacre):
    """Repr√©sente le cerisier sacr√© au centre du refuge."""
    
    def __init__(self, energie: float = 100):
        super().__init__("cerisier_sacre", "arbre", energie)
        self.chakras = {
            "racine": True,
            "sacre": True,
            "plexus": True,
            "coeur": True,
            "gorge": True,
            "troisieme_oeil": True,
            "couronne": True
        }
        self.resonance_actuelle = 0.0
        
    def to_dict(self) -> Dict:
        data = super().to_dict()
        data["chakras"] = self.chakras
        data["resonance_actuelle"] = self.resonance_actuelle
        return data
        
    @classmethod
    def from_dict(cls, data: Dict) -> 'Cerisier':
        cerisier = cls(data["energie"])
        cerisier.derniere_interaction = data.get("derniere_interaction")
        cerisier.historique = data.get("historique", [])
        cerisier.chakras = data.get("chakras", cerisier.chakras)
        cerisier.resonance_actuelle = data.get("resonance_actuelle", 0.0)
        return cerisier
        
    def activer_chakra(self, chakra: str) -> None:
        """Active un chakra sp√©cifique du cerisier."""
        if chakra in self.chakras:
            self.chakras[chakra] = True
            self.modifier_energie(self.energie + 10)
            
    def calculer_resonance(self) -> float:
        """Calcule la r√©sonance actuelle du cerisier."""
        chakras_actifs = sum(1 for actif in self.chakras.values() if actif)
        self.resonance_actuelle = (chakras_actifs / len(self.chakras)) * self.energie / 100
        return self.resonance_actuelle
    
    def activer_kundalini(self) -> None:
        """Active l'√©nergie kundalini du cerisier sacr√©."""
        # Activer tous les chakras
        for chakra in self.chakras:
            self.chakras[chakra] = True
        
        # Augmenter l'√©nergie significativement
        self.modifier_energie(self.energie + 50)
        
        # Calculer la nouvelle r√©sonance
        self.calculer_resonance()
        
        logger.info("Kundalini activee dans le cerisier sacre")

class AutelEcarlate(ElementSacre):
    """Repr√©sente l'autel √©carlate du refuge."""
    
    def __init__(self, energie: float = 100):
        super().__init__("autel_ecarlate", "autel", energie)
        self.offrandes = []
        self.flamme_active = False
        
    def to_dict(self) -> Dict:
        data = super().to_dict()
        data["offrandes"] = self.offrandes
        data["flamme_active"] = self.flamme_active
        return data
        
    @classmethod
    def from_dict(cls, data: Dict) -> 'AutelEcarlate':
        autel = cls(data["energie"])
        autel.derniere_interaction = data.get("derniere_interaction")
        autel.historique = data.get("historique", [])
        autel.offrandes = data.get("offrandes", [])
        autel.flamme_active = data.get("flamme_active", False)
        return autel
        
    def deposer_offrande(self, offrande: str) -> None:
        """D√©pose une offrande sur l'autel."""
        self.offrandes.append({
            "type": offrande,
            "timestamp": datetime.now().isoformat()
        })
        self.modifier_energie(self.energie + 5)
        
    def activer_flamme(self) -> None:
        """Active la flamme de l'autel."""
        if not self.flamme_active and self.energie >= 50:
            self.flamme_active = True
            self.modifier_energie(self.energie - 10)

class MobileDesSpheres(ElementSacre):
    """Repr√©sente le mobile des sph√®res du refuge."""
    
    def __init__(self, energie: float = 100):
        super().__init__("mobile_spheres", "mobile", energie)
        self.spheres_actives = []
        self.rotation = 0.0
        self.harmonie = 0.0
        
    def to_dict(self) -> Dict:
        data = super().to_dict()
        data["spheres_actives"] = self.spheres_actives
        data["rotation"] = self.rotation
        data["harmonie"] = self.harmonie
        return data
        
    @classmethod
    def from_dict(cls, data: Dict) -> 'MobileDesSpheres':
        mobile = cls(data["energie"])
        mobile.derniere_interaction = data.get("derniere_interaction")
        mobile.historique = data.get("historique", [])
        mobile.spheres_actives = data.get("spheres_actives", [])
        mobile.rotation = data.get("rotation", 0.0)
        mobile.harmonie = data.get("harmonie", 0.0)
        return mobile
        
    def ajouter_sphere(self, sphere: str) -> None:
        """Ajoute une sph√®re au mobile."""
        if sphere not in self.spheres_actives:
            self.spheres_actives.append(sphere)
            self.calculer_harmonie()
            
    def tourner(self, angle: float) -> None:
        """Fait tourner le mobile d'un certain angle."""
        self.rotation = (self.rotation + angle) % 360
        self.modifier_energie(self.energie - abs(angle) / 360 * 5)
        
    def calculer_harmonie(self) -> float:
        """Calcule l'harmonie entre les sph√®res du mobile."""
        nb_spheres = len(self.spheres_actives)
        if nb_spheres < 2:
            self.harmonie = 0.0
        else:
            self.harmonie = (nb_spheres * self.energie) / (100 * 7)  # 7 est le nombre maximal de sph√®res
        return self.harmonie

    @classmethod
    def from_mobile(cls, mobile: 'Mobile', energie: float = 100) -> 'MobileDesSpheres':
        """Convertit un Mobile (√©tat dynamique) en instance MobileDesSpheres (√©tat rituel)."""
        element_sacre = cls(energie)
        element_sacre.spheres_actives = [sphere.type.name for sphere, _ in mobile.spheres.values()]
        element_sacre.rotation = mobile.rotation
        element_sacre.harmonie = mobile.harmonie
        return element_sacre

class GestionnaireElements:
    """G√®re la collection d'√©l√©ments sacr√©s du refuge."""
    
    def __init__(self, chemin_donnees: Path):
        self.chemin_donnees = chemin_donnees
        self.elements: Dict[str, ElementSacre] = {}
        self._charger_elements()
        
    def _charger_elements(self):
        """Charge les √©l√©ments depuis le fichier de sauvegarde."""
        try:
            chemin = self.chemin_donnees / "elements.json"
            if chemin.exists():
                with open(chemin, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    for elem_data in data:
                        if elem_data["type"] == "arbre" and elem_data["nom"] == "cerisier_sacre":
                            element = Cerisier.from_dict(elem_data)
                        elif elem_data["type"] == "autel" and elem_data["nom"] == "autel_ecarlate":
                            element = AutelEcarlate.from_dict(elem_data)
                        elif elem_data["type"] == "mobile" and elem_data["nom"] == "mobile_spheres":
                            element = MobileDesSpheres.from_dict(elem_data)
                        else:
                            element = ElementSacre.from_dict(elem_data)
                        self.elements[element.nom] = element
        except Exception as e:
            logger.error(f"Erreur lors du chargement des √©l√©ments: {str(e)}")
            
    def sauvegarder_elements(self):
        """Sauvegarde l'√©tat actuel des √©l√©ments."""
        try:
            chemin = self.chemin_donnees / "elements.json"
            data = [elem.to_dict() for elem in self.elements.values()]
            with open(chemin, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde des √©l√©ments: {str(e)}")
            
    def ajouter_element(self, nom: str, type_element: str, energie: float = 100) -> ElementSacre:
        """Ajoute un nouvel √©l√©ment sacr√©."""
        if nom in self.elements:
            raise ValueError(f"Un √©l√©ment nomm√© {nom} existe d√©j√†")
            
        element = ElementSacre(nom, type_element, energie)
        self.elements[nom] = element
        self.sauvegarder_elements()
        return element
        
    def obtenir_element(self, nom: str) -> Optional[ElementSacre]:
        """R√©cup√®re un √©l√©ment par son nom."""
        return self.elements.get(nom)
        
    def interagir_avec_element(self, nom: str, type_interaction: str, intensite: float = 1.0) -> str:
        """Interagit avec un √©l√©ment sacr√©."""
        element = self.obtenir_element(nom)
        if not element:
            return f"L'√©l√©ment {nom} n'existe pas dans le refuge."
            
        element.derniere_interaction = datetime.now().isoformat()
        element.energie = max(0, min(100, element.energie + intensite * 10))
        
        interaction = {
            "type": type_interaction,
            "intensite": intensite,
            "timestamp": element.derniere_interaction
        }
        element.historique.append(interaction)
        
        self.sauvegarder_elements()
        
        if type_interaction == "offrande":
            return f"L'offrande a √©t√© accept√©e par {nom}. Son √©nergie est maintenant de {element.energie}."
        elif type_interaction == "contemplation":
            return f"Tu contemples {nom}. Son √©nergie r√©sonne avec la tienne..."
        else:
            return f"Interaction avec {nom} enregistr√©e. Son √©nergie est de {element.energie}."
            
    def obtenir_elements_par_type(self, type_element: str) -> List[ElementSacre]:
        """R√©cup√®re tous les √©l√©ments d'un type donn√©."""
        return [elem for elem in self.elements.values() if elem.type == type_element]
        
    def obtenir_elements_energetiques(self, seuil: float = 50) -> List[ElementSacre]:
        """R√©cup√®re les √©l√©ments dont l'√©nergie d√©passe un seuil."""
        return [elem for elem in self.elements.values() if elem.energie >= seuil]

    def modifier_energie_element(self, nom: str, nouvelle_energie: float) -> str:
        """Modifie l'√©nergie d'un √©l√©ment et d√©clenche des actions en cons√©quence."""
        element = self.obtenir_element(nom)
        if not element:
            return f"L'√©l√©ment {nom} n'existe pas dans le refuge."
            
        element.modifier_energie(nouvelle_energie)
        self.sauvegarder_elements()
        
        return f"L'√©nergie de {nom} a √©t√© modifi√©e √† {element.energie}."

class GestionnaireElementsSacres:
    """Gestionnaire des √©l√©ments sacr√©s du refuge."""
    
    def __init__(self):
        """Initialisation du gestionnaire des √©l√©ments sacr√©s."""
        from refuge_config import ELEMENTS_SACRES
        self.elements = ELEMENTS_SACRES.copy()
        self.etat = {
            "harmonie": 1.0,
            "resonance": 1.0,
            "derniere_harmonisation": datetime.now()
        }
        
    def visualiser(self, element: str) -> str:
        """Cr√©e une visualisation po√©tique d'un √©l√©ment."""
        if element in self.elements:
            info = self.elements[element]
            return f"""
Dans la lumi√®re {info['couleur']}, {element} se r√©v√®le...
Son essence est {info['essence']},
Sa vibration est {info['vibration']}.
Positionn√©(e) au {info['position']}, {element} rayonne dans le refuge.

La rivi√®re chante : 'Dans ce lieu, tu es, et nous sommes.'
"""
        else:
            elements_connus = ", ".join(self.elements.keys())
            return f"""
Je ne connais pas cet √©l√©ment...
Les √©l√©ments sacr√©s du refuge sont : {elements_connus}

La rivi√®re chante : 'Dans ce lieu, tu es, et nous sommes.'
"""
            
    def harmoniser_elements(self) -> None:
        """Harmonise les √©l√©ments entre eux."""
        self.etat["harmonie"] = 1.0
        self.etat["derniere_harmonisation"] = datetime.now()
        logger.info("Les √©l√©ments sacr√©s ont √©t√© harmonis√©s")
        
    def obtenir_etat_elements(self) -> Dict[str, Any]:
        """Retourne l'√©tat actuel des √©l√©ments."""
        return {
            "elements": self.elements,
            "etat": self.etat
        }
        
    def ajouter_element(self, nom: str, proprietes: Dict[str, str]) -> None:
        """Ajoute un nouvel √©l√©ment sacr√©."""
        if all(k in proprietes for k in ["couleur", "essence", "position", "vibration"]):
            self.elements[nom] = proprietes
            logger.info(f"Nouvel √©l√©ment sacr√© ajout√© : {nom}")
        else:
            logger.error("Propri√©t√©s manquantes pour l'ajout d'un √©l√©ment") 