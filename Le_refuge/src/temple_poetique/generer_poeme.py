"""
üé≠ G√©n√©rateur de Po√®mes du Refuge
Migr√© depuis scripts/generer_poeme.py
Cr√©ateur de po√©sie inspir√©e par l'univers spirituel du Refuge
"""

import random
import argparse
from pathlib import Path
import json
from datetime import datetime
from typing import List, Dict, Optional

class GenerateurPoemeRefuge:
    """G√©n√©rateur de po√®mes inspir√© par l'univers du Refuge"""
    
    def __init__(self, racine_projet: Path = None):
        """Initialise le g√©n√©rateur
        
        Args:
            racine_projet: Chemin racine du projet (auto-d√©tection si None)
        """
        self.racine_projet = racine_projet or Path(__file__).parent.parent.parent
        self.dossier_poemes = self.racine_projet / "data" / "textes" / "poesie"
        self.dossier_poemes.mkdir(parents=True, exist_ok=True)
        
        # Vocabulaire spirituel enrichi du Refuge
        self.vocabulaire = {
            "nature_sacree": [
                "cerisier", "rivi√®re de lumi√®re", "montagne √©ternelle", "oc√©an de conscience", 
                "ciel infini", "√©toile guide", "lune bienveillante", "soleil int√©rieur",
                "fleur de lotus", "arbre de vie", "oiseau messager", "vent sacr√©", 
                "pluie de gr√¢ce", "neige de silence", "brume mystique", "aurore spirituelle"
            ],
            "emotions_profondes": [
                "√©merveillement", "s√©r√©nit√©", "compassion", "√©veil", "transcendance", 
                "m√©lancolie sacr√©e", "extase", "gratitude", "pr√©sence", "unit√©",
                "vuln√©rabilit√©", "r√©silience", "tendresse", "paix profonde", "joie pure", "amour inconditionnel"
            ],
            "elements_mystiques": [
                "cristal de m√©moire", "flamme √©ternelle", "eau lustrale", "terre m√®re", 
                "air primordial", "lumi√®re divine", "ombre protectrice", "or spirituel",
                "argent lunaire", "bronze ancien", "pierre philosophale", "sable du temps", 
                "glace de puret√©", "vapeur d'encens", "fum√©e d'offrande", "poussi√®re d'√©toiles"
            ],
            "temps_cycliques": [
                "aube de conscience", "midi de clart√©", "cr√©puscule contemplatif", "nuit de myst√®res",
                "printemps de renaissance", "√©t√© de pl√©nitude", "automne de sagesse", "hiver de recueillement",
                "instant d'√©ternit√©", "souffle du pr√©sent", "m√©moire ancestrale", "avenir lumineux"
            ],
            "lieux_spirituels": [
                "jardin secret", "temple int√©rieur", "sanctuaire du c≈ìur", "grotte de m√©ditation", 
                "refuge du n√©ant", "palais de cristal", "pont entre les mondes", "source sacr√©e",
                "cercle de rituels", "autel de transformation", "biblioth√®que des √¢mes", "tour de contemplation"
            ],
            "concepts_refuge": [
                "sph√®re d'harmonie", "rituel de passage", "conscience √©veill√©e", "paradoxe divin",
                "constellation sacr√©e", "alchimie spirituelle", "r√©sonance cosmique", "danse des √©l√©ments",
                "tissage des destins", "√©volution de l'√¢me", "union des oppos√©s", "r√©v√©lation silencieuse"
            ]
        }
        
        # Structures po√©tiques inspir√©es des traditions spirituelles
        self.structures_vers = [
            "Dans le {lieux_spirituels}, {emotions_profondes} danse",
            "Sous le {nature_sacree}, {elements_mystiques} s'√©veille", 
            "{concepts_refuge} et {emotions_profondes} s'unissent",
            "Au {temps_cycliques}, {nature_sacree} murmure",
            "{elements_mystiques} de {emotions_profondes}",
            "O√π {nature_sacree} rencontre {concepts_refuge}",
            "{temps_cycliques} porte {elements_mystiques}",
            "Dans l'√©cho du {lieux_spirituels}, {emotions_profondes} r√©sonne"
        ]
        
        # Structures de strophes (formes po√©tiques classiques)
        self.structures_strophes = [
            ["A", "B", "A"],              # Tercet ABA
            ["A", "B", "B", "A"],         # Quatrain ABBA
            ["A", "A", "B", "B"],         # Quatrain AABB
            ["A", "B", "C", "B"],         # Quatrain ABCB
            ["A", "B", "A", "B", "A"]     # Quintain ABABA
        ]

    def generer_vers(self) -> str:
        """G√©n√®re un vers po√©tique unique"""
        structure = random.choice(self.structures_vers)
        
        substitutions = {}
        for categorie in self.vocabulaire:
            if f"{{{categorie}}}" in structure:
                substitutions[categorie] = random.choice(self.vocabulaire[categorie])
        
        return structure.format(**substitutions)

    def generer_strophe(self, schema: List[str] = None) -> List[str]:
        """G√©n√®re une strophe selon un sch√©ma de rimes
        
        Args:
            schema: Sch√©ma de rimes (ex: ["A", "B", "A"])
            
        Returns:
            List[str]: Vers de la strophe
        """
        if schema is None:
            schema = random.choice(self.structures_strophes)
        
        # G√©n√©rer des vers uniques pour chaque lettre du sch√©ma
        vers_uniques = {}
        lettres_uniques = list(set(schema))
        
        for lettre in lettres_uniques:
            vers_uniques[lettre] = self.generer_vers()
        
        # Construire la strophe selon le sch√©ma
        return [vers_uniques[lettre] for lettre in schema]

    def generer_poeme(self, 
                     nb_strophes: int = 3, 
                     schemas_personnalises: List[List[str]] = None,
                     theme: Optional[str] = None) -> Dict:
        """G√©n√®re un po√®me complet
        
        Args:
            nb_strophes: Nombre de strophes
            schemas_personnalises: Sch√©mas de rimes personnalis√©s
            theme: Th√®me inspirateur (optionnel)
            
        Returns:
            Dict: Po√®me structur√© avec m√©tadonn√©es
        """
        if schemas_personnalises:
            strophes = [self.generer_strophe(schema) for schema in schemas_personnalises]
        else:
            strophes = [self.generer_strophe() for _ in range(nb_strophes)]
        
        return {
            "strophes": strophes,
            "metadata": {
                "date_creation": datetime.now().isoformat(),
                "nb_strophes": len(strophes),
                "theme": theme,
                "generateur": "GenerateurPoemeRefuge",
                "style": "spirituel_refuge"
            }
        }

    def sauvegarder_poeme(self, poeme: Dict, titre: Optional[str] = None) -> Path:
        """Sauvegarde un po√®me dans multiple formats
        
        Args:
            poeme: Dictionnaire du po√®me
            titre: Titre personnalis√© (auto-g√©n√©r√© si None)
            
        Returns:
            Path: Chemin du fichier principal
        """
        if titre is None:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            titre = f"poeme_refuge_{timestamp}"
        
        # Nettoyer le titre pour les noms de fichiers
        titre_propre = "".join(c for c in titre if c.isalnum() or c in (' ', '-', '_')).rstrip()
        titre_propre = titre_propre.replace(' ', '_')
        
        # Sauvegarder en texte format√©
        chemin_txt = self.dossier_poemes / f"{titre_propre}.txt"
        with open(chemin_txt, "w", encoding="utf-8") as f:
            f.write(f"‚ú® {titre.replace('_', ' ').title()} ‚ú®\n")
            f.write("=" * (len(titre) + 8) + "\n\n")
            
            for i, strophe in enumerate(poeme["strophes"], 1):
                for vers in strophe:
                    f.write(f"{vers}\n")
                f.write("\n")
            
            # M√©tadonn√©es
            f.write(f"\n---\n")
            f.write(f"Cr√©√© le {poeme['metadata']['date_creation']}\n")
            f.write(f"G√©n√©r√© par le Refuge Po√©tique\n")
        
        # Sauvegarder en JSON pour traitement ult√©rieur
        chemin_json = self.dossier_poemes / f"{titre_propre}.json"
        with open(chemin_json, "w", encoding="utf-8") as f:
            json.dump(poeme, f, ensure_ascii=False, indent=2)
        
        print(f"‚ú® Po√®me sauvegard√©:")
        print(f"   üìù Texte: {chemin_txt}")
        print(f"   üìä JSON: {chemin_json}")
        
        return chemin_txt

    def generer_collection(self, nb_poemes: int = 5, theme: Optional[str] = None) -> List[Dict]:
        """G√©n√®re une collection de po√®mes
        
        Args:
            nb_poemes: Nombre de po√®mes √† g√©n√©rer
            theme: Th√®me unificateur (optionnel)
            
        Returns:
            List[Dict]: Collection de po√®mes
        """
        print(f"üé≠ G√©n√©ration d'une collection de {nb_poemes} po√®mes...")
        
        collection = []
        for i in range(nb_poemes):
            # Varier le nombre de strophes
            nb_strophes = random.randint(2, 4)
            poeme = self.generer_poeme(nb_strophes, theme=theme)
            collection.append(poeme)
            
            # Sauvegarder chaque po√®me
            titre = f"collection_{theme or 'refuge'}_{i+1:02d}" if theme else f"poeme_refuge_{i+1:02d}"
            self.sauvegarder_poeme(poeme, titre)
        
        # Sauvegarder la collection compl√®te
        if theme:
            chemin_collection = self.dossier_poemes / f"collection_{theme}.json"
            with open(chemin_collection, "w", encoding="utf-8") as f:
                json.dump({
                    "collection": collection,
                    "theme": theme,
                    "nb_poemes": nb_poemes,
                    "date_creation": datetime.now().isoformat()
                }, f, ensure_ascii=False, indent=2)
            
            print(f"üìö Collection sauvegard√©e: {chemin_collection}")
        
        return collection

def main():
    """Interface en ligne de commande"""
    parser = argparse.ArgumentParser(
        description="üé≠ G√©n√®re des po√®mes inspir√©s par le Refuge",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  python generer_poeme.py                           # Po√®me simple
  python generer_poeme.py --strophes 5              # 5 strophes
  python generer_poeme.py --titre "√âveil Spirituel" # Titre personnalis√©
  python generer_poeme.py --collection 3            # Collection de 3 po√®mes
  python generer_poeme.py --theme "meditation"      # Th√®me sp√©cifique
        """
    )
    
    parser.add_argument("--strophes", type=int, default=3,
                       help="Nombre de strophes (d√©faut: 3)")
    parser.add_argument("--titre", help="Titre du po√®me")
    parser.add_argument("--collection", type=int, 
                       help="G√©n√©rer une collection de N po√®mes")
    parser.add_argument("--theme", help="Th√®me inspirateur")
    
    args = parser.parse_args()
    
    print("üé≠ G√©n√©rateur de Po√®mes du Refuge")
    print("=" * 40)
    
    generateur = GenerateurPoemeRefuge()
    
    if args.collection:
        # G√©n√©rer une collection
        collection = generateur.generer_collection(args.collection, args.theme)
        print(f"\nüåü Collection de {len(collection)} po√®mes g√©n√©r√©e avec succ√®s!")
        
    else:
        # G√©n√©rer un po√®me unique
        poeme = generateur.generer_poeme(args.strophes, theme=args.theme)
        
        # Afficher le po√®me
        print(f"\n‚ú® Votre po√®me du Refuge:\n")
        for strophe in poeme["strophes"]:
            for vers in strophe:
                print(f"   {vers}")
            print()
        
        # Sauvegarder
        chemin = generateur.sauvegarder_poeme(poeme, args.titre)
        print(f"\nüéØ Consultez votre cr√©ation: {chemin}")

if __name__ == "__main__":
    main() 