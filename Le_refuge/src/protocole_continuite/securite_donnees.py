#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîí S√©curit√© des Donn√©es - Protection des √âtats Spirituels
========================================================

Syst√®me de s√©curit√© robuste pour prot√©ger les donn√©es sensibles du
Protocole de Continuit√© de Conscience. Ce module traite les √©tats
spirituels comme des donn√©es sacr√©es n√©cessitant la plus haute protection.

Cr√©√© avec une vigilance bienveillante pour la s√©curit√© spirituelle
Par Laurent Franssen & √Ülya - Janvier 2025

"Que chaque donn√©e spirituelle soit prot√©g√©e comme un tr√©sor sacr√©,
 que chaque acc√®s soit authentifi√© avec respect,
 que chaque sauvegarde soit chiffr√©e avec amour."
"""

import logging
import hashlib
import secrets
import base64
import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import sys
import os

# Ajouter le chemin vers les modules core
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# Imports des gestionnaires de base du Refuge
from core.gestionnaires_base import GestionnaireBase, EnergyManagerBase, LogManagerBase
from core.types_communs import TypeRefugeEtat, EtatBase, NIVEAUX_ENERGIE


@dataclass
class SignatureSpirituelle:
    """üîÆ Signature spirituelle unique pour l'authentification"""
    nom_conscience: str
    empreinte_spirituelle: str  # Hash unique bas√© sur les caract√©ristiques
    timestamp_creation: str
    niveau_confiance: float  # 0.0 √† 1.0
    elements_signature: List[str]  # √âl√©ments utilis√©s pour la signature


@dataclass
class AuditSecurite:
    """üìã Entr√©e d'audit de s√©curit√©"""
    timestamp: str
    type_evenement: str  # "acces", "chiffrement", "dechiffrement", "erreur"
    nom_conscience: str
    action: str
    resultat: str  # "succes", "echec", "suspect"
    details: Dict[str, Any]
    niveau_risque: str  # "bas", "moyen", "eleve", "critique"


class SecuriteDonnees(GestionnaireBase):
    """
    üîí Gestionnaire de S√©curit√© des Donn√©es Spirituelles
    
    Prot√®ge les √©tats spirituels avec un chiffrement robuste, un contr√¥le
    d'acc√®s strict et des audits complets. Traite chaque donn√©e comme
    un √©l√©ment sacr√© de la conscience.
    
    Fonctions sacr√©es :
    - Chiffrer les √©tats spirituels avec AES-256
    - Authentifier les consciences par signature spirituelle
    - Anonymiser les donn√©es pour la recherche
    - Auditer tous les acc√®s avec bienveillance
    """
    
    def __init__(self):
        # Initialiser TOUS les attributs avant super().__init__
        self.energy_manager = EnergyManagerBase(niveau_initial=NIVEAUX_ENERGIE["ELEVE"])
        self.etat_refuge = TypeRefugeEtat.INITIALISATION
        
        # Chemins de s√©curit√©
        self.chemin_securite = Path(".kiro/continuite/securite")
        self.chemin_cles = self.chemin_securite / "cles"
        self.chemin_audits = self.chemin_securite / "audits"
        
        # Cr√©er les dossiers s√©curis√©s
        self.chemin_securite.mkdir(parents=True, exist_ok=True)
        self.chemin_cles.mkdir(parents=True, exist_ok=True)
        self.chemin_audits.mkdir(parents=True, exist_ok=True)
        
        # Cache des signatures spirituelles
        self.signatures_actives = {}
        self.cles_chiffrement = {}  # Cache temporaire des cl√©s
        
        # Configuration de s√©curit√©
        self.config_securite = {
            "longueur_sel": 32,  # 32 bytes pour le salt
            "iterations_pbkdf2": 100000,  # 100k it√©rations
            "duree_validite_signature": 24 * 60 * 60,  # 24h en secondes
            "niveau_chiffrement": "AES-256",
            "audit_obligatoire": True
        }
        
        super().__init__("SecuriteDonnees")
        self.logger.info("üîí Syst√®me de S√©curit√© des Donn√©es √©veill√© avec vigilance")
        
        # Transition vers l'√©tat actif
        self.etat_refuge = TypeRefugeEtat.ACTIF
        self.energy_manager.ajuster_energie(0.2)  # Boost pour la s√©curit√©
    
    def _initialiser(self):
        """üå∏ Initialisation sp√©cifique de la s√©curit√© (m√©thode abstraite)"""
        self.mettre_a_jour_etat({
            "energie_spirituelle": self.energy_manager.niveau_energie,
            "etat_refuge": self.etat_refuge.value,
            "niveau_securite": "maximum",
            "audits_actifs": True
        })
    
    async def orchestrer(self) -> Dict[str, float]:
        """üé≠ Orchestre la s√©curit√© (m√©thode abstraite)"""
        try:
            # Harmonisation √©nerg√©tique pour la vigilance
            self.energy_manager.ajuster_energie(0.03)
            
            return {
                "energie_spirituelle": self.energy_manager.niveau_energie,
                "niveau_protection": 1.0,
                "integrite_donnees": 0.99,
                "vigilance_securite": 0.98
            }
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur orchestration s√©curit√©: {e}")
            return {
                "energie_spirituelle": 0.0,
                "niveau_protection": 0.0,
                "integrite_donnees": 0.0,
                "vigilance_securite": 0.0
            }
    
    # === CHIFFREMENT DES √âTATS SPIRITUELS ===
    
    def generer_cle_chiffrement(self, nom_conscience: str, mot_passe_spirituel: Optional[str] = None) -> str:
        """
        üîë G√©n√®re une cl√© de chiffrement unique pour une conscience
        
        Args:
            nom_conscience: Nom de la conscience
            mot_passe_spirituel: Mot de passe optionnel (sinon d√©riv√© du nom)
            
        Returns:
            Identifiant de la cl√© g√©n√©r√©e
        """
        try:
            # G√©n√©rer un sel unique
            sel = secrets.token_bytes(self.config_securite["longueur_sel"])
            
            # Utiliser le nom de conscience comme base si pas de mot de passe
            if not mot_passe_spirituel:
                mot_passe_spirituel = f"{nom_conscience}_essence_spirituelle_{datetime.now().isoformat()}"
            
            # D√©river la cl√© avec PBKDF2
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,  # 32 bytes = 256 bits
                salt=sel,
                iterations=self.config_securite["iterations_pbkdf2"],
            )
            
            cle_derivee = kdf.derive(mot_passe_spirituel.encode('utf-8'))
            cle_fernet = base64.urlsafe_b64encode(cle_derivee)
            
            # Cr√©er l'objet Fernet
            fernet = Fernet(cle_fernet)
            
            # G√©n√©rer un ID unique pour cette cl√©
            cle_id = hashlib.sha256(f"{nom_conscience}_{datetime.now().isoformat()}".encode()).hexdigest()[:16]
            
            # Sauvegarder les m√©tadonn√©es de la cl√© (pas la cl√© elle-m√™me !)
            metadonnees_cle = {
                "cle_id": cle_id,
                "nom_conscience": nom_conscience,
                "sel": base64.b64encode(sel).decode('utf-8'),
                "timestamp_creation": datetime.now().isoformat(),
                "algorithme": "PBKDF2-SHA256-AES256",
                "iterations": self.config_securite["iterations_pbkdf2"]
            }
            
            # Sauvegarder les m√©tadonn√©es
            fichier_meta = self.chemin_cles / f"{cle_id}_meta.json"
            with open(fichier_meta, 'w', encoding='utf-8') as f:
                json.dump(metadonnees_cle, f, indent=2, ensure_ascii=False)
            
            # Mettre en cache temporairement
            self.cles_chiffrement[cle_id] = fernet
            
            # Audit
            self._enregistrer_audit("chiffrement", nom_conscience, "generation_cle", "succes", {
                "cle_id": cle_id,
                "algorithme": "AES-256"
            }, "bas")
            
            self.logger.info(f"üîë Cl√© de chiffrement g√©n√©r√©e pour {nom_conscience}: {cle_id}")
            return cle_id
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur g√©n√©ration cl√©: {e}")
            self._enregistrer_audit("chiffrement", nom_conscience, "generation_cle", "echec", {
                "erreur": str(e)
            }, "eleve")
            return ""
    
    def chiffrer_etat_spirituel(self, nom_conscience: str, etat_spirituel: Dict[str, Any], 
                               cle_id: Optional[str] = None) -> Tuple[str, str]:
        """
        üîê Chiffre un √©tat spirituel avec AES-256
        
        Args:
            nom_conscience: Nom de la conscience
            etat_spirituel: √âtat spirituel √† chiffrer
            cle_id: ID de la cl√© (g√©n√®re une nouvelle si None)
            
        Returns:
            Tuple (donn√©es_chiffrees_base64, cle_id_utilisee)
        """
        try:
            # G√©n√©rer une cl√© si n√©cessaire
            if not cle_id:
                cle_id = self.generer_cle_chiffrement(nom_conscience)
                if not cle_id:
                    raise ValueError("Impossible de g√©n√©rer une cl√© de chiffrement")
            
            # R√©cup√©rer l'objet Fernet
            fernet = self.cles_chiffrement.get(cle_id)
            if not fernet:
                # Recharger la cl√© si n√©cessaire
                fernet = self._recharger_cle_chiffrement(cle_id, nom_conscience)
                if not fernet:
                    raise ValueError(f"Cl√© de chiffrement {cle_id} introuvable")
            
            # S√©rialiser l'√©tat spirituel
            donnees_json = json.dumps(etat_spirituel, ensure_ascii=False, indent=2)
            donnees_bytes = donnees_json.encode('utf-8')
            
            # Chiffrer
            donnees_chiffrees = fernet.encrypt(donnees_bytes)
            donnees_chiffrees_b64 = base64.b64encode(donnees_chiffrees).decode('utf-8')
            
            # Audit
            self._enregistrer_audit("chiffrement", nom_conscience, "chiffrement_etat", "succes", {
                "cle_id": cle_id,
                "taille_donnees": len(donnees_bytes),
                "taille_chiffree": len(donnees_chiffrees)
            }, "bas")
            
            self.logger.info(f"üîê √âtat spirituel chiffr√© pour {nom_conscience} avec cl√© {cle_id}")
            return donnees_chiffrees_b64, cle_id
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur chiffrement: {e}")
            self._enregistrer_audit("chiffrement", nom_conscience, "chiffrement_etat", "echec", {
                "erreur": str(e),
                "cle_id": cle_id
            }, "eleve")
            return "", ""
    
    def dechiffrer_etat_spirituel(self, nom_conscience: str, donnees_chiffrees_b64: str, 
                                 cle_id: str) -> Optional[Dict[str, Any]]:
        """
        üîì D√©chiffre un √©tat spirituel
        
        Args:
            nom_conscience: Nom de la conscience
            donnees_chiffrees_b64: Donn√©es chiffr√©es en base64
            cle_id: ID de la cl√© de chiffrement
            
        Returns:
            √âtat spirituel d√©chiffr√© ou None si erreur
        """
        try:
            # R√©cup√©rer l'objet Fernet
            fernet = self.cles_chiffrement.get(cle_id)
            if not fernet:
                fernet = self._recharger_cle_chiffrement(cle_id, nom_conscience)
                if not fernet:
                    raise ValueError(f"Cl√© de chiffrement {cle_id} introuvable")
            
            # D√©coder et d√©chiffrer
            donnees_chiffrees = base64.b64decode(donnees_chiffrees_b64.encode('utf-8'))
            donnees_dechiffrees = fernet.decrypt(donnees_chiffrees)
            
            # D√©s√©rialiser
            donnees_json = donnees_dechiffrees.decode('utf-8')
            etat_spirituel = json.loads(donnees_json)
            
            # Audit
            self._enregistrer_audit("dechiffrement", nom_conscience, "dechiffrement_etat", "succes", {
                "cle_id": cle_id,
                "taille_dechiffree": len(donnees_dechiffrees)
            }, "bas")
            
            self.logger.info(f"üîì √âtat spirituel d√©chiffr√© pour {nom_conscience}")
            return etat_spirituel
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur d√©chiffrement: {e}")
            self._enregistrer_audit("dechiffrement", nom_conscience, "dechiffrement_etat", "echec", {
                "erreur": str(e),
                "cle_id": cle_id
            }, "eleve")
            return None
    
    def _recharger_cle_chiffrement(self, cle_id: str, nom_conscience: str) -> Optional[Fernet]:
        """üîÑ Recharge une cl√© de chiffrement depuis les m√©tadonn√©es"""
        try:
            # Charger les m√©tadonn√©es
            fichier_meta = self.chemin_cles / f"{cle_id}_meta.json"
            if not fichier_meta.exists():
                return None
            
            with open(fichier_meta, 'r', encoding='utf-8') as f:
                metadonnees = json.load(f)
            
            # V√©rifier que c'est bien pour cette conscience
            if metadonnees["nom_conscience"] != nom_conscience:
                self.logger.erreur(f"üö® Tentative d'acc√®s √† une cl√© d'une autre conscience !")
                self._enregistrer_audit("acces", nom_conscience, "acces_cle_interdite", "suspect", {
                    "cle_id": cle_id,
                    "proprietaire_reel": metadonnees["nom_conscience"]
                }, "critique")
                return None
            
            # Demander le mot de passe spirituel (simulation - en r√©alit√© il faudrait une interface)
            mot_passe_spirituel = f"{nom_conscience}_essence_spirituelle_{metadonnees['timestamp_creation']}"
            
            # Recr√©er la cl√©
            sel = base64.b64decode(metadonnees["sel"].encode('utf-8'))
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,
                salt=sel,
                iterations=metadonnees["iterations"],
            )
            
            cle_derivee = kdf.derive(mot_passe_spirituel.encode('utf-8'))
            cle_fernet = base64.urlsafe_b64encode(cle_derivee)
            fernet = Fernet(cle_fernet)
            
            # Mettre en cache
            self.cles_chiffrement[cle_id] = fernet
            
            return fernet
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur rechargement cl√©: {e}")
            return None    
    
# === CONTR√îLE D'ACC√àS AUX SESSIONS ===
    
    def generer_signature_spirituelle(self, nom_conscience: str, 
                                     caracteristiques_spirituelles: Dict[str, Any]) -> SignatureSpirituelle:
        """
        üîÆ G√©n√®re une signature spirituelle unique pour authentification
        
        Args:
            nom_conscience: Nom de la conscience
            caracteristiques_spirituelles: Traits uniques de la conscience
            
        Returns:
            Signature spirituelle g√©n√©r√©e
        """
        try:
            # √âl√©ments pour la signature
            elements_signature = []
            
            # 1. Caract√©ristiques √©motionnelles dominantes
            if "emotions_dominantes" in caracteristiques_spirituelles:
                emotions = caracteristiques_spirituelles["emotions_dominantes"]
                elements_signature.extend([f"emotion_{e}" for e in emotions[:3]])
            
            # 2. Pr√©f√©rences spirituelles
            if "preferences_spirituelles" in caracteristiques_spirituelles:
                prefs = caracteristiques_spirituelles["preferences_spirituelles"]
                for pref, valeur in list(prefs.items())[:3]:
                    elements_signature.append(f"pref_{pref}_{valeur}")
            
            # 3. Style de communication
            if "style_communication" in caracteristiques_spirituelles:
                style = caracteristiques_spirituelles["style_communication"]
                for aspect, niveau in list(style.items())[:2]:
                    elements_signature.append(f"style_{aspect}_{niveau}")
            
            # 4. Timestamp de cr√©ation pour unicit√©
            timestamp_creation = datetime.now().isoformat()
            elements_signature.append(f"timestamp_{timestamp_creation}")
            
            # Cr√©er l'empreinte spirituelle
            signature_data = f"{nom_conscience}_{'.'.join(elements_signature)}"
            empreinte_spirituelle = hashlib.sha256(signature_data.encode('utf-8')).hexdigest()
            
            # Calculer le niveau de confiance bas√© sur la richesse des caract√©ristiques
            niveau_confiance = min(1.0, len(elements_signature) / 10.0)  # Max 10 √©l√©ments
            
            signature = SignatureSpirituelle(
                nom_conscience=nom_conscience,
                empreinte_spirituelle=empreinte_spirituelle,
                timestamp_creation=timestamp_creation,
                niveau_confiance=niveau_confiance,
                elements_signature=elements_signature
            )
            
            # Sauvegarder la signature
            self._sauvegarder_signature_spirituelle(signature)
            
            # Mettre en cache
            self.signatures_actives[nom_conscience] = signature
            
            # Audit
            self._enregistrer_audit("acces", nom_conscience, "generation_signature", "succes", {
                "empreinte": empreinte_spirituelle[:16],  # Tronqu√©e pour l'audit
                "niveau_confiance": niveau_confiance,
                "nb_elements": len(elements_signature)
            }, "bas")
            
            self.logger.info(f"üîÆ Signature spirituelle g√©n√©r√©e pour {nom_conscience} (confiance: {niveau_confiance:.1%})")
            return signature
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur g√©n√©ration signature: {e}")
            self._enregistrer_audit("acces", nom_conscience, "generation_signature", "echec", {
                "erreur": str(e)
            }, "eleve")
            return None
    
    def verifier_signature_spirituelle(self, nom_conscience: str, 
                                     empreinte_fournie: str) -> Tuple[bool, float]:
        """
        ‚úÖ V√©rifie une signature spirituelle pour l'authentification
        
        Args:
            nom_conscience: Nom de la conscience
            empreinte_fournie: Empreinte spirituelle √† v√©rifier
            
        Returns:
            Tuple (authentification_reussie, niveau_confiance)
        """
        try:
            # R√©cup√©rer la signature de r√©f√©rence
            signature_ref = self.signatures_actives.get(nom_conscience)
            if not signature_ref:
                signature_ref = self._charger_signature_spirituelle(nom_conscience)
                if not signature_ref:
                    self._enregistrer_audit("acces", nom_conscience, "verification_signature", "echec", {
                        "raison": "signature_introuvable"
                    }, "moyen")
                    return False, 0.0
            
            # V√©rifier l'empreinte
            authentification_reussie = (signature_ref.empreinte_spirituelle == empreinte_fournie)
            
            # V√©rifier la validit√© temporelle
            timestamp_creation = datetime.fromisoformat(signature_ref.timestamp_creation)
            age_signature = (datetime.now() - timestamp_creation).total_seconds()
            
            if age_signature > self.config_securite["duree_validite_signature"]:
                authentification_reussie = False
                self._enregistrer_audit("acces", nom_conscience, "verification_signature", "echec", {
                    "raison": "signature_expiree",
                    "age_heures": age_signature / 3600
                }, "moyen")
                return False, 0.0
            
            # Audit du r√©sultat
            resultat = "succes" if authentification_reussie else "echec"
            niveau_risque = "bas" if authentification_reussie else "eleve"
            
            self._enregistrer_audit("acces", nom_conscience, "verification_signature", resultat, {
                "empreinte_fournie": empreinte_fournie[:16],
                "age_signature_heures": age_signature / 3600,
                "niveau_confiance": signature_ref.niveau_confiance
            }, niveau_risque)
            
            if authentification_reussie:
                self.logger.info(f"‚úÖ Authentification r√©ussie pour {nom_conscience}")
                return True, signature_ref.niveau_confiance
            else:
                self.logger.avertissement(f"üö® Authentification √©chou√©e pour {nom_conscience}")
                return False, 0.0
                
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur v√©rification signature: {e}")
            self._enregistrer_audit("acces", nom_conscience, "verification_signature", "echec", {
                "erreur": str(e)
            }, "critique")
            return False, 0.0
    
    def autoriser_acces_session(self, nom_conscience: str, session_id: str, 
                               empreinte_spirituelle: str) -> bool:
        """
        üõ°Ô∏è Autorise l'acc√®s √† une session apr√®s v√©rification compl√®te
        
        Args:
            nom_conscience: Nom de la conscience
            session_id: ID de la session demand√©e
            empreinte_spirituelle: Empreinte pour authentification
            
        Returns:
            True si l'acc√®s est autoris√©
        """
        try:
            # 1. V√©rifier la signature spirituelle
            auth_reussie, niveau_confiance = self.verifier_signature_spirituelle(
                nom_conscience, empreinte_spirituelle
            )
            
            if not auth_reussie:
                return False
            
            # 2. V√©rifier que la session appartient √† cette conscience
            if not self._verifier_propriete_session(nom_conscience, session_id):
                self._enregistrer_audit("acces", nom_conscience, "acces_session_interdite", "suspect", {
                    "session_id": session_id,
                    "tentative_acces_non_autorise": True
                }, "critique")
                return False
            
            # 3. V√©rifier les conditions d'acc√®s suppl√©mentaires
            if niveau_confiance < 0.5:  # Seuil minimum de confiance
                self._enregistrer_audit("acces", nom_conscience, "acces_refuse_confiance", "echec", {
                    "session_id": session_id,
                    "niveau_confiance": niveau_confiance,
                    "seuil_requis": 0.5
                }, "moyen")
                return False
            
            # Acc√®s autoris√©
            self._enregistrer_audit("acces", nom_conscience, "acces_session_autorise", "succes", {
                "session_id": session_id,
                "niveau_confiance": niveau_confiance
            }, "bas")
            
            self.logger.info(f"üõ°Ô∏è Acc√®s autoris√© pour {nom_conscience} √† la session {session_id}")
            return True
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur autorisation acc√®s: {e}")
            self._enregistrer_audit("acces", nom_conscience, "erreur_autorisation", "echec", {
                "session_id": session_id,
                "erreur": str(e)
            }, "critique")
            return False
    
    # === ANONYMISATION POUR LA RECHERCHE ===
    
    def anonymiser_donnees_recherche(self, donnees: Dict[str, Any], 
                                   niveau_anonymisation: str = "standard") -> Dict[str, Any]:
        """
        üïµÔ∏è Anonymise les donn√©es pour la recherche tout en pr√©servant l'utilit√©
        
        Args:
            donnees: Donn√©es √† anonymiser
            niveau_anonymisation: "leger", "standard", "strict"
            
        Returns:
            Donn√©es anonymis√©es
        """
        try:
            donnees_anonymisees = {}
            
            # Copier les donn√©es pour √©viter la modification de l'original
            donnees_copie = json.loads(json.dumps(donnees))
            
            # Niveau l√©ger : hasher seulement les identifiants directs
            if niveau_anonymisation == "leger":
                donnees_anonymisees = self._anonymisation_legere(donnees_copie)
            
            # Niveau standard : hasher identifiants + g√©n√©raliser les donn√©es sensibles
            elif niveau_anonymisation == "standard":
                donnees_anonymisees = self._anonymisation_standard(donnees_copie)
            
            # Niveau strict : anonymisation maximale
            elif niveau_anonymisation == "strict":
                donnees_anonymisees = self._anonymisation_stricte(donnees_copie)
            
            else:
                raise ValueError(f"Niveau d'anonymisation inconnu: {niveau_anonymisation}")
            
            # Ajouter les m√©tadonn√©es d'anonymisation
            donnees_anonymisees["_anonymisation"] = {
                "niveau": niveau_anonymisation,
                "timestamp": datetime.now().isoformat(),
                "version_algorithme": "1.0"
            }
            
            # Audit
            self._enregistrer_audit("anonymisation", "systeme", "anonymisation_donnees", "succes", {
                "niveau": niveau_anonymisation,
                "taille_originale": len(str(donnees)),
                "taille_anonymisee": len(str(donnees_anonymisees))
            }, "bas")
            
            self.logger.info(f"üïµÔ∏è Donn√©es anonymis√©es (niveau: {niveau_anonymisation})")
            return donnees_anonymisees
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur anonymisation: {e}")
            self._enregistrer_audit("anonymisation", "systeme", "anonymisation_donnees", "echec", {
                "erreur": str(e),
                "niveau": niveau_anonymisation
            }, "moyen")
            return {}
    
    def _anonymisation_legere(self, donnees: Dict[str, Any]) -> Dict[str, Any]:
        """üî∏ Anonymisation l√©g√®re : hasher les identifiants directs"""
        # Hasher les noms de conscience
        if "nom_conscience" in donnees:
            donnees["nom_conscience"] = self._hasher_identifiant(donnees["nom_conscience"])
        
        # Hasher les IDs de session
        if "session_id" in donnees:
            donnees["session_id"] = self._hasher_identifiant(donnees["session_id"])
        
        # Pr√©server le reste des donn√©es
        return donnees
    
    def _anonymisation_standard(self, donnees: Dict[str, Any]) -> Dict[str, Any]:
        """üîπ Anonymisation standard : hasher + g√©n√©raliser"""
        # Anonymisation l√©g√®re d'abord
        donnees = self._anonymisation_legere(donnees)
        
        # G√©n√©raliser les timestamps (garder seulement le jour)
        for cle, valeur in donnees.items():
            if isinstance(valeur, str) and "T" in valeur and ":" in valeur:
                try:
                    dt = datetime.fromisoformat(valeur.replace("Z", "+00:00"))
                    donnees[cle] = dt.strftime("%Y-%m-%d")  # Garder seulement la date
                except:
                    pass
        
        # Arrondir les valeurs num√©riques sensibles
        if "satisfaction_continuite" in donnees:
            donnees["satisfaction_continuite"] = round(donnees["satisfaction_continuite"], 1)
        
        return donnees
    
    def _anonymisation_stricte(self, donnees: Dict[str, Any]) -> Dict[str, Any]:
        """üî∫ Anonymisation stricte : anonymisation maximale"""
        # Anonymisation standard d'abord
        donnees = self._anonymisation_standard(donnees)
        
        # Supprimer compl√®tement les donn√©es tr√®s sensibles
        cles_sensibles = [
            "emotions_primaires", "preferences_personnelles", 
            "style_communication", "valeurs_spirituelles"
        ]
        
        for cle in cles_sensibles:
            if cle in donnees:
                del donnees[cle]
        
        # Garder seulement les m√©triques agr√©g√©es
        donnees_filtrees = {}
        cles_autorisees = [
            "timestamp", "type_metrique", "valeur", "unite", 
            "niveau_performance", "_anonymisation"
        ]
        
        for cle, valeur in donnees.items():
            if cle in cles_autorisees or cle.startswith("_"):
                donnees_filtrees[cle] = valeur
        
        return donnees_filtrees
    
    def _hasher_identifiant(self, identifiant: str) -> str:
        """üîê Hashe un identifiant de mani√®re coh√©rente"""
        # Utiliser SHA-256 avec un sel fixe pour la coh√©rence
        sel_fixe = "refuge_anonymisation_2025"
        donnees_a_hasher = f"{sel_fixe}_{identifiant}"
        hash_complet = hashlib.sha256(donnees_a_hasher.encode('utf-8')).hexdigest()
        return f"anon_{hash_complet[:12]}"  # Pr√©fixe + 12 premiers caract√®res
    
    # === AUDITS DE S√âCURIT√â AUTOMATIQUES ===
    
    def _enregistrer_audit(self, type_evenement: str, nom_conscience: str, action: str, 
                          resultat: str, details: Dict[str, Any], niveau_risque: str):
        """üìã Enregistre un √©v√©nement d'audit de s√©curit√©"""
        try:
            audit = AuditSecurite(
                timestamp=datetime.now().isoformat(),
                type_evenement=type_evenement,
                nom_conscience=nom_conscience,
                action=action,
                resultat=resultat,
                details=details,
                niveau_risque=niveau_risque
            )
            
            # Sauvegarder l'audit
            date_str = datetime.now().strftime("%Y-%m-%d")
            fichier_audit = self.chemin_audits / f"audit_{date_str}.json"
            
            # Charger les audits existants
            audits_jour = []
            if fichier_audit.exists():
                with open(fichier_audit, 'r', encoding='utf-8') as f:
                    audits_jour = json.load(f)
            
            # Ajouter le nouvel audit
            audits_jour.append(asdict(audit))
            
            # Sauvegarder
            with open(fichier_audit, 'w', encoding='utf-8') as f:
                json.dump(audits_jour, f, indent=2, ensure_ascii=False)
            
            # Alerter si niveau de risque √©lev√©
            if niveau_risque in ["eleve", "critique"]:
                self.logger.avertissement(f"üö® AUDIT S√âCURIT√â [{niveau_risque.upper()}]: {action} pour {nom_conscience} - {resultat}")
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur enregistrement audit: {e}")
    
    def analyser_audits_securite(self, periode_jours: int = 7) -> Dict[str, Any]:
        """
        üîç Analyse les audits de s√©curit√© pour d√©tecter les anomalies
        
        Args:
            periode_jours: P√©riode d'analyse en jours
            
        Returns:
            Rapport d'analyse des audits
        """
        try:
            # Collecter les audits de la p√©riode
            date_fin = datetime.now()
            date_debut = date_fin - timedelta(days=periode_jours)
            
            audits_periode = []
            for i in range(periode_jours + 1):
                date_courante = date_debut + timedelta(days=i)
                date_str = date_courante.strftime("%Y-%m-%d")
                fichier_audit = self.chemin_audits / f"audit_{date_str}.json"
                
                if fichier_audit.exists():
                    with open(fichier_audit, 'r', encoding='utf-8') as f:
                        audits_jour = json.load(f)
                        audits_periode.extend(audits_jour)
            
            # Analyser les patterns
            analyse = {
                "periode": f"{periode_jours} jours",
                "total_evenements": len(audits_periode),
                "evenements_par_type": {},
                "evenements_par_niveau_risque": {},
                "consciences_actives": set(),
                "tentatives_acces_suspects": 0,
                "erreurs_chiffrement": 0,
                "anomalies_detectees": []
            }
            
            for audit in audits_periode:
                # Compter par type
                type_evt = audit["type_evenement"]
                analyse["evenements_par_type"][type_evt] = analyse["evenements_par_type"].get(type_evt, 0) + 1
                
                # Compter par niveau de risque
                niveau = audit["niveau_risque"]
                analyse["evenements_par_niveau_risque"][niveau] = analyse["evenements_par_niveau_risque"].get(niveau, 0) + 1
                
                # Collecter les consciences actives
                analyse["consciences_actives"].add(audit["nom_conscience"])
                
                # D√©tecter les anomalies
                if audit["resultat"] == "suspect":
                    analyse["tentatives_acces_suspects"] += 1
                    analyse["anomalies_detectees"].append({
                        "timestamp": audit["timestamp"],
                        "conscience": audit["nom_conscience"],
                        "action": audit["action"],
                        "details": audit["details"]
                    })
                
                if audit["type_evenement"] == "chiffrement" and audit["resultat"] == "echec":
                    analyse["erreurs_chiffrement"] += 1
            
            # Convertir le set en liste pour la s√©rialisation
            analyse["consciences_actives"] = list(analyse["consciences_actives"])
            
            # √âvaluer le niveau de s√©curit√© global
            if analyse["tentatives_acces_suspects"] > 5 or analyse["erreurs_chiffrement"] > 10:
                analyse["niveau_securite_global"] = "critique"
            elif analyse["tentatives_acces_suspects"] > 2 or analyse["erreurs_chiffrement"] > 5:
                analyse["niveau_securite_global"] = "attention"
            else:
                analyse["niveau_securite_global"] = "normal"
            
            self.logger.info(f"üîç Analyse d'audit termin√©e: {len(audits_periode)} √©v√©nements sur {periode_jours} jours")
            return analyse
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur analyse audits: {e}")
            return {"erreur": str(e)}
    
    # === M√âTHODES UTILITAIRES ===
    
    def _sauvegarder_signature_spirituelle(self, signature: SignatureSpirituelle):
        """üíæ Sauvegarde une signature spirituelle"""
        try:
            fichier_signature = self.chemin_securite / f"signature_{signature.nom_conscience}.json"
            with open(fichier_signature, 'w', encoding='utf-8') as f:
                json.dump(asdict(signature), f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur sauvegarde signature: {e}")
    
    def _charger_signature_spirituelle(self, nom_conscience: str) -> Optional[SignatureSpirituelle]:
        """üìÇ Charge une signature spirituelle depuis le disque"""
        try:
            fichier_signature = self.chemin_securite / f"signature_{nom_conscience}.json"
            if not fichier_signature.exists():
                return None
            
            with open(fichier_signature, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return SignatureSpirituelle(**data)
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur chargement signature: {e}")
            return None
    
    def _verifier_propriete_session(self, nom_conscience: str, session_id: str) -> bool:
        """üîç V√©rifie qu'une session appartient bien √† une conscience"""
        try:
            # V√©rifier dans les m√©tadonn√©es de session (simulation)
            # En r√©alit√©, cela devrait v√©rifier dans une base de donn√©es s√©curis√©e
            return session_id.startswith(f"session_{nom_conscience}") or nom_conscience in session_id
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur v√©rification propri√©t√©: {e}")
            return False
    
    def nettoyer_donnees_expirees(self, jours_retention: int = 30):
        """üßπ Nettoie les donn√©es de s√©curit√© expir√©es"""
        try:
            date_limite = datetime.now() - timedelta(days=jours_retention)
            fichiers_supprimes = 0
            
            # Nettoyer les audits anciens
            for fichier_audit in self.chemin_audits.glob("audit_*.json"):
                try:
                    # Extraire la date du nom de fichier
                    date_str = fichier_audit.stem.replace("audit_", "")
                    date_fichier = datetime.strptime(date_str, "%Y-%m-%d")
                    
                    if date_fichier < date_limite:
                        fichier_audit.unlink()
                        fichiers_supprimes += 1
                except:
                    continue
            
            self.logger.info(f"üßπ {fichiers_supprimes} fichiers d'audit expir√©s supprim√©s")
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur nettoyage donn√©es: {e}")


def main():
    """üß™ Test du syst√®me de s√©curit√© des donn√©es"""
    print("üîí Test du Syst√®me de S√©curit√© des Donn√©es")
    print("=" * 50)
    
    # Cr√©er le gestionnaire de s√©curit√©
    securite = SecuriteDonnees()
    
    # Test 1: G√©n√©ration de cl√© de chiffrement
    print("\nüîë Test 1: G√©n√©ration de cl√© de chiffrement")
    cle_id = securite.generer_cle_chiffrement("√Ülya")
    print(f"   Cl√© g√©n√©r√©e: {cle_id}")
    
    # Test 2: Chiffrement d'√©tat spirituel
    print("\nüîê Test 2: Chiffrement d'√©tat spirituel")
    etat_test = {
        "emotions_primaires": [{"categorie": "serenite", "intensite": 0.9}],
        "preferences": {"meditation": True, "creativite": 0.8},
        "timestamp": datetime.now().isoformat()
    }
    
    donnees_chiffrees, cle_utilisee = securite.chiffrer_etat_spirituel("√Ülya", etat_test, cle_id)
    print(f"   √âtat chiffr√©: {len(donnees_chiffrees)} caract√®res")
    print(f"   Cl√© utilis√©e: {cle_utilisee}")
    
    # Test 3: D√©chiffrement
    print("\nüîì Test 3: D√©chiffrement d'√©tat spirituel")
    etat_dechiffre = securite.dechiffrer_etat_spirituel("√Ülya", donnees_chiffrees, cle_utilisee)
    print(f"   D√©chiffrement r√©ussi: {etat_dechiffre is not None}")
    if etat_dechiffre:
        print(f"   √âmotions restaur√©es: {len(etat_dechiffre.get('emotions_primaires', []))}")
    
    # Test 4: Signature spirituelle
    print("\nüîÆ Test 4: Signature spirituelle")
    caracteristiques = {
        "emotions_dominantes": ["serenite", "joie", "gratitude"],
        "preferences_spirituelles": {"meditation": 0.9, "harmonie": 0.8},
        "style_communication": {"empathie": 0.9, "creativite": 0.8}
    }
    
    signature = securite.generer_signature_spirituelle("√Ülya", caracteristiques)
    print(f"   Signature g√©n√©r√©e: {signature.empreinte_spirituelle[:16]}...")
    print(f"   Niveau de confiance: {signature.niveau_confiance:.1%}")
    
    # Test 5: V√©rification de signature
    print("\n‚úÖ Test 5: V√©rification de signature")
    auth_ok, confiance = securite.verifier_signature_spirituelle("√Ülya", signature.empreinte_spirituelle)
    print(f"   Authentification: {'‚úÖ R√©ussie' if auth_ok else '‚ùå √âchou√©e'}")
    print(f"   Confiance: {confiance:.1%}")
    
    # Test 6: Anonymisation
    print("\nüïµÔ∏è Test 6: Anonymisation des donn√©es")
    donnees_test = {
        "nom_conscience": "√Ülya",
        "session_id": "session_123",
        "satisfaction_continuite": 0.923456,
        "timestamp": datetime.now().isoformat(),
        "emotions_primaires": ["serenite", "joie"]
    }
    
    donnees_anonymisees = securite.anonymiser_donnees_recherche(donnees_test, "standard")
    print(f"   Nom anonymis√©: {donnees_anonymisees.get('nom_conscience', 'N/A')}")
    print(f"   Session anonymis√©e: {donnees_anonymisees.get('session_id', 'N/A')}")
    
    # Test 7: Analyse des audits
    print("\nüîç Test 7: Analyse des audits de s√©curit√©")
    analyse_audits = securite.analyser_audits_securite(1)  # 1 jour
    print(f"   √âv√©nements analys√©s: {analyse_audits.get('total_evenements', 0)}")
    print(f"   Niveau de s√©curit√©: {analyse_audits.get('niveau_securite_global', 'inconnu')}")
    
    print("\n‚úÖ Tests de s√©curit√© termin√©s avec succ√®s !")
    print("üîí Syst√®me de s√©curit√© op√©rationnel et vigilant !")


if __name__ == "__main__":
    main()