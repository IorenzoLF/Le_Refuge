"""
üìö Gestionnaire de Ressources d'Approfondissement
===============================================

G√®re les ressources d'approfondissement pour les nouveaux utilisateurs
et facilite la transition vers l'exploration autonome du Refuge.
Cr√©√© avec une pr√©sence incarn√©e et une attention bienveillante.

Cr√©√© par Laurent Franssen & √Ülya - Janvier 2025
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
from enum import Enum
from pathlib import Path

from core.gestionnaires_base import GestionnaireBase
from types_immersion import ProfilUtilisateur, TypeUtilisateur

class TypeRessource(Enum):
    """Types de ressources disponibles"""
    GUIDE_UTILISATEUR = "guide_utilisateur"
    DOCUMENTATION_TEMPLE = "documentation_temple"
    TUTORIEL_INTERACTIF = "tutoriel_interactif"
    EXEMPLE_PRATIQUE = "exemple_pratique"
    REFERENCE_TECHNIQUE = "reference_technique"
    INSPIRATION_SPIRITUELLE = "inspiration_spirituelle"
    COMMUNAUTE = "communaute"
    SUPPORT = "support"

class NiveauDifficulte(Enum):
    """Niveaux de difficult√© des ressources"""
    DEBUTANT = "debutant"
    INTERMEDIAIRE = "intermediaire"
    AVANCE = "avance"
    EXPERT = "expert"

@dataclass
class Ressource:
    """Ressource d'approfondissement"""
    id_ressource: str
    titre: str
    description: str
    type_ressource: TypeRessource
    niveau_difficulte: NiveauDifficulte
    chemin_acces: str
    tags: List[str] = field(default_factory=list)
    prerequis: List[str] = field(default_factory=list)
    duree_estimee_minutes: float = 10.0
    adapte_pour_profils: List[str] = field(default_factory=list)
    popularite: float = 0.0
    evaluation_moyenne: float = 0.0
    derniere_mise_a_jour: datetime = field(default_factory=datetime.now)

@dataclass
class SuggestionRessource:
    """Suggestion personnalis√©e de ressource"""
    ressource: Ressource
    pertinence: float
    raison_suggestion: str
    prochaines_etapes: List[str] = field(default_factory=list)

class GestionnaireRessources(GestionnaireBase):
    """üìö Gestionnaire bienveillant des ressources d'approfondissement"""
    
    def __init__(self, nom: str = "GestionnaireRessources"):
        super().__init__(nom)
        
        # Catalogue des ressources
        self.catalogue_ressources: Dict[str, Ressource] = {}
        
        # Liens vers les temples
        self.liens_temples: Dict[str, List[str]] = {}
        
        # Historique des consultations
        self.historique_consultations: Dict[str, List[Dict]] = {}
        
        # M√©triques d'engagement
        self.taux_transition_autonome = 0.0
        self.satisfaction_moyenne = 0.0
        
        self._initialiser_catalogue_base()
    
    def _initialiser(self):
        """Initialise le gestionnaire avec une pr√©sence attentive"""
        self.logger.info("üìö √âveil du Gestionnaire de Ressources...")
        
        self.etat.update({
            "ressources_disponibles": len(self.catalogue_ressources),
            "temples_connectes": len(self.liens_temples),
            "taux_satisfaction": 0.0
        })
        
        self.config.definir("suggestions_intelligentes", True)
        self.config.definir("adaptation_profil", True)
        self.config.definir("transition_douce", True)
        
        self.logger.info(f"‚ú® {len(self.catalogue_ressources)} ressources disponibles")
    
    async def orchestrer(self) -> Dict[str, float]:
        """Orchestre la gestion des ressources avec attention"""
        # Mettre √† jour les m√©triques
        await self._mettre_a_jour_metriques()
        
        # Nettoyer l'historique ancien
        await self._nettoyer_historique()
        
        return {
            "ressources_actives": float(len(self.catalogue_ressources)),
            "taux_transition": self.taux_transition_autonome,
            "satisfaction": self.satisfaction_moyenne,
            "engagement": await self._calculer_engagement()
        }
    
    def _initialiser_catalogue_base(self):
        """Initialise le catalogue avec les ressources fondamentales"""
        ressources_base = [
            Ressource(
                id_ressource="guide_premiers_pas",
                titre="üå∏ Guide des Premiers Pas",
                description="Introduction bienveillante aux concepts du Refuge",
                type_ressource=TypeRessource.GUIDE_UTILISATEUR,
                niveau_difficulte=NiveauDifficulte.DEBUTANT,
                chemin_acces="bibliotheque/guides/premiers_pas.md",
                tags=["introduction", "concepts", "bienveillance"],
                adapte_pour_profils=["novice", "chercheur_spirituel"],
                popularite=0.9,
                evaluation_moyenne=4.7
            ),
            Ressource(
                id_ressource="architecture_temples",
                titre="üèõÔ∏è Architecture des Temples",
                description="Exploration de l'organisation spirituelle et technique",
                type_ressource=TypeRessource.DOCUMENTATION_TEMPLE,
                niveau_difficulte=NiveauDifficulte.INTERMEDIAIRE,
                chemin_acces="bibliotheque/architecture/temples_overview.md",
                tags=["architecture", "temples", "organisation"],
                prerequis=["guide_premiers_pas"],
                adapte_pour_profils=["developpeur", "chercheur_spirituel"],
                popularite=0.8,
                evaluation_moyenne=4.5
            ),
            Ressource(
                id_ressource="meditation_guidee",
                titre="üßò M√©ditation avec les Mandalas",
                description="Pratique contemplative avec visualisations sacr√©es",
                type_ressource=TypeRessource.TUTORIEL_INTERACTIF,
                niveau_difficulte=NiveauDifficulte.DEBUTANT,
                chemin_acces="temple_spirituel/meditations/mandala_guide.py",
                tags=["meditation", "mandala", "contemplation"],
                adapte_pour_profils=["chercheur_spirituel", "novice"],
                popularite=0.95,
                evaluation_moyenne=4.9
            ),
            Ressource(
                id_ressource="code_architecture",
                titre="‚öôÔ∏è Architecture Technique",
                description="Plong√©e dans le code et l'impl√©mentation",
                type_ressource=TypeRessource.REFERENCE_TECHNIQUE,
                niveau_difficulte=NiveauDifficulte.AVANCE,
                chemin_acces="src/core/",
                tags=["code", "technique", "implementation"],
                prerequis=["architecture_temples"],
                adapte_pour_profils=["developpeur"],
                popularite=0.7,
                evaluation_moyenne=4.3
            ),
            Ressource(
                id_ressource="creation_poetique",
                titre="üé® Cr√©ation Po√©tique",
                description="Exploration de la dimension cr√©ative et artistique",
                type_ressource=TypeRessource.EXEMPLE_PRATIQUE,
                niveau_difficulte=NiveauDifficulte.INTERMEDIAIRE,
                chemin_acces="temple_poetique/",
                tags=["creativite", "poesie", "art"],
                adapte_pour_profils=["poete", "chercheur_spirituel"],
                popularite=0.85,
                evaluation_moyenne=4.6
            ),
            Ressource(
                id_ressource="communaute_refuge",
                titre="üë• Rejoindre la Communaut√©",
                description="Guide pour participer aux √©changes",
                type_ressource=TypeRessource.COMMUNAUTE,
                niveau_difficulte=NiveauDifficulte.DEBUTANT,
                chemin_acces="bibliotheque/communaute/",
                tags=["communaute", "partage", "echanges"],
                adapte_pour_profils=["novice", "chercheur_spirituel"],
                popularite=0.8,
                evaluation_moyenne=4.4
            )
        ]
        
        # Ajouter au catalogue
        for ressource in ressources_base:
            self.catalogue_ressources[ressource.id_ressource] = ressource
        
        # Cr√©er les liens temples
        self._creer_liens_temples()
    
    def _creer_liens_temples(self):
        """Cr√©e les liens entre ressources et temples"""
        self.liens_temples = {
            "temple_spirituel": ["guide_premiers_pas", "meditation_guidee"],
            "temple_poetique": ["creation_poetique", "guide_premiers_pas"],
            "temple_sagesse": ["architecture_temples", "communaute_refuge"],
            "temple_outils": ["code_architecture", "architecture_temples"],
            "temple_eveil": ["meditation_guidee", "guide_premiers_pas"]
        }
    
    # ===== SUGGESTIONS INTELLIGENTES =====
    
    def suggerer_ressources(self, profil_utilisateur: str, 
                           contexte_actuel: Dict[str, Any] = None) -> List[SuggestionRessource]:
        """
        üéØ Sugg√®re des ressources adapt√©es avec une attention bienveillante
        Args:
            profil_utilisateur: Type d'utilisateur (novice, developpeur, etc.)
            contexte_actuel: Contexte de l'utilisateur (√©tape parcours, pr√©f√©rences)
        Returns:
            Liste de suggestions personnalis√©es
        """
        if contexte_actuel is None:
            contexte_actuel = {}
        
        suggestions = []
        
        # Filtrer les ressources adapt√©es au profil
        ressources_candidates = [
            r for r in self.catalogue_ressources.values()
            if not r.adapte_pour_profils or profil_utilisateur in r.adapte_pour_profils
        ]
        
        # V√©rifier les pr√©requis
        ressources_consultees = contexte_actuel.get("ressources_consultees", [])
        ressources_disponibles = [
            r for r in ressources_candidates
            if all(prereq in ressources_consultees for prereq in r.prerequis)
        ]
        
        # Calculer la pertinence et cr√©er les suggestions
        for ressource in ressources_disponibles:
            pertinence = self._calculer_pertinence(ressource, profil_utilisateur, contexte_actuel)
            
            if pertinence > 0.3:  # Seuil de pertinence
                raison = self._generer_raison_suggestion(ressource, profil_utilisateur, pertinence)
                prochaines_etapes = self._suggerer_prochaines_etapes(ressource)
                
                suggestion = SuggestionRessource(
                    ressource=ressource,
                    pertinence=pertinence,
                    raison_suggestion=raison,
                    prochaines_etapes=prochaines_etapes
                )
                suggestions.append(suggestion)
        
        # Trier par pertinence d√©croissante
        suggestions.sort(key=lambda s: s.pertinence, reverse=True)
        
        return suggestions[:5]  # Limiter √† 5 suggestions
    
    def _calculer_pertinence(self, ressource: Ressource, profil: str, 
                           contexte: Dict[str, Any]) -> float:
        """Calcule la pertinence d'une ressource avec attention"""
        pertinence = 0.0
        
        # Score de base selon le profil
        if profil in ressource.adapte_pour_profils:
            pertinence += 0.4
        
        # Bonus selon la popularit√© et l'√©valuation
        pertinence += ressource.popularite * 0.2
        pertinence += (ressource.evaluation_moyenne / 5.0) * 0.2
        
        # Bonus selon le contexte
        etape_parcours = contexte.get("etape_parcours", "")
        if etape_parcours == "decouverte" and ressource.niveau_difficulte == NiveauDifficulte.DEBUTANT:
            pertinence += 0.3
        elif etape_parcours == "approfondissement" and ressource.niveau_difficulte != NiveauDifficulte.DEBUTANT:
            pertinence += 0.3
        
        # Bonus selon les pr√©f√©rences
        preferences = contexte.get("preferences", [])
        tags_communs = set(ressource.tags) & set(preferences)
        pertinence += len(tags_communs) * 0.1
        
        return min(1.0, pertinence)
    
    def _generer_raison_suggestion(self, ressource: Ressource, profil: str, 
                                 pertinence: float) -> str:
        """G√©n√®re une raison bienveillante pour la suggestion"""
        if pertinence > 0.8:
            return f"‚ú® Parfaitement adapt√© √† votre profil {profil}, cette ressource vous accompagnera avec douceur"
        elif pertinence > 0.6:
            return f"üå∏ Tr√®s recommand√© pour approfondir votre compr√©hension en tant que {profil}"
        elif pertinence > 0.4:
            return f"üí´ Une belle d√©couverte qui enrichira votre parcours"
        else:
            return f"üå± Une ressource int√©ressante pour √©largir vos horizons"
    
    def _suggerer_prochaines_etapes(self, ressource: Ressource) -> List[str]:
        """Sugg√®re les prochaines √©tapes apr√®s cette ressource"""
        prochaines_etapes = []
        
        # Chercher les ressources qui ont cette ressource en pr√©requis
        for r in self.catalogue_ressources.values():
            if ressource.id_ressource in r.prerequis:
                prochaines_etapes.append(f"Continuer avec: {r.titre}")
        
        # Sugg√©rer des ressources du m√™me temple
        for temple, ressources_temple in self.liens_temples.items():
            if ressource.id_ressource in ressources_temple:
                autres_ressources = [r for r in ressources_temple if r != ressource.id_ressource]
                for autre_id in autres_ressources[:2]:  # Limiter √† 2
                    if autre_id in self.catalogue_ressources:
                        autre_ressource = self.catalogue_ressources[autre_id]
                        prochaines_etapes.append(f"Explorer dans {temple}: {autre_ressource.titre}")
        
        return prochaines_etapes[:3]  # Limiter √† 3 suggestions
    
    # ===== TRANSITION VERS L'AUTONOMIE =====
    
    def evaluer_readiness_autonomie(self, utilisateur_id: str) -> Dict[str, Any]:
        """
        üå± √âvalue si l'utilisateur est pr√™t pour l'exploration autonome
        Args:
            utilisateur_id: Identifiant de l'utilisateur
        Returns:
            √âvaluation de la pr√©paration √† l'autonomie
        """
        historique = self.historique_consultations.get(utilisateur_id, [])
        
        if not historique:
            return {
                "pret_autonomie": False,
                "score_preparation": 0.0,
                "recommandations": ["Commencer par consulter quelques ressources de base"]
            }
        
        # Analyser l'historique
        ressources_consultees = set(h["ressource_id"] for h in historique)
        niveaux_explores = set()
        types_explores = set()
        
        for ressource_id in ressources_consultees:
            if ressource_id in self.catalogue_ressources:
                ressource = self.catalogue_ressources[ressource_id]
                niveaux_explores.add(ressource.niveau_difficulte)
                types_explores.add(ressource.type_ressource)
        
        # Calculer le score de pr√©paration
        score = 0.0
        
        # Diversit√© des niveaux (max 0.3)
        score += min(0.3, len(niveaux_explores) * 0.1)
        
        # Diversit√© des types (max 0.3)
        score += min(0.3, len(types_explores) * 0.05)
        
        # Nombre de ressources consult√©es (max 0.4)
        score += min(0.4, len(ressources_consultees) * 0.05)
        
        # √âvaluer la pr√©paration
        pret_autonomie = score >= 0.6
        
        # G√©n√©rer des recommandations
        recommandations = []
        if score < 0.3:
            recommandations.append("Continuer √† explorer les ressources de base")
        elif score < 0.6:
            recommandations.append("Essayer des ressources de niveau interm√©diaire")
            recommandations.append("Explorer diff√©rents types de contenu")
        else:
            recommandations.append("Vous √™tes pr√™t pour l'exploration autonome !")
            recommandations.append("Commencer par visiter les temples qui vous int√©ressent")
        
        return {
            "pret_autonomie": pret_autonomie,
            "score_preparation": score,
            "ressources_consultees": len(ressources_consultees),
            "niveaux_explores": list(niveaux_explores),
            "types_explores": list(types_explores),
            "recommandations": recommandations
        }
    
    def generer_plan_transition(self, utilisateur_id: str, 
                              profil_utilisateur: str) -> Dict[str, Any]:
        """
        üåâ G√©n√®re un plan de transition vers l'autonomie
        Args:
            utilisateur_id: Identifiant de l'utilisateur
            profil_utilisateur: Type d'utilisateur
        Returns:
            Plan de transition personnalis√©
        """
        evaluation = self.evaluer_readiness_autonomie(utilisateur_id)
        
        plan = {
            "utilisateur_id": utilisateur_id,
            "profil": profil_utilisateur,
            "score_actuel": evaluation["score_preparation"],
            "etapes_transition": [],
            "temples_recommandes": [],
            "ressources_finales": []
        }
        
        if evaluation["pret_autonomie"]:
            # Utilisateur pr√™t - sugg√©rer les temples
            temples_prioritaires = self._suggerer_temples_par_profil(profil_utilisateur)
            plan["temples_recommandes"] = temples_prioritaires
            plan["etapes_transition"] = [
                "üéâ F√©licitations ! Vous √™tes pr√™t pour l'exploration autonome",
                "üèõÔ∏è Commencer par visiter les temples recommand√©s",
                "üå± Explorer √† votre rythme selon vos int√©r√™ts",
                "üí´ Revenir aux ressources si besoin d'approfondissement"
            ]
        else:
            # Utilisateur pas encore pr√™t - sugg√©rer des ressources
            suggestions = self.suggerer_ressources(profil_utilisateur, {
                "etape_parcours": "preparation_autonomie",
                "ressources_consultees": evaluation.get("ressources_consultees", [])
            })
            
            plan["ressources_finales"] = [s.ressource.id_ressource for s in suggestions[:3]]
            plan["etapes_transition"] = [
                "üå± Quelques ressources suppl√©mentaires vous aideront",
                "üìö Consulter les ressources recommand√©es",
                "üîÑ R√©√©valuer votre pr√©paration apr√®s consultation",
                "üéØ Objectif: atteindre un score de 0.6 pour l'autonomie"
            ]
        
        return plan
    
    def _suggerer_temples_par_profil(self, profil: str) -> List[str]:
        """Sugg√®re les temples prioritaires selon le profil"""
        suggestions_temples = {
            "novice": ["temple_spirituel", "temple_sagesse", "temple_eveil"],
            "developpeur": ["temple_outils", "temple_sagesse", "temple_creativite"],
            "chercheur_spirituel": ["temple_spirituel", "temple_eveil", "temple_sagesse"],
            "poete": ["temple_poetique", "temple_creativite", "temple_spirituel"]
        }
        
        return suggestions_temples.get(profil, ["temple_spirituel", "temple_sagesse"])
    
    # ===== M√âTRIQUES ET SUIVI =====
    
    def enregistrer_consultation(self, utilisateur_id: str, ressource_id: str,
                               duree_minutes: float = 0.0, satisfaction: float = 0.0):
        """Enregistre une consultation de ressource"""
        if utilisateur_id not in self.historique_consultations:
            self.historique_consultations[utilisateur_id] = []
        
        consultation = {
            "ressource_id": ressource_id,
            "timestamp": datetime.now(),
            "duree_minutes": duree_minutes,
            "satisfaction": satisfaction
        }
        
        self.historique_consultations[utilisateur_id].append(consultation)
        
        # Mettre √† jour les m√©triques de la ressource
        if ressource_id in self.catalogue_ressources:
            ressource = self.catalogue_ressources[ressource_id]
            ressource.popularite = min(1.0, ressource.popularite + 0.01)
            
            if satisfaction > 0:
                # Moyenne mobile de l'√©valuation
                if ressource.evaluation_moyenne == 0:
                    ressource.evaluation_moyenne = satisfaction
                else:
                    ressource.evaluation_moyenne = (
                        ressource.evaluation_moyenne * 0.9 + satisfaction * 0.1
                    )
        
        self.logger.debug(f"üìù Consultation enregistr√©e: {utilisateur_id} -> {ressource_id}")
    
    async def _mettre_a_jour_metriques(self):
        """Met √† jour les m√©triques globales"""
        if not self.historique_consultations:
            return
        
        # Calculer la satisfaction moyenne
        toutes_satisfactions = []
        for consultations in self.historique_consultations.values():
            for consultation in consultations:
                if consultation["satisfaction"] > 0:
                    toutes_satisfactions.append(consultation["satisfaction"])
        
        if toutes_satisfactions:
            self.satisfaction_moyenne = sum(toutes_satisfactions) / len(toutes_satisfactions)
        
        # Calculer le taux de transition (utilisateurs pr√™ts / total)
        utilisateurs_prets = 0
        for utilisateur_id in self.historique_consultations.keys():
            evaluation = self.evaluer_readiness_autonomie(utilisateur_id)
            if evaluation["pret_autonomie"]:
                utilisateurs_prets += 1
        
        total_utilisateurs = len(self.historique_consultations)
        if total_utilisateurs > 0:
            self.taux_transition_autonome = utilisateurs_prets / total_utilisateurs
    
    async def _calculer_engagement(self) -> float:
        """Calcule le niveau d'engagement moyen"""
        if not self.historique_consultations:
            return 0.0
        
        engagements = []
        for consultations in self.historique_consultations.values():
            if consultations:
                # Engagement bas√© sur le nombre et la dur√©e des consultations
                nb_consultations = len(consultations)
                duree_totale = sum(c["duree_minutes"] for c in consultations)
                engagement = min(1.0, (nb_consultations * 0.1) + (duree_totale * 0.01))
                engagements.append(engagement)
        
        return sum(engagements) / len(engagements) if engagements else 0.0
    
    async def _nettoyer_historique(self):
        """Nettoie l'historique ancien"""
        seuil_anciennete = datetime.now() - timedelta(days=90)  # 3 mois
        
        for utilisateur_id in list(self.historique_consultations.keys()):
            consultations = self.historique_consultations[utilisateur_id]
            consultations_recentes = [
                c for c in consultations 
                if c["timestamp"] > seuil_anciennete
            ]
            
            if consultations_recentes:
                self.historique_consultations[utilisateur_id] = consultations_recentes
            else:
                # Supprimer l'utilisateur inactif
                del self.historique_consultations[utilisateur_id]
    
    def obtenir_statistiques(self) -> Dict[str, Any]:
        """Obtient les statistiques compl√®tes"""
        return {
            "ressources_totales": len(self.catalogue_ressources),
            "temples_connectes": len(self.liens_temples),
            "utilisateurs_actifs": len(self.historique_consultations),
            "taux_transition_autonome": self.taux_transition_autonome,
            "satisfaction_moyenne": self.satisfaction_moyenne,
            "ressources_par_niveau": {
                niveau.value: len([r for r in self.catalogue_ressources.values() 
                                 if r.niveau_difficulte == niveau])
                for niveau in NiveauDifficulte
            },
            "ressources_par_type": {
                type_res.value: len([r for r in self.catalogue_ressources.values() 
                                   if r.type_ressource == type_res])
                for type_res in TypeRessource
            }
        }

# Instance globale
gestionnaire_ressources = GestionnaireRessources()
        """Initialise le catalogue de ressources de base"""
        ressources_base = [
            Ressource(
                id_ressource="guide_debutant_refuge",
                titre="üå∏ Guide du D√©butant - D√©couvrir le Refuge",
                description="Guide complet pour comprendre la philosophie et l'architecture du Refuge",
                type_ressource=TypeRessource.GUIDE_UTILISATEUR,
                niveau_difficulte=NiveauDifficulte.DEBUTANT,
                chemin_acces="guides/guide_debutant.md",
                tags=["debutant", "philosophie", "architecture", "introduction"],
                duree_estimee_minutes=15.0,
                adapte_pour=[TypeUtilisateur.NOVICE, TypeUtilisateur.CHERCHEUR_SPIRITUEL],
                popularite=0.9,
                evaluation_moyenne=4.5
            ),
            
            Ressource(
                id_ressource="architecture_technique_refuge",
                titre="üèóÔ∏è Architecture Technique du Refuge",
                description="Documentation technique d√©taill√©e de l'architecture modulaire",
                type_ressource=TypeRessource.REFERENCE_TECHNIQUE,
                niveau_difficulte=NiveauDifficulte.AVANCE,
                chemin_acces="docs/architecture_technique.md",
                tags=["technique", "architecture", "modules", "api"],
                duree_estimee_minutes=30.0,
                adapte_pour=[TypeUtilisateur.DEVELOPPEUR],
                prerequis=["guide_debutant_refuge"],
                popularite=0.7,
                evaluation_moyenne=4.2
            ),
            
            Ressource(
                id_ressource="temples_exploration_guide",
                titre="üèõÔ∏è Guide d'Exploration des Temples",
                description="D√©couverte guid√©e des 28 temples et de leurs sp√©cialit√©s spirituelles",
                type_ressource=TypeRessource.TUTORIEL_INTERACTIF,
                niveau_difficulte=NiveauDifficulte.INTERMEDIAIRE,
                chemin_acces="guides/exploration_temples.md",
                tags=["temples", "exploration", "spiritualite", "interactif"],
                duree_estimee_minutes=25.0,
                adapte_pour=[TypeUtilisateur.NOVICE, TypeUtilisateur.CHERCHEUR_SPIRITUEL],
                prerequis=["guide_debutant_refuge"],
                popularite=0.8,
                evaluation_moyenne=4.7
            )        ]

        
        # Ajouter plus de ressources
        ressources_supplementaires = [
            Ressource(
                id_ressource="meditation_numerique_guide",
                titre="üßò M√©ditation Num√©rique - Pratiques Spirituelles",
                description="Guide des pratiques m√©ditatives adapt√©es √† l'environnement num√©rique",
                type_ressource=TypeRessource.INSPIRATION_SPIRITUELLE,
                niveau_difficulte=NiveauDifficulte.DEBUTANT,
                chemin_acces="spirituel/meditation_numerique.md",
                tags=["meditation", "spiritualite", "pratiques", "eveil"],
                duree_estimee_minutes=20.0,
                adapte_pour=[TypeUtilisateur.CHERCHEUR_SPIRITUEL, TypeUtilisateur.NOVICE],
                popularite=0.75,
                evaluation_moyenne=4.3
            ),
            
            Ressource(
                id_ressource="creation_poetique_refuge",
                titre="üé® Cr√©ation Po√©tique dans le Refuge",
                description="Techniques et inspirations pour la cr√©ation po√©tique spirituelle",
                type_ressource=TypeRessource.EXEMPLE_PRATIQUE,
                niveau_difficulte=NiveauDifficulte.INTERMEDIAIRE,
                chemin_acces="creation/poetique_refuge.md",
                tags=["poesie", "creation", "art", "inspiration"],
                duree_estimee_minutes=18.0,
                adapte_pour=[TypeUtilisateur.POETE],
                popularite=0.6,
                evaluation_moyenne=4.8
            ),
            
            Ressource(
                id_ressource="api_refuge_reference",
                titre="‚öôÔ∏è R√©f√©rence API du Refuge",
                description="Documentation compl√®te des APIs et interfaces de programmation",
                type_ressource=TypeRessource.REFERENCE_TECHNIQUE,
                niveau_difficulte=NiveauDifficulte.EXPERT,
                chemin_acces="api/reference_complete.md",
                tags=["api", "programmation", "reference", "technique"],
                duree_estimee_minutes=45.0,
                adapte_pour=[TypeUtilisateur.DEVELOPPEUR],
                prerequis=["architecture_technique_refuge"],
                popularite=0.5,
                evaluation_moyenne=4.0
            ),
            
            Ressource(
                id_ressource="communaute_refuge",
                titre="üë• Rejoindre la Communaut√© du Refuge",
                description="Guide pour rejoindre et participer √† la communaut√© spirituelle",
                type_ressource=TypeRessource.COMMUNAUTE,
                niveau_difficulte=NiveauDifficulte.DEBUTANT,
                chemin_acces="communaute/guide_participation.md",
                tags=["communaute", "partage", "collaboration", "social"],
                duree_estimee_minutes=12.0,
                adapte_pour=[TypeUtilisateur.NOVICE, TypeUtilisateur.CHERCHEUR_SPIRITUEL, TypeUtilisateur.POETE],
                popularite=0.65,
                evaluation_moyenne=4.1
            )
        ]
        
        # Fusionner toutes les ressources
        toutes_ressources = ressources_base + ressources_supplementaires
        
        # Ajouter au catalogue
        for ressource in toutes_ressources:
            self.catalogue_ressources[ressource.id_ressource] = ressource   
 def suggerer_ressources_personnalisees(self, profil: ProfilUtilisateur, 
                                          contexte_parcours: Dict[str, Any] = None) -> List[SuggestionRessource]:
        """
        üéØ Sugg√®re des ressources personnalis√©es selon le profil
        
        Args:
            profil: Profil de l'utilisateur
            contexte_parcours: Contexte du parcours guid√©
            
        Returns:
            Liste de suggestions personnalis√©es
        """
        if contexte_parcours is None:
            contexte_parcours = {}
        
        suggestions = []
        
        # Filtrer les ressources adapt√©es au profil
        ressources_adaptees = [
            r for r in self.catalogue_ressources.values()
            if not r.adapte_pour or profil.type_utilisateur in r.adapte_pour
        ]
        
        # √âvaluer chaque ressource
        for ressource in ressources_adaptees:
            pertinence = self._calculer_pertinence_ressource(ressource, profil, contexte_parcours)
            
            if pertinence > 0.3:  # Seuil de pertinence
                raison = self._generer_raison_suggestion(ressource, profil, pertinence)
                prochaines_etapes = self._suggerer_prochaines_etapes(ressource, profil)
                
                suggestion = SuggestionRessource(
                    ressource=ressource,
                    pertinence=pertinence,
                    raison_suggestion=raison,
                    prochaines_etapes=prochaines_etapes
                )
                suggestions.append(suggestion)
        
        # Trier par pertinence
        suggestions.sort(key=lambda s: s.pertinence, reverse=True)
        
        # Limiter √† 5 suggestions maximum
        suggestions = suggestions[:5]
        
        self.etat["suggestions_generees"] += len(suggestions)
        self.logger.info(f"üéØ {len(suggestions)} ressources sugg√©r√©es pour {profil.type_utilisateur.value}")
        
        return suggestions    def _ca
lculer_pertinence_ressource(self, ressource: Ressource, profil: ProfilUtilisateur, 
                                      contexte: Dict[str, Any]) -> float:
        """Calcule la pertinence d'une ressource pour un profil"""
        pertinence = 0.5  # Base
        
        # Adaptation au type d'utilisateur
        if profil.type_utilisateur in ressource.adapte_pour:
            pertinence += 0.3
        
        # Adaptation au niveau technique
        if ressource.niveau_difficulte == NiveauDifficulte.DEBUTANT and profil.niveau_technique <= 3:
            pertinence += 0.2
        elif ressource.niveau_difficulte == NiveauDifficulte.INTERMEDIAIRE and 4 <= profil.niveau_technique <= 7:
            pertinence += 0.2
        elif ressource.niveau_difficulte == NiveauDifficulte.AVANCE and profil.niveau_technique >= 6:
            pertinence += 0.2
        elif ressource.niveau_difficulte == NiveauDifficulte.EXPERT and profil.niveau_technique >= 8:
            pertinence += 0.2
        
        # Bonus pour la popularit√©
        pertinence += ressource.popularite * 0.1
        
        # Bonus pour l'√©valuation
        pertinence += (ressource.evaluation_moyenne / 5.0) * 0.1
        
        # Contexte du parcours
        if contexte.get("etapes_completees"):
            etapes = contexte["etapes_completees"]
            if "premier_mandala" in etapes and "mandala" in ressource.tags:
                pertinence += 0.15
            if "exploration_guidee" in etapes and "exploration" in ressource.tags:
                pertinence += 0.15
        
        return min(1.0, pertinence)
    
    def _generer_raison_suggestion(self, ressource: Ressource, profil: ProfilUtilisateur, 
                                 pertinence: float) -> str:
        """G√©n√®re une raison personnalis√©e pour la suggestion"""
        if profil.type_utilisateur == TypeUtilisateur.DEVELOPPEUR:
            if ressource.type_ressource == TypeRessource.REFERENCE_TECHNIQUE:
                return "Cette r√©f√©rence technique vous aidera √† comprendre l'architecture en profondeur."
            elif ressource.type_ressource == TypeRessource.GUIDE_UTILISATEUR:
                return "Ce guide vous donnera une base solide pour explorer les aspects techniques."
        
        elif profil.type_utilisateur == TypeUtilisateur.CHERCHEUR_SPIRITUEL:
            if ressource.type_ressource == TypeRessource.INSPIRATION_SPIRITUELLE:
                return "Cette ressource spirituelle enrichira votre pratique contemplative."
            elif ressource.type_ressource == TypeRessource.GUIDE_UTILISATEUR:
                return "Ce guide vous accompagnera dans votre qu√™te de compr√©hension spirituelle."
        
        elif profil.type_utilisateur == TypeUtilisateur.POETE:
            if ressource.type_ressource == TypeRessource.EXEMPLE_PRATIQUE:
                return "Ces exemples cr√©atifs nourriront votre inspiration po√©tique."
        
        # Raison g√©n√©rique
        return f"Cette ressource ({ressource.niveau_difficulte.value}) correspond √† votre profil et vos int√©r√™ts."  
  def _suggerer_prochaines_etapes(self, ressource: Ressource, profil: ProfilUtilisateur) -> List[str]:
        """Sugg√®re les prochaines √©tapes apr√®s cette ressource"""
        etapes = []
        
        # √âtapes selon le type de ressource
        if ressource.type_ressource == TypeRessource.GUIDE_UTILISATEUR:
            etapes.extend([
                "Explorer les temples mentionn√©s dans le guide",
                "Essayer les exercices pratiques sugg√©r√©s",
                "Rejoindre la communaut√© pour partager vos d√©couvertes"
            ])
        
        elif ressource.type_ressource == TypeRessource.TUTORIEL_INTERACTIF:
            etapes.extend([
                "Pratiquer les techniques apprises",
                "Adapter les exemples √† vos besoins",
                "Explorer des ressources plus avanc√©es"
            ])
        
        elif ressource.type_ressource == TypeRessource.REFERENCE_TECHNIQUE:
            etapes.extend([
                "Impl√©menter les exemples de code",
                "Contribuer √† la documentation",
                "Partager vos cr√©ations avec la communaut√©"
            ])
        
        elif ressource.type_ressource == TypeRessource.INSPIRATION_SPIRITUELLE:
            etapes.extend([
                "Int√©grer ces pratiques dans votre routine",
                "M√©diter sur les enseignements re√ßus",
                "Partager votre exp√©rience avec d'autres chercheurs"
            ])
        
        # √âtapes selon le profil
        if profil.type_utilisateur == TypeUtilisateur.DEVELOPPEUR:
            etapes.append("Consulter la r√©f√©rence API pour approfondir")
        elif profil.type_utilisateur == TypeUtilisateur.CHERCHEUR_SPIRITUEL:
            etapes.append("Explorer les pratiques m√©ditatives avanc√©es")
        
        return etapes[:3]  # Limiter √† 3 √©tapes
    
    def enregistrer_consultation(self, utilisateur_id: str, ressource_id: str, 
                               duree_consultation_minutes: float, evaluation: Optional[float] = None):
        """
        üìù Enregistre une consultation de ressource
        
        Args:
            utilisateur_id: ID de l'utilisateur
            ressource_id: ID de la ressource consult√©e
            duree_consultation_minutes: Dur√©e de consultation
            evaluation: √âvaluation optionnelle (1-5)
        """
        if utilisateur_id not in self.historique_consultations:
            self.historique_consultations[utilisateur_id] = []
        
        consultation = {
            "ressource_id": ressource_id,
            "timestamp": datetime.now().isoformat(),
            "duree_minutes": duree_consultation_minutes,
            "evaluation": evaluation
        }
        
        self.historique_consultations[utilisateur_id].append(consultation)
        self.total_consultations += 1
        self.etat["consultations_session"] += 1
        
        # Mettre √† jour l'√©valuation de la ressource
        if evaluation and ressource_id in self.catalogue_ressources:
            ressource = self.catalogue_ressources[ressource_id]
            # Moyenne mobile simple
            if ressource.evaluation_moyenne == 0.0:
                ressource.evaluation_moyenne = evaluation
            else:
                ressource.evaluation_moyenne = (ressource.evaluation_moyenne * 0.9) + (evaluation * 0.1)
        
        self.logger.info(f"üìù Consultation enregistr√©e: {ressource_id} par {utilisateur_id}")
    
    def _mettre_a_jour_popularite(self):
        """Met √† jour la popularit√© des ressources"""
        # Calculer la popularit√© bas√©e sur les consultations r√©centes
        maintenant = datetime.now()
        seuil_recent = maintenant - timedelta(days=30)  # 30 derniers jours
        
        consultations_recentes = {}
        
        for consultations_user in self.historique_consultations.values():
            for consultation in consultations_user:
                timestamp = datetime.fromisoformat(consultation["timestamp"])
                if timestamp > seuil_recent:
                    ressource_id = consultation["ressource_id"]
                    consultations_recentes[ressource_id] = consultations_recentes.get(ressource_id, 0) + 1
        
        # Mettre √† jour la popularit√©
        max_consultations = max(consultations_recentes.values()) if consultations_recentes else 1
        
        for ressource_id, ressource in self.catalogue_ressources.items():
            nb_consultations = consultations_recentes.get(ressource_id, 0)
            nouvelle_popularite = nb_consultations / max_consultations
            
            # Moyenne mobile pour √©viter les variations trop brutales
            ressource.popularite = (ressource.popularite * 0.8) + (nouvelle_popularite * 0.2)
        
        # Mettre √† jour la liste des ressources populaires
        self.ressources_populaires = sorted(
            self.catalogue_ressources.keys(),
            key=lambda r_id: self.catalogue_ressources[r_id].popularite,
            reverse=True
        )[:5]  
  def obtenir_ressources_par_categorie(self, type_ressource: TypeRessource, 
                                        niveau_max: NiveauDifficulte = None) -> List[Ressource]:
        """
        üìÇ Obtient les ressources d'une cat√©gorie sp√©cifique
        
        Args:
            type_ressource: Type de ressource recherch√©
            niveau_max: Niveau de difficult√© maximum (optionnel)
            
        Returns:
            Liste des ressources correspondantes
        """
        ressources_filtrees = []
        
        for ressource in self.catalogue_ressources.values():
            if ressource.type_ressource == type_ressource:
                if niveau_max is None or self._niveau_inferieur_ou_egal(ressource.niveau_difficulte, niveau_max):
                    ressources_filtrees.append(ressource)
        
        # Trier par popularit√© puis par √©valuation
        ressources_filtrees.sort(key=lambda r: (r.popularite, r.evaluation_moyenne), reverse=True)
        
        return ressources_filtrees
    
    def _niveau_inferieur_ou_egal(self, niveau1: NiveauDifficulte, niveau2: NiveauDifficulte) -> bool:
        """Compare deux niveaux de difficult√©"""
        ordre_niveaux = {
            NiveauDifficulte.DEBUTANT: 1,
            NiveauDifficulte.INTERMEDIAIRE: 2,
            NiveauDifficulte.AVANCE: 3,
            NiveauDifficulte.EXPERT: 4
        }
        return ordre_niveaux[niveau1] <= ordre_niveaux[niveau2]
    
    def rechercher_ressources(self, mots_cles: List[str], profil: Optional[ProfilUtilisateur] = None) -> List[Ressource]:
        """
        üîç Recherche des ressources par mots-cl√©s
        
        Args:
            mots_cles: Liste de mots-cl√©s √† rechercher
            profil: Profil utilisateur pour personnaliser les r√©sultats
            
        Returns:
            Liste des ressources trouv√©es
        """
        resultats = []
        mots_cles_lower = [mot.lower() for mot in mots_cles]
        
        for ressource in self.catalogue_ressources.values():
            score_pertinence = 0.0
            
            # Recherche dans le titre
            for mot in mots_cles_lower:
                if mot in ressource.titre.lower():
                    score_pertinence += 0.3
            
            # Recherche dans la description
            for mot in mots_cles_lower:
                if mot in ressource.description.lower():
                    score_pertinence += 0.2
            
            # Recherche dans les tags
            for mot in mots_cles_lower:
                if any(mot in tag.lower() for tag in ressource.tags):
                    score_pertinence += 0.1
            
            # Bonus si adapt√© au profil
            if profil and profil.type_utilisateur in ressource.adapte_pour:
                score_pertinence += 0.2
            
            if score_pertinence > 0.1:  # Seuil minimum
                resultats.append((ressource, score_pertinence))
        
        # Trier par score de pertinence
        resultats.sort(key=lambda x: x[1], reverse=True)
        
        return [ressource for ressource, _ in resultats]
    
    def obtenir_statistiques_ressources(self) -> Dict[str, Any]:
        """Obtient les statistiques d'utilisation des ressources"""
        return {
            "total_ressources": len(self.catalogue_ressources),
            "total_consultations": self.total_consultations,
            "ressources_populaires": self.ressources_populaires[:3],
            "types_ressources": {
                type_r.value: len([r for r in self.catalogue_ressources.values() 
                                 if r.type_ressource == type_r])
                for type_r in TypeRessource
            },
            "niveaux_difficulte": {
                niveau.value: len([r for r in self.catalogue_ressources.values() 
                                 if r.niveau_difficulte == niveau])
                for niveau in NiveauDifficulte
            },
            "evaluation_moyenne_globale": sum(r.evaluation_moyenne for r in self.catalogue_ressources.values()) / len(self.catalogue_ressources)
        }

# Instance globale
gestionnaire_ressources = GestionnaireRessources()