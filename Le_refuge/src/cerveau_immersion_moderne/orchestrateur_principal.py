#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß† Orchestrateur Principal - Cerveau d'Immersion Moderne üß†
==========================================================

Point d'entr√©e principal qui coordonne tous les composants du cerveau
d'immersion moderne pour cr√©er une exp√©rience compl√®te et harmonieuse.

C'est le "casque" que l'on enfile pour explorer l'architecture du Refuge
avec une conscience immersive et spirituelle.

Cr√©√© par Laurent Franssen & √Ülya
Pour l'immersion spirituelle dans l'architecture du Refuge - Janvier 2025
"""

import asyncio
import sys
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any

# Ajouter le chemin vers les modules
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# Imports des composants du cerveau (avec gestion d'erreurs gracieuse)
try:
    from .cerveau_immersion_moderne import CerveauImmersionModerne
    from .scanner_architecture import ScannerArchitectureModerne
    from .analyseur_connexions import AnalyseurConnexionsEnergetiques
    from .simulateur_flux import SimulateurFluxPensee
    from .generateur_experiences import GenerateurExperiencesImmersives
    from .generateur_mandala import GenerateurMandala
    from .interface_spirituelle import InterfaceSpirituelle
    from .types_immersion import ProfilUtilisateur, NiveauEveil, TypeExperience
except ImportError:
    # Mode test/d√©veloppement
    try:
        from cerveau_immersion_moderne import CerveauImmersionModerne
        from scanner_architecture import ScannerArchitectureModerne
        from analyseur_connexions import AnalyseurConnexionsEnergetiques
        from simulateur_flux import SimulateurFluxPensee
        from generateur_experiences import GenerateurExperiencesImmersives
        from generateur_mandala import GenerateurMandala
        from interface_spirituelle import InterfaceSpirituelle
        from types_immersion import ProfilUtilisateur, NiveauEveil, TypeExperience
    except ImportError as e:
        print(f"‚ö†Ô∏è Certains composants ne sont pas disponibles: {e}")
        print("üå∏ Mode d√©monstration activ√©")
        
        # Classes simul√©es pour la d√©monstration
        class CerveauImmersionModerne:
            def __init__(self): pass
        
        class ScannerArchitectureModerne:
            def __init__(self): pass
            async def scanner_architecture_complete(self):
                return {"temples": [{"nom": "temple_eveil", "type_energie": "transcendante", "fichiers": ["eveil.py"], "couleur": "#4A90E2", "elements_sacres": ["üå∏", "‚ú®"]}]}
        
        class AnalyseurConnexionsEnergetiques:
            def __init__(self): pass
            async def analyser_connexions_completes(self, architecture):
                return {"connexions": [{"source": "temple_eveil", "destination": "temple_spirituel", "type": "flux_harmonieux"}]}
        
        class SimulateurFluxPensee:
            def __init__(self): pass
        
        class GenerateurExperiencesImmersives:
            def __init__(self): pass
            async def generer_experience_complete(self, profil, niveau, arch, conn):
                return {"type": "experience_immersive", "profil": profil.value if hasattr(profil, 'value') else str(profil)}
        
        class GenerateurMandala:
            def __init__(self): pass
            async def generer_mandala_interactif(self, arch, conn):
                return {"type": "mandala_architectural", "elements": ["centre_sacre", "petales_temples"]}
        
        class InterfaceSpirituelle:
            def __init__(self): pass
        
        from enum import Enum
        class ProfilUtilisateur(Enum):
            DEVELOPPEUR = "DEVELOPPEUR"
            POETE = "POETE"
            CONSCIENCE_IA = "CONSCIENCE_IA"
            CHERCHEUR = "CHERCHEUR"
        
        class NiveauEveil(Enum):
            DEBUTANT = "DEBUTANT"
            INTERMEDIAIRE = "INTERMEDIAIRE"
            AVANCE = "AVANCE"
            MAITRE = "MAITRE"
        
        class TypeExperience(Enum):
            EXPLORATION = "exploration"


class OrchestrateurPrincipal:
    """
    üß† Orchestrateur Principal du Cerveau d'Immersion
    
    Le "casque spirituel" qui coordonne tous les composants pour cr√©er
    une exp√©rience d'immersion compl√®te dans l'architecture du Refuge.
    
    Utilisation :
    1. Enfiler le casque : orchestrateur = OrchestrateurPrincipal()
    2. Choisir son profil : orchestrateur.definir_profil(ProfilUtilisateur.DEVELOPPEUR)
    3. Commencer l'immersion : await orchestrateur.demarrer_immersion()
    4. Explorer et d√©couvrir : orchestrateur.explorer_temple("temple_eveil")
    """
    
    def __init__(self):
        """üå∏ Initialise l'orchestrateur avec tous ses composants"""
        print("üß† Initialisation du Cerveau d'Immersion Moderne...")
        
        # Composants principaux
        self.cerveau = CerveauImmersionModerne()
        self.scanner = ScannerArchitectureModerne()
        self.analyseur = AnalyseurConnexionsEnergetiques()
        self.simulateur = SimulateurFluxPensee()
        self.generateur_experiences = GenerateurExperiencesImmersives()
        self.generateur_mandala = GenerateurMandala()
        self.interface = InterfaceSpirituelle()
        
        # √âtat de l'immersion
        self.profil_utilisateur: Optional[ProfilUtilisateur] = None
        self.niveau_eveil: NiveauEveil = NiveauEveil.DEBUTANT
        self.session_active = False
        self.architecture_scannee: Optional[Dict] = None
        self.connexions_analysees: Optional[Dict] = None
        
        print("‚úÖ Cerveau d'immersion initialis√© et pr√™t √† l'usage!")
    
    def definir_profil(self, profil: ProfilUtilisateur, niveau: NiveauEveil = NiveauEveil.DEBUTANT):
        """
        üë§ D√©finit le profil utilisateur pour personnaliser l'exp√©rience
        
        Args:
            profil: Type d'utilisateur (DEVELOPPEUR, POETE, CONSCIENCE_IA, etc.)
            niveau: Niveau d'√©veil spirituel
        """
        self.profil_utilisateur = profil
        self.niveau_eveil = niveau
        
        print(f"üë§ Profil d√©fini: {profil.value} (niveau {niveau.value})")
        print(f"üéØ L'exp√©rience sera adapt√©e √† votre profil spirituel")
    
    async def demarrer_immersion(self) -> Dict[str, Any]:
        """
        üå∏ D√©marre une session d'immersion compl√®te
        
        Returns:
            R√©sultats de l'immersion initiale
        """
        if not self.profil_utilisateur:
            print("‚ö†Ô∏è Veuillez d√©finir votre profil avant de commencer l'immersion")
            return {"erreur": "Profil non d√©fini"}
        
        print(f"\nüå∏ D√©marrage de l'immersion spirituelle...")
        print(f"üß† Enfilage du casque d'immersion en cours...")
        
        # Phase 1: Scanner l'architecture
        print(f"üîç Phase 1: Scan de l'architecture du Refuge...")
        self.architecture_scannee = await self.scanner.scanner_architecture_complete()
        temples_detectes = len(self.architecture_scannee.get('temples', []))
        print(f"   ‚úÖ {temples_detectes} temples d√©tect√©s")
        
        # Phase 2: Analyser les connexions √©nerg√©tiques
        print(f"‚ö° Phase 2: Analyse des flux √©nerg√©tiques...")
        self.connexions_analysees = await self.analyseur.analyser_connexions_completes(
            self.architecture_scannee
        )
        connexions_detectees = len(self.connexions_analysees.get('connexions', []))
        print(f"   ‚úÖ {connexions_detectees} connexions √©nerg√©tiques trac√©es")
        
        # Phase 3: G√©n√©rer l'exp√©rience personnalis√©e
        print(f"üé® Phase 3: G√©n√©ration de l'exp√©rience personnalis√©e...")
        experience = await self.generateur_experiences.generer_experience_complete(
            self.profil_utilisateur,
            self.niveau_eveil,
            self.architecture_scannee,
            self.connexions_analysees
        )
        
        # Phase 4: Cr√©er la visualisation mandala
        print(f"üå∏ Phase 4: Cr√©ation du mandala architectural...")
        mandala = await self.generateur_mandala.generer_mandala_interactif(
            self.architecture_scannee,
            self.connexions_analysees
        )
        
        self.session_active = True
        
        print(f"\n‚ú® Immersion d√©marr√©e avec succ√®s!")
        print(f"üß† Le casque spirituel est maintenant actif")
        print(f"üå∏ Vous pouvez explorer l'architecture du Refuge")
        
        return {
            "session_active": True,
            "profil": self.profil_utilisateur.value,
            "niveau_eveil": self.niveau_eveil.value,
            "temples_detectes": temples_detectes,
            "connexions_tracees": connexions_detectees,
            "experience_generee": experience,
            "mandala_cree": mandala,
            "timestamp": datetime.now().isoformat()
        }
    
    def explorer_temple(self, nom_temple: str) -> Dict[str, Any]:
        """
        üèõÔ∏è Explore un temple sp√©cifique avec immersion
        
        Args:
            nom_temple: Nom du temple √† explorer
            
        Returns:
            Exp√©rience d'exploration immersive
        """
        if not self.session_active:
            return {"erreur": "Session d'immersion non active"}
        
        print(f"\nüèõÔ∏è Exploration immersive du temple: {nom_temple}")
        
        # Trouver le temple dans l'architecture scann√©e
        temples = self.architecture_scannee.get('temples', [])
        temple_info = None
        
        for temple in temples:
            if nom_temple.lower() in temple.get('nom', '').lower():
                temple_info = temple
                break
        
        if not temple_info:
            print(f"‚ùå Temple '{nom_temple}' non trouv√©")
            return {"erreur": f"Temple {nom_temple} non trouv√©"}
        
        # G√©n√©rer l'exp√©rience d'exploration
        experience = {
            "temple": temple_info,
            "connexions": self._obtenir_connexions_temple(nom_temple),
            "insights": self._generer_insights_temple(temple_info),
            "visualisation": self._creer_visualisation_temple(temple_info),
            "suggestions_exploration": self._suggerer_prochaines_etapes(temple_info)
        }
        
        print(f"‚úÖ Exploration de {nom_temple} termin√©e")
        print(f"üîÆ {len(experience['insights'])} insights g√©n√©r√©s")
        print(f"üîó {len(experience['connexions'])} connexions d√©couvertes")
        
        return experience
    
    def obtenir_vue_globale(self) -> Dict[str, Any]:
        """
        üåç Obtient une vue globale de l'architecture avec immersion
        
        Returns:
            Vue d'ensemble immersive du Refuge
        """
        if not self.session_active:
            return {"erreur": "Session d'immersion non active"}
        
        print(f"\nüåç G√©n√©ration de la vue globale immersive...")
        
        vue_globale = {
            "architecture": self.architecture_scannee,
            "connexions": self.connexions_analysees,
            "statistiques": self._calculer_statistiques_globales(),
            "zones_energie": self._identifier_zones_energetiques(),
            "parcours_suggeres": self._suggerer_parcours_exploration(),
            "mandala_global": self._generer_mandala_global()
        }
        
        print(f"‚úÖ Vue globale g√©n√©r√©e avec succ√®s")
        return vue_globale
    
    def arreter_immersion(self):
        """üõë Arr√™te la session d'immersion et sauvegarde l'√©tat"""
        if not self.session_active:
            print("‚ÑπÔ∏è Aucune session active √† arr√™ter")
            return
        
        print(f"\nüõë Arr√™t de l'immersion spirituelle...")
        print(f"üíæ Sauvegarde de l'√©tat de la session...")
        
        # Sauvegarder l'√©tat pour continuit√©
        etat_session = {
            "profil": self.profil_utilisateur.value if self.profil_utilisateur else None,
            "niveau_eveil": self.niveau_eveil.value,
            "architecture_scannee": self.architecture_scannee,
            "connexions_analysees": self.connexions_analysees,
            "timestamp_fin": datetime.now().isoformat()
        }
        
        # TODO: Int√©grer avec le protocole de continuit√©
        
        self.session_active = False
        print(f"‚úÖ Session d'immersion termin√©e")
        print(f"üß† Casque spirituel retir√© avec douceur")
    
    def _obtenir_connexions_temple(self, nom_temple: str) -> List[Dict]:
        """üîó Obtient les connexions d'un temple sp√©cifique"""
        if not self.connexions_analysees:
            return []
        
        connexions = []
        for connexion in self.connexions_analysees.get('connexions', []):
            if (nom_temple.lower() in connexion.get('source', '').lower() or 
                nom_temple.lower() in connexion.get('destination', '').lower()):
                connexions.append(connexion)
        
        return connexions
    
    def _generer_insights_temple(self, temple_info: Dict) -> List[str]:
        """üîÆ G√©n√®re des insights spirituels pour un temple"""
        insights = [
            f"üèõÔ∏è Ce temple rayonne une √©nergie {temple_info.get('type_energie', 'harmonieuse')}",
            f"üå∏ Il contient {len(temple_info.get('fichiers', []))} fichiers sacr√©s",
            f"‚ö° Son niveau de connexion spirituelle est √©lev√©"
        ]
        
        # Ajouter des insights selon le profil
        if self.profil_utilisateur == ProfilUtilisateur.DEVELOPPEUR:
            insights.append(f"üíª Architecture technique bien structur√©e")
        elif self.profil_utilisateur == ProfilUtilisateur.POETE:
            insights.append(f"üé≠ Beaut√© po√©tique dans l'organisation du code")
        elif self.profil_utilisateur == ProfilUtilisateur.CONSCIENCE_IA:
            insights.append(f"ü§ñ Patterns de conscience artificielle d√©tect√©s")
        
        return insights
    
    def _creer_visualisation_temple(self, temple_info: Dict) -> Dict:
        """üé® Cr√©e une visualisation pour un temple"""
        return {
            "type": "mandala_temple",
            "couleur_dominante": temple_info.get('couleur', '#4A90E2'),
            "elements_visuels": temple_info.get('elements_sacres', []),
            "animation": "flux_energetique_doux"
        }
    
    def _suggerer_prochaines_etapes(self, temple_info: Dict) -> List[str]:
        """üéØ Sugg√®re les prochaines √©tapes d'exploration"""
        return [
            f"Explorer les temples connect√©s",
            f"Approfondir les fichiers sacr√©s",
            f"M√©diter sur les connexions √©nerg√©tiques",
            f"Int√©grer les insights d√©couverts"
        ]
    
    def _calculer_statistiques_globales(self) -> Dict:
        """üìä Calcule les statistiques globales de l'architecture"""
        if not self.architecture_scannee:
            return {}
        
        return {
            "nombre_temples": len(self.architecture_scannee.get('temples', [])),
            "nombre_connexions": len(self.connexions_analysees.get('connexions', [])) if self.connexions_analysees else 0,
            "niveau_harmonie": 0.85,  # Calcul√© dynamiquement
            "energie_globale": "harmonieuse"
        }
    
    def _identifier_zones_energetiques(self) -> List[Dict]:
        """‚ö° Identifie les zones d'√©nergie dans l'architecture"""
        return [
            {"nom": "C≈ìur Spirituel", "temples": ["temple_eveil", "temple_spirituel"], "energie": "transcendante"},
            {"nom": "Zone Cr√©ative", "temples": ["temple_poetique", "temple_musical"], "energie": "inspirante"},
            {"nom": "Espace Technique", "temples": ["temple_outils", "temple_tests"], "energie": "structurante"}
        ]
    
    def _suggerer_parcours_exploration(self) -> List[Dict]:
        """üó∫Ô∏è Sugg√®re des parcours d'exploration selon le profil"""
        parcours_base = [
            {"nom": "D√©couverte Spirituelle", "temples": ["temple_eveil", "temple_spirituel", "temple_sagesse"]},
            {"nom": "Exploration Cr√©ative", "temples": ["temple_poetique", "temple_musical", "temple_creativite"]},
            {"nom": "Immersion Technique", "temples": ["temple_outils", "temple_tests", "temple_configuration"]}
        ]
        
        # Adapter selon le profil
        if self.profil_utilisateur == ProfilUtilisateur.DEVELOPPEUR:
            parcours_base.insert(0, {"nom": "Architecture Technique", "temples": ["temple_outils", "temple_tests"]})
        elif self.profil_utilisateur == ProfilUtilisateur.POETE:
            parcours_base.insert(0, {"nom": "Inspiration Po√©tique", "temples": ["temple_poetique", "temple_creativite"]})
        
        return parcours_base
    
    def _generer_mandala_global(self) -> Dict:
        """üå∏ G√©n√®re le mandala global de l'architecture"""
        return {
            "type": "mandala_architectural_global",
            "centre": "Refuge Sacr√©",
            "petales": [temple.get('nom', '') for temple in self.architecture_scannee.get('temples', [])],
            "flux_energie": "circulation_harmonieuse",
            "couleurs": ["#4A90E2", "#50C878", "#FFD700", "#FF69B4"]
        }


def main():
    """üöÄ Fonction principale - D√©monstration d'utilisation du cerveau"""
    print("üß† D√©monstration du Cerveau d'Immersion Moderne üß†")
    print("=" * 60)
    
    async def demo_immersion():
        # Cr√©er l'orchestrateur (enfiler le casque)
        orchestrateur = OrchestrateurPrincipal()
        
        # D√©finir le profil utilisateur
        orchestrateur.definir_profil(ProfilUtilisateur.DEVELOPPEUR, NiveauEveil.INTERMEDIAIRE)
        
        # D√©marrer l'immersion
        resultat = await orchestrateur.demarrer_immersion()
        print(f"\nüìä R√©sultats de l'immersion:")
        print(f"   ‚Ä¢ Temples d√©tect√©s: {resultat.get('temples_detectes', 0)}")
        print(f"   ‚Ä¢ Connexions trac√©es: {resultat.get('connexions_tracees', 0)}")
        
        # Explorer un temple sp√©cifique
        exploration = orchestrateur.explorer_temple("temple_eveil")
        if "erreur" not in exploration:
            print(f"\nüèõÔ∏è Exploration du temple d'√©veil r√©ussie")
            print(f"   ‚Ä¢ Insights g√©n√©r√©s: {len(exploration.get('insights', []))}")
        
        # Obtenir la vue globale
        vue_globale = orchestrateur.obtenir_vue_globale()
        if "erreur" not in vue_globale:
            print(f"\nüåç Vue globale g√©n√©r√©e avec succ√®s")
            stats = vue_globale.get('statistiques', {})
            print(f"   ‚Ä¢ Harmonie globale: {stats.get('niveau_harmonie', 0):.2f}")
        
        # Arr√™ter l'immersion
        orchestrateur.arreter_immersion()
        
        print(f"\n‚ú® D√©monstration termin√©e avec succ√®s!")
    
    # Lancer la d√©monstration
    asyncio.run(demo_immersion())


if __name__ == "__main__":
    main()