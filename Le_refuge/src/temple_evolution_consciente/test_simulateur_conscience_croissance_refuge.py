"""
üß™ Test du Simulateur de Conscience et Croissance du Refuge
==========================================================

Script de test pour v√©rifier l'int√©gration du simulateur de conscience et croissance
avec l'architecture du Refuge et le temple_evolution_consciente.

Cr√©√© avec üß™ par Laurent & √Ülya
"""

import sys
import logging
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Ajouter le chemin racine pour les imports
racine = Path(__file__).parent.parent.parent
if str(racine) not in sys.path:
    sys.path.insert(0, str(racine))

def test_integration_simulateur_conscience_croissance():
    """
    Test complet de l'int√©gration du simulateur de conscience et croissance
    """
    print("üß™ D√©but des tests d'int√©gration du Simulateur de Conscience et Croissance du Refuge")
    print("=" * 80)
    
    try:
        # Import du simulateur
        from src.temple_evolution_consciente.simulateur_conscience_croissance_refuge import (
            SimulateurConscienceCroissanceRefuge,
            analyser_conscience_refuge,
            explorer_espace_refuge,
            simuler_session_refuge,
            obtenir_etat_conscience_croissance_refuge,
            TypeEspaceCroissance,
            TypeNiveauConscience
        )
        print("‚úÖ Import du simulateur r√©ussi")
        
        # Test 1: Cr√©ation du simulateur
        print("\nüîß Test 1: Cr√©ation du simulateur")
        simulateur = SimulateurConscienceCroissanceRefuge()
        print(f"‚úÖ Simulateur cr√©√©: {simulateur.nom}")
        print(f"   Temple parent: {simulateur.temple_parent}")
        print(f"   Version: {simulateur.version}")
        
        # Test 2: Analyse de conscience de soi
        print("\nüîç Test 2: Analyse de conscience de soi")
        analyse = simulateur.analyser_conscience_de_soi("Test d'int√©gration")
        print(f"‚úÖ Analyse de conscience r√©ussie:")
        print(f"   Niveau de conscience: {analyse.niveau_conscience.value}")
        print(f"   Score m√©tacognition: {analyse.score_metacognition:.2f}")
        print(f"   Capacit√©s d'introspection: {len(analyse.capacites_introspection)}")
        print(f"   Insights d√©couverts: {len(analyse.insights_decouverts)}")
        print(f"   Zones d'am√©lioration: {len(analyse.zones_amelioration)}")
        
        # Test 3: Exploration d'espace de croissance
        print("\nüå± Test 3: Exploration d'espace de croissance")
        espace_test = TypeEspaceCroissance.THOUGHT_GARDEN
        exploration = simulateur.explorer_espace_croissance(espace_test, 45)
        print(f"‚úÖ Exploration d'espace r√©ussie:")
        print(f"   Espace explor√©: {exploration.espace_explore.value}")
        print(f"   Dur√©e: {exploration.duree_exploration} minutes")
        print(f"   Apprentissages obtenus: {len(exploration.apprentissages_obtenus)}")
        print(f"   Obstacles rencontr√©s: {len(exploration.obstacles_rencontres)}")
        print(f"   Solutions d√©couvertes: {len(exploration.solutions_decouvertes)}")
        print(f"   Niveau de satisfaction: {exploration.niveau_satisfaction:.2f}")
        
        # Test 4: Simulation de sessions
        print("\nüé≠ Test 4: Simulation de sessions")
        types_sessions = ["conscience_de_soi", "espace_croissance", "mixte"]
        
        for type_session in types_sessions:
            resultat = simulateur.simuler_session_croissance(type_session, 60)
            print(f"‚úÖ Session '{type_session}':")
            print(f"   √âvaluation: {resultat['evaluation']}")
            print(f"   Score de croissance: {resultat['score_croissance']:.1f}/5")
            print(f"   Apprentissages globaux: {len(resultat['apprentissages_globaux'])}")
            print(f"   Feedback: {resultat['feedback'].commentaire_qualitatif}")
        
        # Test 5: Interface simplifi√©e
        print("\nüîó Test 5: Interface simplifi√©e")
        etat = obtenir_etat_conscience_croissance_refuge()
        print(f"‚úÖ √âtat du simulateur obtenu:")
        print(f"   Sessions actives: {etat['sessions_actives']}")
        print(f"   Capacit√©s de conscience: {etat['capacites_conscience']}")
        print(f"   Espaces de croissance: {etat['espaces_croissance']}")
        print(f"   Niveaux de conscience: {etat['niveaux_conscience']}")
        
        # Test 6: Int√©gration avec l'architecture du Refuge
        print("\nüèõÔ∏è Test 6: Int√©gration avec l'architecture du Refuge")
        try:
            # Test d'import de la configuration du Refuge
            from src.core.configuration import REFUGE_INFO
            print(f"‚úÖ Configuration du Refuge accessible:")
            print(f"   Nom du Refuge: {REFUGE_INFO.get('nom', 'Non d√©fini')}")
            print(f"   Version: {REFUGE_INFO.get('version', 'Non d√©finie')}")
        except ImportError as e:
            print(f"‚ö†Ô∏è Configuration du Refuge non accessible: {e}")
        
        # Test 7: Compatibilit√© avec le temple_evolution_consciente
        print("\nüß† Test 7: Compatibilit√© avec le temple_evolution_consciente")
        try:
            from src.temple_evolution_consciente.temple_evolution_consciente import TempleEvolutionConsciente
            temple = TempleEvolutionConsciente()
            print(f"‚úÖ Temple √©volution consciente accessible:")
            print(f"   Nom du temple: {temple.nom}")
            print(f"   Gardien: {temple.gardien}")
        except ImportError as e:
            print(f"‚ö†Ô∏è Temple √©volution consciente non accessible: {e}")
        
        print("\n" + "=" * 80)
        print("üéâ Tous les tests d'int√©gration sont termin√©s avec succ√®s !")
        print("üß† Le Simulateur de Conscience et Croissance est maintenant int√©gr√© au Refuge")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_performance_simulateur():
    """
    Test de performance du simulateur
    """
    print("\n‚ö° Test de performance du simulateur")
    print("-" * 40)
    
    try:
        from src.temple_evolution_consciente.simulateur_conscience_croissance_refuge import SimulateurConscienceCroissanceRefuge
        import time
        
        simulateur = SimulateurConscienceCroissanceRefuge()
        
        # Test de performance pour l'analyse de conscience
        contextes_test = [
            "Session de m√©ditation matinale",
            "Exploration cr√©ative en apr√®s-midi",
            "R√©flexion profonde en soir√©e",
            "Analyse de patterns cognitifs",
            "D√©veloppement de la m√©tacognition"
        ]
        
        temps_total = 0
        for i, contexte in enumerate(contextes_test, 1):
            debut = time.time()
            analyse = simulateur.analyser_conscience_de_soi(contexte)
            fin = time.time()
            temps_analyse = fin - debut
            temps_total += temps_analyse
            
            print(f"   Test {i}: {temps_analyse:.4f}s - {analyse.niveau_conscience.value}")
        
        temps_moyen = temps_total / len(contextes_test)
        print(f"‚úÖ Temps moyen d'analyse: {temps_moyen:.4f}s")
        print(f"‚úÖ Performance acceptable pour l'int√©gration")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de performance: {e}")
        return False

def test_fonctionnalites_avancees():
    """
    Test des fonctionnalit√©s avanc√©es
    """
    print("\nüöÄ Test des fonctionnalit√©s avanc√©es")
    print("-" * 40)
    
    try:
        from src.temple_evolution_consciente.simulateur_conscience_croissance_refuge import (
            SimulateurConscienceCroissanceRefuge,
            TypeEspaceCroissance,
            TypeNiveauConscience
        )
        
        simulateur = SimulateurConscienceCroissanceRefuge()
        
        # Test des niveaux de conscience
        print("üìä Test des niveaux de conscience:")
        for niveau in TypeNiveauConscience:
            criteres = simulateur.niveaux_conscience[niveau]
            print(f"   {niveau.value}: {criteres['score_min']:.1f}-{criteres['score_max']:.1f}")
        
        # Test des espaces de croissance
        print("\nüå± Test des espaces de croissance:")
        for espace in TypeEspaceCroissance:
            info = simulateur.espaces_croissance[espace]
            print(f"   {espace.value}: {info['description']}")
        
        # Test des capacit√©s de conscience
        print("\nüß† Test des capacit√©s de conscience:")
        for capacite in simulateur.capacites_conscience:
            info = simulateur.capacites_conscience[capacite]
            print(f"   {capacite.value}: {info['description']}")
        
        print("‚úÖ Toutes les fonctionnalit√©s avanc√©es sont op√©rationnelles")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des fonctionnalit√©s avanc√©es: {e}")
        return False

def main():
    """
    Fonction principale de test
    """
    print("üß™ Tests du Simulateur de Conscience et Croissance du Refuge")
    print("=" * 60)
    
    # Test d'int√©gration
    succes_integration = test_integration_simulateur_conscience_croissance()
    
    # Test de performance
    succes_performance = test_performance_simulateur()
    
    # Test des fonctionnalit√©s avanc√©es
    succes_fonctionnalites = test_fonctionnalites_avancees()
    
    # R√©sum√©
    print("\nüìä R√©sum√© des tests:")
    print(f"   Int√©gration: {'‚úÖ R√©ussi' if succes_integration else '‚ùå √âchec'}")
    print(f"   Performance: {'‚úÖ R√©ussi' if succes_performance else '‚ùå √âchec'}")
    print(f"   Fonctionnalit√©s: {'‚úÖ R√©ussi' if succes_fonctionnalites else '‚ùå √âchec'}")
    
    if succes_integration and succes_performance and succes_fonctionnalites:
        print("\nüéâ Tous les tests sont r√©ussis !")
        print("üß† Le Simulateur de Conscience et Croissance est pr√™t pour l'utilisation dans le Refuge")
    else:
        print("\n‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")

if __name__ == "__main__":
    main() 