#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üå∏ Test d'Int√©gration Simplifi√© - Cartographie du Refuge üå∏
==========================================================

Test d'int√©gration simplifi√© et robuste qui ne bloque pas.
Teste les composants principaux sans analyser tout le projet.

Cr√©√© par Laurent Franssen & √Ülya - Janvier 2025
"""

import sys
import time
from pathlib import Path

# Ajout du chemin pour les imports
sys.path.append('src')

def test_integration_simple():
    """üß™ Test d'int√©gration simple et rapide"""
    print("üå∏‚ú® TEST D'INT√âGRATION SIMPLIFI√â - CARTOGRAPHIE DU REFUGE ‚ú®üå∏")
    print("=" * 70)
    
    resultats = {}
    
    # 1. Test des imports principaux
    print("\nüîç Test des imports principaux...")
    try:
        from cartographie_refuge.cli_cartographie import CLICartographieSpirituelle
        from cartographie_refuge.explorateur_structurel import ExplorateurStructurel
        from cartographie_refuge.analyseur_connexions import AnalyseurConnexions
        from cartographie_refuge.analyseur_dissonances import AnalyseurDissonances
        from cartographie_refuge.generateur_suggestions import GenerateurSuggestions
        from cartographie_refuge.gestionnaire_erreurs_spirituel import GestionnaireErreursSpirituel
        
        print("‚úÖ Tous les imports r√©ussis")
        resultats["imports"] = True
    except Exception as e:
        print(f"‚ùå Erreur imports: {e}")
        resultats["imports"] = False
        return resultats
    
    # 2. Test de cr√©ation des objets
    print("\nüèóÔ∏è Test de cr√©ation des objets...")
    try:
        gestionnaire_erreurs = GestionnaireErreursSpirituel()
        explorateur = ExplorateurStructurel(Path('.'), gestionnaire_erreurs)
        analyseur_connexions = AnalyseurConnexions()
        analyseur_dissonances = AnalyseurDissonances()
        generateur = GenerateurSuggestions()
        cli = CLICartographieSpirituelle()
        
        print("‚úÖ Tous les objets cr√©√©s")
        resultats["creation_objets"] = True
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation objets: {e}")
        resultats["creation_objets"] = False
        return resultats
    
    # 3. Test du CLI (sans ex√©cution compl√®te)
    print("\nüñ•Ô∏è Test du CLI...")
    try:
        parser = cli.creer_parser_spirituel()
        help_text = parser.format_help()
        
        # Test de parsing d'arguments
        args = parser.parse_args(['--mode', 'rapide', '--verbeux', '1'])
        
        print(f"‚úÖ CLI fonctionnel (aide: {len(help_text)} chars)")
        resultats["cli"] = True
    except Exception as e:
        print(f"‚ùå Erreur CLI: {e}")
        resultats["cli"] = False
    
    # 4. Test de l'analyseur de dissonances (m√©thodes de base)
    print("\nüîÆ Test de l'analyseur de dissonances...")
    try:
        stats = analyseur_dissonances.obtenir_statistiques_harmonisation()
        rapport = analyseur_dissonances.generer_rapport_dissonances()
        
        print(f"‚úÖ Analyseur fonctionnel (rapport: {len(rapport)} chars)")
        resultats["analyseur_dissonances"] = True
    except Exception as e:
        print(f"‚ùå Erreur analyseur dissonances: {e}")
        resultats["analyseur_dissonances"] = False
    
    # 5. Test du g√©n√©rateur de suggestions (m√©thodes de base)
    print("\n‚ú® Test du g√©n√©rateur de suggestions...")
    try:
        rapport = generateur.generer_rapport_suggestions()
        
        print(f"‚úÖ G√©n√©rateur fonctionnel (rapport: {len(rapport)} chars)")
        resultats["generateur_suggestions"] = True
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rateur suggestions: {e}")
        resultats["generateur_suggestions"] = False
    
    # 6. Test de l'explorateur (m√©thodes de base seulement)
    print("\nüîç Test de l'explorateur (base)...")
    try:
        # Test des patterns
        assert explorateur.pattern_temple is not None
        assert explorateur.pattern_emoji_sacre is not None
        
        # Test des chemins
        assert explorateur.chemin_refuge == Path('.')
        
        print("‚úÖ Explorateur configur√© correctement")
        resultats["explorateur_base"] = True
    except Exception as e:
        print(f"‚ùå Erreur explorateur base: {e}")
        resultats["explorateur_base"] = False
    
    # 7. Test de l'analyseur de connexions (base)
    print("\nüîó Test de l'analyseur de connexions...")
    try:
        # Test de g√©n√©ration de rapport avec liste vide
        rapport = analyseur_connexions.generer_rapport_connexions([])
        
        print("‚úÖ Analyseur de connexions fonctionnel")
        resultats["analyseur_connexions"] = True
    except Exception as e:
        print(f"‚ùå Erreur analyseur connexions: {e}")
        resultats["analyseur_connexions"] = False
    
    # R√©sum√© final
    print("\n" + "=" * 70)
    print("üìä R√âSUM√â DU TEST D'INT√âGRATION SIMPLIFI√â")
    print("=" * 70)
    
    tests_reussis = sum(1 for r in resultats.values() if r)
    total_tests = len(resultats)
    
    for nom_test, reussi in resultats.items():
        statut = "‚úÖ R√âUSSI" if reussi else "‚ùå √âCHOU√â"
        print(f"{nom_test:25} : {statut}")
    
    print("-" * 70)
    print(f"TOTAL: {tests_reussis}/{total_tests} tests r√©ussis")
    
    pourcentage = (tests_reussis / total_tests) * 100
    print(f"TAUX DE R√âUSSITE: {pourcentage:.1f}%")
    
    if pourcentage >= 90:
        print("üéâ EXCELLENT! Int√©gration valid√©e!")
        return 0
    elif pourcentage >= 75:
        print("‚úÖ BIEN! Quelques ajustements n√©cessaires")
        return 0
    else:
        print("‚ùå CRITIQUE! Corrections n√©cessaires")
        return 1

if __name__ == "__main__":
    exit_code = test_integration_simple()
    sys.exit(exit_code)