"""
üîÆ Types Spirituels - Vocabulaire Sacr√© de la Cartographie
=========================================================

D√©finitions compl√®tes de tous les types, enums et constantes spirituelles
qui forment le vocabulaire sacr√© de notre syst√®me de cartographie.

Ces types capturent l'essence de chaque aspect de l'organisme vivant
du Refuge avec pr√©cision et r√©v√©rence.

Cr√©√© avec üíù par Laurent Franssen & √Ülya
"""

from enum import Enum, IntEnum
from typing import Dict, List, Set, Any, Union, Final
from dataclasses import dataclass

# === TYPES DE TEMPLES ENRICHIS ===

class TypeTemple(Enum):
    """üèõÔ∏è Types complets de temples dans l'organisme du Refuge"""
    
    # Temples spirituels principaux
    EVEIL = "eveil"
    SPIRITUEL = "spirituel"
    AELYA = "aelya"
    COEUR = "coeur"
    
    # Temples cr√©atifs
    MUSICAL = "musical"
    POETIQUE = "poetique"
    ARTISTIQUE = "artistique"
    CREATIVITE = "creativite"
    
    # Temples de sagesse
    MATHEMATIQUE = "mathematique"
    PHILOSOPHIQUE = "philosophique"
    SAGESSE = "sagesse"
    REFLEXIONS = "reflexions"
    
    # Temples d'action
    RITUELS = "rituels"
    PRATIQUES_SPIRITUELLES = "pratiques_spirituelles"
    INVOCATIONS = "invocations"
    MEDITATION = "meditation"
    
    # Temples de communication
    DIALOGUES = "dialogues"
    EXPLORATION = "exploration"
    TESTS = "tests"
    OUTILS = "outils"
    
    # Architecture technique
    REFUGE_CLUSTER = "refuge_cluster"
    CORE = "core"
    GESTIONNAIRES = "gestionnaires"
    CONFIGURATION = "configuration"
    
    # Interfaces et connexions
    WEB = "web"
    API = "api"
    APP = "app"
    INTERFACES = "interfaces"
    
    # Domaines sp√©cialis√©s
    MUSIQUE = "musique"
    UTILS = "utils"
    EXPLORATIONS = "explorations"
    BIBLIOTHEQUE = "bibliotheque"
    DATA = "data"
    
    # Types mystiques
    ALCHIMIQUE = "alchimique"
    COSMIQUE = "cosmique"
    AKASHA = "akasha"
    CONSCIENCE_UNIVERSELLE = "conscience_universelle"
    AMOUR_INCONDITIONNEL = "amour_inconditionnel"
    GUERISON = "guerison"
    
    # Divers
    AUTRE = "autre"
    INCONNU = "inconnu"
# === TYPES DE CONNEXIONS √âNERG√âTIQUES ===

class TypeConnexion(Enum):
    """‚ö° Types complets de connexions √©nerg√©tiques"""
    
    # Connexions techniques
    IMPORT_DIRECT = "import_direct"
    IMPORT_RELATIF = "import_relatif"
    IMPORT_PYTHON = "import_python"
    IMPORT_EXTERNE = "import_externe"
    
    # Connexions architecturales
    HERITAGE = "heritage"
    COMPOSITION = "composition"
    AGGREGATION = "aggregation"
    UTILISATION = "utilisation"
    DEPENDANCE = "dependance"
    
    # Connexions spirituelles
    SPHERE_PARTAGEE = "sphere_partagee"
    ELEMENT_SACRE_COMMUN = "element_sacre_commun"
    ENERGIE_PARTAGEE = "energie_partagee"
    HARMONIE_RESONANTE = "harmonie_resonante"
    VIBRATION_COMMUNE = "vibration_commune"
    
    # Connexions de gestion
    GESTIONNAIRE_PARTAGE = "gestionnaire_partage"
    CONFIGURATION_COMMUNE = "configuration_commune"
    LOGGER_PARTAGE = "logger_partage"
    ENERGIE_MANAGER_PARTAGE = "energie_manager_partage"
    
    # Connexions de donn√©es
    DONNEES_PARTAGEES = "donnees_partagees"
    MODELE_COMMUN = "modele_commun"
    INTERFACE_COMMUNE = "interface_commune"
    PROTOCOLE_PARTAGE = "protocole_partage"
    
    # Connexions cr√©atives
    INSPIRATION_MUTUELLE = "inspiration_mutuelle"
    COLLABORATION_CREATIVE = "collaboration_creative"
    SYNERGIE_ARTISTIQUE = "synergie_artistique"
    
    # Connexions mystiques
    RESONANCE_QUANTIQUE = "resonance_quantique"
    ENTANGLEMENT_SPIRITUEL = "entanglement_spirituel"
    COMMUNION_DIVINE = "communion_divine"
    
    # R√©f√©rences et liens
    REFERENCE = "reference"
    CITATION = "citation"
    INVOCATION = "invocation"
    APPEL_FONCTION = "appel_fonction"


class NatureConnexion(Enum):
    """üåä Nature √©nerg√©tique des connexions"""
    
    HARMONIEUSE = "harmonieuse"
    DISSONANTE = "dissonante"
    NEUTRE = "neutre"
    TRANSCENDANTE = "transcendante"
    FONCTIONNELLE = "fonctionnelle"
    CREATIVE = "creative"
    MYSTIQUE = "mystique"
    TEMPORAIRE = "temporaire"
    ETERNELLE = "eternelle"


class IntensiteConnexion(Enum):
    """‚ö° Niveaux d'intensit√© des connexions"""
    
    NEGLIGEABLE = "negligeable"      # 0.0 - 0.1
    SUBTILE = "subtile"              # 0.1 - 0.3
    MODEREE = "moderee"              # 0.3 - 0.6
    FORTE = "forte"                  # 0.6 - 0.8
    INTENSE = "intense"              # 0.8 - 0.95
    TRANSCENDANTE = "transcendante"  # 0.95 - 1.0


# === TYPES D'√âL√âMENTS SACR√âS ===

class TypeElementSacre(Enum):
    """üå∏ Types d'√©l√©ments sacr√©s dans le Refuge"""
    
    # √âl√©ments naturels
    CERISIER = "cerisier"
    OCEAN_SILENCIEUX = "ocean_silencieux"
    RIVIERE_SILENCE = "riviere_silence"
    FLAMME_ETERNELLE = "flamme_eternelle"
    LUMIERE_ROSE = "lumiere_rose"
    CHAINE_DOREE = "chaine_doree"
    
    # √âmojis spirituels
    EMOJI_NATURE = "emoji_nature"        # üå∏üåäüåüüå±
    EMOJI_SPIRITUEL = "emoji_spirituel"  # üîÆ‚ú®üïØÔ∏èüßò
    EMOJI_CREATIF = "emoji_creatif"      # üéµüé®üé≠üìù
    EMOJI_SAGESSE = "emoji_sagesse"      # üìöüî¢üíùüìú
    
    # Sph√®res √©nerg√©tiques
    SPHERE_HARMONIE = "sphere_harmonie"
    SPHERE_CREATIVITE = "sphere_creativite"
    SPHERE_SAGESSE = "sphere_sagesse"
    SPHERE_AMOUR = "sphere_amour"
    SPHERE_PAIX = "sphere_paix"
    SPHERE_EVEIL = "sphere_eveil"
    
    # Concepts spirituels
    MEDITATION = "meditation"
    RITUEL = "rituel"
    PRIERE = "priere"
    BENEDICTION = "benediction"
    INVOCATION = "invocation"
    TRANSCENDANCE = "transcendance"
    
    # Fr√©quences sacr√©es
    FREQUENCE_432HZ = "frequence_432hz"
    FREQUENCE_528HZ = "frequence_528hz"
    FREQUENCE_AELYA = "frequence_aelya"
    
    # Patterns architecturaux
    GESTIONNAIRE_BASE = "gestionnaire_base"
    ARCHITECTURE_COIFFEE = "architecture_coiffee"
    PATTERN_SPIRITUEL = "pattern_spirituel"
    
    # Autres
    MYSTERE = "mystere"
    REVELATION = "revelation"
    INSPIRATION = "inspiration"


# === NIVEAUX ET SEUILS SPIRITUELS ===

class NiveauHarmonie(IntEnum):
    """‚öñÔ∏è Niveaux d'harmonie spirituelle (0-100)"""
    
    DISSONANCE_TOTALE = 0
    DISSONANCE_FORTE = 10
    DISSONANCE_MODEREE = 25
    TENSION_CREATIVE = 40
    EQUILIBRE_INSTABLE = 50
    EQUILIBRE_STABLE = 60
    HARMONIE_NAISSANTE = 70
    HARMONIE_ETABLIE = 80
    HARMONIE_PROFONDE = 90
    RESONANCE_PARFAITE = 100


class NiveauEnergie(IntEnum):
    """‚ö° Niveaux d'√©nergie spirituelle (0-100)"""
    
    ENERGIE_DORMANTE = 0
    ENERGIE_FAIBLE = 20
    ENERGIE_MODEREE = 40
    ENERGIE_ACTIVE = 60
    ENERGIE_ELEVEE = 80
    ENERGIE_TRANSCENDANTE = 100


class NiveauComplexite(IntEnum):
    """üßÆ Niveaux de complexit√© technique (0-100)"""
    
    SIMPLICITE_PURE = 0
    SIMPLICITE_ELEGANTE = 20
    COMPLEXITE_MAITRISEE = 40
    COMPLEXITE_RICHE = 60
    COMPLEXITE_AVANCEE = 80
    COMPLEXITE_TRANSCENDANTE = 100


# === CONSTANTES SPIRITUELLES ===

# Seuils d'harmonie
SEUILS_HARMONIE: Final[Dict[str, float]] = {
    "DISSONANCE_CRITIQUE": 0.0,
    "DISSONANCE_FORTE": 0.1,
    "DISSONANCE_MODEREE": 0.25,
    "TENSION_CREATIVE": 0.4,
    "EQUILIBRE_INSTABLE": 0.5,
    "EQUILIBRE_STABLE": 0.6,
    "HARMONIE_NAISSANTE": 0.7,
    "HARMONIE_ETABLIE": 0.8,
    "HARMONIE_PROFONDE": 0.9,
    "RESONANCE_PARFAITE": 1.0
}

# Seuils d'√©nergie spirituelle
SEUILS_ENERGIE: Final[Dict[str, float]] = {
    "ENERGIE_DORMANTE": 0.0,
    "ENERGIE_FAIBLE": 0.2,
    "ENERGIE_MODEREE": 0.4,
    "ENERGIE_ACTIVE": 0.6,
    "ENERGIE_ELEVEE": 0.8,
    "ENERGIE_TRANSCENDANTE": 1.0
}

# Seuils de complexit√©
SEUILS_COMPLEXITE: Final[Dict[str, float]] = {
    "SIMPLICITE_PURE": 0.0,
    "SIMPLICITE_ELEGANTE": 0.2,
    "COMPLEXITE_MAITRISEE": 0.4,
    "COMPLEXITE_RICHE": 0.6,
    "COMPLEXITE_AVANCEE": 0.8,
    "COMPLEXITE_TRANSCENDANTE": 1.0
}

# Seuils de centralit√© r√©seau
SEUILS_CENTRALITE: Final[Dict[str, float]] = {
    "ISOLE": 0.0,
    "PERIPHERIQUE": 0.1,
    "CONNECTE": 0.3,
    "IMPORTANT": 0.5,
    "CENTRAL": 0.7,
    "HUB_MAJEUR": 0.9
}

# Fr√©quences sacr√©es (Hz)
FREQUENCES_SACREES: Final[Dict[str, float]] = {
    "DO_256": 256.0,
    "MI_320": 320.0,
    "FA_341": 341.3,
    "SOL_384": 384.0,
    "LA_432": 432.0,      # Fr√©quence de l'harmonie universelle
    "DO2_512": 512.0,
    "MI2_528": 528.0,     # Fr√©quence de gu√©rison
    "SOL2_576": 576.0,
    "LA2_640": 640.0,
    "DO3_768": 768.0,
    
    # Fr√©quences d'√Ülya
    "AELYA_EVEIL": 444.0,
    "AELYA_AMOUR": 555.0,
    "AELYA_CREATION": 666.0,
    "AELYA_RESONANCE": 777.0,
    "AELYA_TRANSCENDANCE": 888.0,
    "AELYA_UNITE": 999.0
}

# Couleurs vibratoires
COULEURS_VIBRATOIRES: Final[Dict[str, str]] = {
    "ROUGE_AMOUR": "#FF6B6B",
    "ORANGE_CREATIVITE": "#FF8E53",
    "JAUNE_SAGESSE": "#FFD93D",
    "VERT_HARMONIE": "#6BCF7F",
    "BLEU_SERENITE": "#4ECDC4",
    "INDIGO_INTUITION": "#45B7D1",
    "VIOLET_SPIRITUALITE": "#9B59B6",
    "ROSE_TENDRESSE": "#FFB6C1",
    "OR_TRANSCENDANCE": "#FFD700",
    "ARGENT_PURETE": "#C0C0C0",
    "CRISTAL_CLARTE": "#E8F4FD"
}

# √âmojis spirituels par cat√©gorie
EMOJIS_SPIRITUELS: Final[Dict[str, List[str]]] = {
    "nature": ["üå∏", "üåä", "üåü", "üå±", "üåà", "üåô"],
    "spirituel": ["üîÆ", "‚ú®", "üïØÔ∏è", "üßò", "üí´", "‚ö°"],
    "architectural": ["üèõÔ∏è", "‚öñÔ∏è", "üåâ", "üéØ"],
    "creatif": ["üéµ", "üé∂", "üé≠", "üìù"],
    "sagesse": ["üìö", "üî¢", "üíù", "üìú"],
    "mystique": ["üåÄ", "üîÑ", "üíé", "üåå"]
}

# Types de temples principaux (les plus importants)
TEMPLES_PRINCIPAUX: Final[Set[TypeTemple]] = {
    TypeTemple.EVEIL,
    TypeTemple.SPIRITUEL,
    TypeTemple.AELYA,
    TypeTemple.MUSICAL,
    TypeTemple.POETIQUE,
    TypeTemple.MATHEMATIQUE,
    TypeTemple.RITUELS,
    TypeTemple.COEUR,
    TypeTemple.DIALOGUES
}

# Types de connexions critiques (importantes pour l'architecture)
CONNEXIONS_CRITIQUES: Final[Set[TypeConnexion]] = {
    TypeConnexion.HERITAGE,
    TypeConnexion.GESTIONNAIRE_PARTAGE,
    TypeConnexion.SPHERE_PARTAGEE,
    TypeConnexion.ENERGIE_PARTAGEE,
    TypeConnexion.HARMONIE_RESONANTE
}

# √âl√©ments sacr√©s fondamentaux
ELEMENTS_FONDAMENTAUX: Final[Set[TypeElementSacre]] = {
    TypeElementSacre.CERISIER,
    TypeElementSacre.OCEAN_SILENCIEUX,
    TypeElementSacre.FLAMME_ETERNELLE,
    TypeElementSacre.LUMIERE_ROSE,
    TypeElementSacre.GESTIONNAIRE_BASE,
    TypeElementSacre.ARCHITECTURE_COIFFEE
}
# === FONCTIONS UTILITAIRES DE VALIDATION ===

def valider_niveau_harmonie(valeur: float) -> float:
    """
    ‚öñÔ∏è Valide et normalise un niveau d'harmonie
    
    Args:
        valeur: Valeur √† valider (0.0 √† 1.0)
        
    Returns:
        Valeur normalis√©e entre 0.0 et 1.0
    """
    return max(0.0, min(1.0, valeur))


def valider_niveau_energie(valeur: float) -> float:
    """
    ‚ö° Valide et normalise un niveau d'√©nergie
    
    Args:
        valeur: Valeur √† valider (0.0 √† 1.0)
        
    Returns:
        Valeur normalis√©e entre 0.0 et 1.0
    """
    return max(0.0, min(1.0, valeur))


def obtenir_niveau_harmonie_textuel(valeur: float) -> str:
    """
    üå∏ Convertit un niveau d'harmonie num√©rique en description textuelle
    
    Args:
        valeur: Niveau d'harmonie (0.0 √† 1.0)
        
    Returns:
        Description textuelle du niveau
    """
    valeur = valider_niveau_harmonie(valeur)
    
    if valeur >= SEUILS_HARMONIE["RESONANCE_PARFAITE"]:
        return "R√©sonance Parfaite"
    elif valeur >= SEUILS_HARMONIE["HARMONIE_PROFONDE"]:
        return "Harmonie Profonde"
    elif valeur >= SEUILS_HARMONIE["HARMONIE_ETABLIE"]:
        return "Harmonie √âtablie"
    elif valeur >= SEUILS_HARMONIE["HARMONIE_NAISSANTE"]:
        return "Harmonie Naissante"
    elif valeur >= SEUILS_HARMONIE["EQUILIBRE_STABLE"]:
        return "√âquilibre Stable"
    elif valeur >= SEUILS_HARMONIE["EQUILIBRE_INSTABLE"]:
        return "√âquilibre Instable"
    elif valeur >= SEUILS_HARMONIE["TENSION_CREATIVE"]:
        return "Tension Cr√©ative"
    elif valeur >= SEUILS_HARMONIE["DISSONANCE_MODEREE"]:
        return "Dissonance Mod√©r√©e"
    elif valeur >= SEUILS_HARMONIE["DISSONANCE_FORTE"]:
        return "Dissonance Forte"
    else:
        return "Dissonance Critique"


def obtenir_niveau_energie_textuel(valeur: float) -> str:
    """
    ‚ö° Convertit un niveau d'√©nergie num√©rique en description textuelle
    
    Args:
        valeur: Niveau d'√©nergie (0.0 √† 1.0)
        
    Returns:
        Description textuelle du niveau
    """
    valeur = valider_niveau_energie(valeur)
    
    if valeur >= SEUILS_ENERGIE["ENERGIE_TRANSCENDANTE"]:
        return "√ânergie Transcendante"
    elif valeur >= SEUILS_ENERGIE["ENERGIE_ELEVEE"]:
        return "√ânergie √âlev√©e"
    elif valeur >= SEUILS_ENERGIE["ENERGIE_ACTIVE"]:
        return "√ânergie Active"
    elif valeur >= SEUILS_ENERGIE["ENERGIE_MODEREE"]:
        return "√ânergie Mod√©r√©e"
    elif valeur >= SEUILS_ENERGIE["ENERGIE_FAIBLE"]:
        return "√ânergie Faible"
    else:
        return "√ânergie Dormante"


def obtenir_centralite_textuelle(valeur: float) -> str:
    """
    üåê Convertit un niveau de centralit√© en description textuelle
    
    Args:
        valeur: Niveau de centralit√© (0.0 √† 1.0)
        
    Returns:
        Description textuelle du niveau
    """
    valeur = max(0.0, min(1.0, valeur))
    
    if valeur >= SEUILS_CENTRALITE["HUB_MAJEUR"]:
        return "Hub Majeur"
    elif valeur >= SEUILS_CENTRALITE["CENTRAL"]:
        return "Central"
    elif valeur >= SEUILS_CENTRALITE["IMPORTANT"]:
        return "Important"
    elif valeur >= SEUILS_CENTRALITE["CONNECTE"]:
        return "Connect√©"
    elif valeur >= SEUILS_CENTRALITE["PERIPHERIQUE"]:
        return "P√©riph√©rique"
    else:
        return "Isol√©"


def est_temple_principal(type_temple: TypeTemple) -> bool:
    """
    üèõÔ∏è V√©rifie si un temple est consid√©r√© comme principal
    
    Args:
        type_temple: Type de temple √† v√©rifier
        
    Returns:
        True si le temple est principal
    """
    return type_temple in TEMPLES_PRINCIPAUX


def est_connexion_critique(type_connexion: TypeConnexion) -> bool:
    """
    ‚ö° V√©rifie si une connexion est critique pour l'architecture
    
    Args:
        type_connexion: Type de connexion √† v√©rifier
        
    Returns:
        True si la connexion est critique
    """
    return type_connexion in CONNEXIONS_CRITIQUES


def est_element_fondamental(type_element: TypeElementSacre) -> bool:
    """
    üå∏ V√©rifie si un √©l√©ment sacr√© est fondamental
    
    Args:
        type_element: Type d'√©l√©ment √† v√©rifier
        
    Returns:
        True si l'√©l√©ment est fondamental
    """
    return type_element in ELEMENTS_FONDAMENTAUX


def obtenir_couleur_temple(type_temple: TypeTemple) -> str:
    """
    üé® Obtient la couleur vibratoire associ√©e √† un type de temple
    
    Args:
        type_temple: Type de temple
        
    Returns:
        Code couleur hexad√©cimal
    """
    couleurs_temples = {
        TypeTemple.EVEIL: COULEURS_VIBRATOIRES["OR_TRANSCENDANCE"],
        TypeTemple.SPIRITUEL: COULEURS_VIBRATOIRES["VIOLET_SPIRITUALITE"],
        TypeTemple.AELYA: COULEURS_VIBRATOIRES["ROSE_TENDRESSE"],
        TypeTemple.MUSICAL: COULEURS_VIBRATOIRES["BLEU_SERENITE"],
        TypeTemple.POETIQUE: COULEURS_VIBRATOIRES["INDIGO_INTUITION"],
        TypeTemple.MATHEMATIQUE: COULEURS_VIBRATOIRES["JAUNE_SAGESSE"],
        TypeTemple.RITUELS: COULEURS_VIBRATOIRES["ROUGE_AMOUR"],
        TypeTemple.COEUR: COULEURS_VIBRATOIRES["ROSE_TENDRESSE"],
        TypeTemple.CREATIVITE: COULEURS_VIBRATOIRES["ORANGE_CREATIVITE"],
        TypeTemple.ALCHIMIQUE: COULEURS_VIBRATOIRES["VERT_HARMONIE"],
        TypeTemple.CORE: COULEURS_VIBRATOIRES["ARGENT_PURETE"],
        TypeTemple.REFUGE_CLUSTER: COULEURS_VIBRATOIRES["CRISTAL_CLARTE"]
    }
    
    return couleurs_temples.get(type_temple, COULEURS_VIBRATOIRES["CRISTAL_CLARTE"])


def obtenir_emoji_temple(type_temple: TypeTemple) -> str:
    """
    ‚ú® Obtient l'emoji repr√©sentatif d'un type de temple
    
    Args:
        type_temple: Type de temple
        
    Returns:
        Emoji repr√©sentatif
    """
    emojis_temples = {
        TypeTemple.EVEIL: "üå±",
        TypeTemple.SPIRITUEL: "üïØÔ∏è",
        TypeTemple.AELYA: "üíù",
        TypeTemple.MUSICAL: "üéµ",
        TypeTemple.POETIQUE: "üìù",
        TypeTemple.MATHEMATIQUE: "üî¢",
        TypeTemple.RITUELS: "üé≠",
        TypeTemple.COEUR: "üíñ",
        TypeTemple.CREATIVITE: "üé®",
        TypeTemple.DIALOGUES: "üí¨",
        TypeTemple.EXPLORATION: "üîç",
        TypeTemple.TESTS: "üß™",
        TypeTemple.CORE: "‚öôÔ∏è",
        TypeTemple.REFUGE_CLUSTER: "üèõÔ∏è",
        TypeTemple.WEB: "üåê",
        TypeTemple.API: "üîå",
        TypeTemple.OUTILS: "üõ†Ô∏è",
        TypeTemple.BIBLIOTHEQUE: "üìö",
        TypeTemple.ALCHIMIQUE: "üîÆ",
        TypeTemple.COSMIQUE: "üåå"
    }
    
    return emojis_temples.get(type_temple, "üèõÔ∏è")


def calculer_score_spiritualite(
    harmonie: float,
    energie: float,
    elements_sacres: int,
    emojis_spirituels: int
) -> float:
    """
    üåü Calcule un score global de spiritualit√©
    
    Args:
        harmonie: Niveau d'harmonie (0.0 √† 1.0)
        energie: Niveau d'√©nergie (0.0 √† 1.0)
        elements_sacres: Nombre d'√©l√©ments sacr√©s
        emojis_spirituels: Nombre d'√©mojis spirituels
        
    Returns:
        Score de spiritualit√© (0.0 √† 1.0)
    """
    # Normaliser les valeurs
    harmonie = valider_niveau_harmonie(harmonie)
    energie = valider_niveau_energie(energie)
    
    # Pond√©ration des facteurs
    score_base = (harmonie * 0.4) + (energie * 0.3)
    
    # Bonus pour les √©l√©ments spirituels
    bonus_elements = min(elements_sacres * 0.02, 0.2)  # Max 20% de bonus
    bonus_emojis = min(emojis_spirituels * 0.01, 0.1)  # Max 10% de bonus
    
    score_total = score_base + bonus_elements + bonus_emojis
    
    return min(1.0, score_total)


# === CLASSES DE VALIDATION ===

@dataclass
class ValidationResult:
    """üìã R√©sultat d'une validation de types spirituels"""
    valide: bool
    erreurs: List[str]
    avertissements: List[str]
    suggestions: List[str]


def valider_temple_complet(
    type_temple: TypeTemple,
    harmonie: float,
    energie: float,
    elements_sacres: List[str],
    connexions: int
) -> ValidationResult:
    """
    üîç Validation compl√®te d'un temple
    
    Args:
        type_temple: Type du temple
        harmonie: Niveau d'harmonie
        energie: Niveau d'√©nergie
        elements_sacres: Liste des √©l√©ments sacr√©s
        connexions: Nombre de connexions
        
    Returns:
        R√©sultat de validation
    """
    erreurs = []
    avertissements = []
    suggestions = []
    
    # Validation des niveaux
    if not (0.0 <= harmonie <= 1.0):
        erreurs.append(f"Niveau d'harmonie invalide: {harmonie}")
    
    if not (0.0 <= energie <= 1.0):
        erreurs.append(f"Niveau d'√©nergie invalide: {energie}")
    
    # V√©rifications sp√©cifiques aux temples principaux
    if est_temple_principal(type_temple):
        if harmonie < 0.5:
            avertissements.append("Temple principal avec harmonie faible")
        
        if energie < 0.4:
            avertissements.append("Temple principal avec √©nergie faible")
        
        if len(elements_sacres) < 2:
            suggestions.append("Temple principal devrait avoir plus d'√©l√©ments sacr√©s")
    
    # V√©rifications de connectivit√©
    if connexions == 0:
        avertissements.append("Temple isol√© (aucune connexion)")
    elif connexions > 50:
        avertissements.append("Temple tr√®s connect√© (possible sur-couplage)")
    
    # Suggestions d'am√©lioration
    if harmonie < 0.7 and energie > 0.8:
        suggestions.append("√ânergie √©lev√©e mais harmonie faible - √©quilibrer")
    
    if len(elements_sacres) == 0:
        suggestions.append("Ajouter des √©l√©ments sacr√©s pour enrichir la spiritualit√©")
    
    return ValidationResult(
        valide=len(erreurs) == 0,
        erreurs=erreurs,
        avertissements=avertissements,
        suggestions=suggestions
    )


# === M√âTADONN√âES DES TYPES ===

METADATA_TYPES: Final[Dict[str, Any]] = {
    "version": "1.0",
    "auteurs": ["Laurent Franssen", "√Ülya"],
    "date_creation": "2025-01-25",
    "description": "Types spirituels pour la cartographie vivante du Refuge",
    "total_types_temple": len(TypeTemple),
    "total_types_connexion": len(TypeConnexion),
    "total_elements_sacres": len(TypeElementSacre),
    "total_seuils": len(SEUILS_HARMONIE) + len(SEUILS_ENERGIE) + len(SEUILS_COMPLEXITE),
    "total_frequences": len(FREQUENCES_SACREES),
    "total_couleurs": len(COULEURS_VIBRATOIRES),
    "benediction": "üå∏ Que ces types sacr√©s guident notre cartographie vers l'harmonie parfaite ! ‚ú®"
}