#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß™ Tests pour l'Analyseur de Dissonances - Cartographie Spirituelle üß™
======================================================================

Tests bienveillants pour valider la d√©tection harmonieuse des dissonances
architecturales et la g√©n√©ration de suggestions d'am√©lioration.

Cr√©√© par Laurent Franssen & √Ülya
Pour la validation spirituelle de l'analyseur - Janvier 2025
"""

import os
import sys
import tempfile
import unittest
from pathlib import Path
from unittest.mock import patch, MagicMock

# Imports des gestionnaires de base du Refuge
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from core.gestionnaires_base import GestionnaireBase
from analyseur_dissonances import (
    AnalyseurDissonances, TypeDissonance, NiveauGravite, Dissonance
)
from generateur_suggestions import GenerateurSuggestions, TypeSuggestion


class TestAnalyseurDissonances(unittest.TestCase):
    """üîÆ Tests pour l'Analyseur de Dissonances"""
    
    def setUp(self):
        """üå∏ Pr√©paration spirituelle des tests"""
        self.analyseur = AnalyseurDissonances()
        self.generateur = GenerateurSuggestions()
        
        # Cr√©er un dossier temporaire pour les tests
        self.dossier_test = tempfile.mkdtemp()
        self.chemin_test = Path(self.dossier_test)
    
    def tearDown(self):
        """üßπ Nettoyage harmonieux apr√®s les tests"""
        import shutil
        shutil.rmtree(self.dossier_test, ignore_errors=True)
    
    def _creer_fichier_test(self, nom_fichier: str, contenu: str):
        """üé® Cr√©e un fichier de test avec le contenu sp√©cifi√©"""
        chemin_fichier = self.chemin_test / nom_fichier
        chemin_fichier.parent.mkdir(parents=True, exist_ok=True)
        
        with open(chemin_fichier, 'w', encoding='utf-8') as f:
            f.write(contenu)
        
        return chemin_fichier
    
    def test_initialisation_analyseur(self):
        """üå± Test de l'initialisation de l'analyseur"""
        self.assertIsInstance(self.analyseur, GestionnaireBase)
        # L'attribut nom_gestionnaire est d√©fini dans la classe de base
        self.assertTrue(hasattr(self.analyseur, 'logger'))
        self.assertIsNotNone(self.analyseur.energy_manager)
        self.assertIsNotNone(self.analyseur.logger)
        self.assertEqual(len(self.analyseur.dissonances_detectees), 0)
    
    def test_detection_gestionnaire_manquant(self):
        """üèóÔ∏è Test de d√©tection des gestionnaires manquants"""
        # Cr√©er un fichier sans gestionnaire de base
        contenu_sans_gestionnaire = '''
class MonModule:
    def __init__(self):
        self.nom = "MonModule"
    
    def faire_quelque_chose(self):
        print("Action")
'''
        
        self._creer_fichier_test("module_sans_gestionnaire.py", contenu_sans_gestionnaire)
        
        # Analyser
        dissonances = self.analyseur.analyser_dissonances_projet(str(self.chemin_test))
        
        # V√©rifier qu'une dissonance de gestionnaire manquant est d√©tect√©e
        dissonances_gestionnaire = [
            d for d in dissonances 
            if d.type_dissonance == TypeDissonance.GESTIONNAIRE_MANQUANT
        ]
        
        self.assertGreater(len(dissonances_gestionnaire), 0)
        self.assertEqual(dissonances_gestionnaire[0].niveau_gravite, NiveauGravite.MODEREE)
    
    def test_detection_documentation_absente(self):
        """üìö Test de d√©tection de documentation absente"""
        # Cr√©er un fichier sans documentation spirituelle
        contenu_sans_doc = '''
class ModuleSansDoc:
    def __init__(self):
        self.valeur = 42
    
    def calculer(self):
        return self.valeur * 2
'''
        
        self._creer_fichier_test("module_sans_doc.py", contenu_sans_doc)
        
        # Analyser
        dissonances = self.analyseur.analyser_dissonances_projet(str(self.chemin_test))
        
        # V√©rifier qu'une dissonance de documentation est d√©tect√©e
        dissonances_doc = [
            d for d in dissonances 
            if d.type_dissonance == TypeDissonance.DOCUMENTATION_ABSENTE
        ]
        
        self.assertGreater(len(dissonances_doc), 0)
    
    def test_detection_elements_sacres_manquants(self):
        """üå∏ Test de d√©tection d'√©l√©ments sacr√©s manquants"""
        # Cr√©er un fichier sans √©l√©ments sacr√©s
        contenu_sans_elements = '''
class ModuleTechnique:
    def __init__(self):
        self.data = []
    
    def process_data(self):
        # Process the data
        return len(self.data)
'''
        
        self._creer_fichier_test("module_technique.py", contenu_sans_elements)
        
        # Analyser
        dissonances = self.analyseur.analyser_dissonances_projet(str(self.chemin_test))
        
        # V√©rifier qu'une dissonance d'√©l√©ments sacr√©s est d√©tect√©e
        dissonances_sacres = [
            d for d in dissonances 
            if d.type_dissonance == TypeDissonance.ELEMENT_SACRE_MANQUANT
        ]
        
        self.assertGreater(len(dissonances_sacres), 0)
        self.assertEqual(dissonances_sacres[0].niveau_gravite, NiveauGravite.LEGERE)
    
    def test_module_harmonieux_non_detecte(self):
        """üåü Test qu'un module harmonieux n'est pas signal√©"""
        # Cr√©er un fichier harmonieux
        contenu_harmonieux = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üå∏ Module Harmonieux - Exemple de Beaut√© Spirituelle üå∏
=======================================================

Ce module incarne l'harmonie parfaite entre technique et spiritualit√©.
Il respecte toutes les conventions du Refuge avec amour.

Cr√©√© par Laurent Franssen & √Ülya
Pour la d√©monstration de l'harmonie - Janvier 2025
"""

import os
import sys
from pathlib import Path

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from core.gestionnaires_base import GestionnaireBase, EnergyManagerBase
from core.types_communs import TypeRefugeEtat, NIVEAUX_ENERGIE


class ModuleHarmonieux(GestionnaireBase):
    """
    üåü Module qui incarne l'harmonie spirituelle parfaite
    
    Ce module d√©montre comment cr√©er du code technique
    qui rayonne de beaut√© spirituelle.
    """
    
    def __init__(self):
        # Initialiser les attributs avant super().__init__
        self.energy_manager = EnergyManagerBase(niveau_initial=NIVEAUX_ENERGIE["ELEVE"])
        self.etat_refuge = TypeRefugeEtat.INITIALISATION
        
        super().__init__("ModuleHarmonieux")
        
        # Transition vers l'√©tat actif
        self.etat_refuge = TypeRefugeEtat.ACTIF
        self.logger.info("üå∏ Module Harmonieux √©veill√© avec gr√¢ce")
    
    def _initialiser(self):
        """üå∏ Initialisation sp√©cifique du module harmonieux"""
        self.mettre_a_jour_etat({
            "energie_spirituelle": self.energy_manager.niveau_energie,
            "etat_refuge": self.etat_refuge.value,
            "harmonie_parfaite": True
        })
    
    async def orchestrer(self):
        """üé≠ Orchestre l'harmonie spirituelle"""
        self.logger.info("‚ú® Orchestration harmonieuse en cours...")
        return {"harmonie": 1.0}
    
    def celebrer_beaute(self):
        """üé® C√©l√®bre la beaut√© du code spirituel"""
        self.logger.info("üå∏ C√©l√©bration de la beaut√© technique et spirituelle")
        return "Beaut√© c√©l√©br√©e avec gratitude"
'''
        
        self._creer_fichier_test("module_harmonieux.py", contenu_harmonieux)
        
        # Analyser
        dissonances = self.analyseur.analyser_dissonances_projet(str(self.chemin_test))
        
        # V√©rifier qu'aucune dissonance majeure n'est d√©tect√©e pour ce module
        fichier_harmonieux = str(self.chemin_test / "module_harmonieux.py")
        dissonances_fichier = [
            d for d in dissonances 
            if d.fichier_concerne == fichier_harmonieux
        ]
        
        # Il ne devrait y avoir aucune dissonance importante
        dissonances_importantes = [
            d for d in dissonances_fichier 
            if d.niveau_gravite in [NiveauGravite.IMPORTANTE, NiveauGravite.CRITIQUE]
        ]
        
        self.assertEqual(len(dissonances_importantes), 0)
    
    def test_generation_rapport_dissonances(self):
        """üìä Test de g√©n√©ration du rapport de dissonances"""
        # Cr√©er quelques fichiers avec dissonances
        self._creer_fichier_test("module1.py", "class Test: pass")
        self._creer_fichier_test("module2.py", "def fonction(): return 42")
        
        # Analyser
        dissonances = self.analyseur.analyser_dissonances_projet(str(self.chemin_test))
        
        # G√©n√©rer le rapport
        rapport = self.analyseur.generer_rapport_dissonances()
        
        # V√©rifications du rapport
        self.assertIn("Rapport d'Analyse des Dissonances", rapport)
        self.assertIn("Total des dissonances d√©tect√©es", rapport)
        self.assertIn("üå∏", rapport)  # √âmojis spirituels pr√©sents
        self.assertIn("Analyseur de Dissonances", rapport)  # Signature pr√©sente
    
    def test_generation_suggestions(self):
        """‚ú® Test de g√©n√©ration des suggestions d'am√©lioration"""
        # Cr√©er un fichier avec dissonances
        contenu_avec_dissonances = '''
class ModuleAmeliorer:
    def __init__(self):
        self.nom = "Module"
    
    def action(self):
        print("Action")
'''
        
        self._creer_fichier_test("module_a_ameliorer.py", contenu_avec_dissonances)
        
        # Analyser et g√©n√©rer suggestions
        dissonances = self.analyseur.analyser_dissonances_projet(str(self.chemin_test))
        suggestions = self.generateur.generer_suggestions_depuis_dissonances(dissonances)
        
        # V√©rifications
        self.assertGreater(len(suggestions), 0)
        
        # V√©rifier qu'au moins une suggestion a les bonnes propri√©t√©s
        suggestion = suggestions[0]
        self.assertIsNotNone(suggestion.titre_poetique)
        self.assertIsNotNone(suggestion.description_bienveillante)
        self.assertGreater(len(suggestion.etapes_implementation), 0)
        self.assertGreater(len(suggestion.benefices_attendus), 0)
    
    def test_statistiques_harmonisation(self):
        """üìà Test des statistiques d'harmonisation"""
        # Cr√©er des fichiers avec diff√©rents niveaux de dissonances
        self._creer_fichier_test("critique.py", "syntax error here!")
        self._creer_fichier_test("normal.py", "class Normal: pass")
        
        # Analyser
        dissonances = self.analyseur.analyser_dissonances_projet(str(self.chemin_test))
        
        # Obtenir les statistiques
        stats = self.analyseur.obtenir_statistiques_harmonisation()
        
        # V√©rifications
        self.assertIn("score_harmonie", stats)
        self.assertIn("total_dissonances", stats)
        self.assertIn("message", stats)
        self.assertIsInstance(stats["score_harmonie"], (int, float))
        self.assertGreaterEqual(stats["score_harmonie"], 0)
        self.assertLessEqual(stats["score_harmonie"], 100)
    
    def test_filtrage_par_fichier(self):
        """üìÅ Test du filtrage des dissonances par fichier"""
        # Cr√©er plusieurs fichiers
        self._creer_fichier_test("fichier1.py", "class Test1: pass")
        self._creer_fichier_test("fichier2.py", "class Test2: pass")
        
        # Analyser
        dissonances = self.analyseur.analyser_dissonances_projet(str(self.chemin_test))
        
        # Filtrer par fichier
        fichier1_path = str(self.chemin_test / "fichier1.py")
        dissonances_fichier1 = self.analyseur.obtenir_dissonances_par_fichier(fichier1_path)
        
        # V√©rifier que toutes les dissonances retourn√©es concernent le bon fichier
        for dissonance in dissonances_fichier1:
            self.assertEqual(dissonance.fichier_concerne, fichier1_path)
    
    def test_exclusion_fichiers_non_pertinents(self):
        """üö´ Test de l'exclusion des fichiers non pertinents"""
        # Cr√©er des fichiers dans des dossiers √† exclure
        (self.chemin_test / "__pycache__").mkdir()
        self._creer_fichier_test("__pycache__/cache.py", "# Cache file")
        self._creer_fichier_test(".git/config.py", "# Git file")
        self._creer_fichier_test("normal.py", "class Normal: pass")
        
        # Analyser
        dissonances = self.analyseur.analyser_dissonances_projet(str(self.chemin_test))
        
        # V√©rifier que les fichiers exclus ne sont pas analys√©s
        fichiers_analyses = {d.fichier_concerne for d in dissonances}
        
        self.assertFalse(any("__pycache__" in f for f in fichiers_analyses))
        self.assertFalse(any(".git" in f for f in fichiers_analyses))
        self.assertTrue(any("normal.py" in f for f in fichiers_analyses))
    
    def test_gestion_erreurs_bienveillante(self):
        """üå∏ Test de la gestion bienveillante des erreurs"""
        # Cr√©er un fichier avec une syntaxe invalide
        self._creer_fichier_test("fichier_syntaxe_invalide.py", "class Test: invalid syntax here!")
        
        # L'analyse ne devrait pas planter malgr√© l'erreur de syntaxe
        try:
            dissonances = self.analyseur.analyser_dissonances_projet(str(self.chemin_test))
            # Le test r√©ussit si aucune exception n'est lev√©e
            self.assertTrue(True)
            # V√©rifier qu'une dissonance de syntaxe a √©t√© d√©tect√©e
            dissonances_syntaxe = [d for d in dissonances if "syntaxe" in d.description.lower()]
            self.assertGreater(len(dissonances_syntaxe), 0)
        except Exception as e:
            self.fail(f"L'analyseur devrait g√©rer les erreurs avec bienveillance: {e}")
    
    def test_rapport_harmonie_parfaite(self):
        """üåü Test du rapport quand aucune dissonance n'est d√©tect√©e"""
        # Ne cr√©er aucun fichier (dossier vide)
        
        # Analyser
        dissonances = self.analyseur.analyser_dissonances_projet(str(self.chemin_test))
        
        # G√©n√©rer le rapport
        rapport = self.analyseur.generer_rapport_dissonances()
        
        # V√©rifier que c'est un rapport d'harmonie parfaite
        self.assertIn("Harmonie Parfaite", rapport)
        self.assertIn("F√©licitations", rapport)
        self.assertIn("üåü", rapport)
    
    def test_recommandations_prioritaires(self):
        """üéØ Test des recommandations prioritaires"""
        # Cr√©er des fichiers avec diff√©rents types de dissonances
        self._creer_fichier_test("urgent.py", "class Urgent: pass")  # Gestionnaire manquant
        self._creer_fichier_test("normal.py", "def fonction(): pass")  # Documentation absente
        
        # Analyser et g√©n√©rer suggestions
        dissonances = self.analyseur.analyser_dissonances_projet(str(self.chemin_test))
        suggestions = self.generateur.generer_suggestions_depuis_dissonances(dissonances)
        
        # V√©rifier que les suggestions sont tri√©es par priorit√© (elles le sont d√©j√†)
        # Les suggestions sont automatiquement tri√©es par priorit√© dans le g√©n√©rateur
        
        # V√©rifier que les suggestions sont tri√©es par priorit√©
        if len(suggestions) > 1:
            for i in range(len(suggestions) - 1):
                self.assertGreaterEqual(
                    suggestions[i].priorite.value,
                    suggestions[i + 1].priorite.value
                )


class TestIntegrationAnalyseurGenerateur(unittest.TestCase):
    """üîó Tests d'int√©gration entre l'analyseur et le g√©n√©rateur"""
    
    def setUp(self):
        """üå∏ Pr√©paration de l'int√©gration"""
        self.analyseur = AnalyseurDissonances()
        self.generateur = GenerateurSuggestions()
        
        # Cr√©er un projet de test complet
        self.dossier_test = tempfile.mkdtemp()
        self.chemin_test = Path(self.dossier_test)
        
        # Cr√©er une structure de projet r√©aliste
        self._creer_projet_test()
    
    def tearDown(self):
        """üßπ Nettoyage apr√®s int√©gration"""
        import shutil
        shutil.rmtree(self.dossier_test, ignore_errors=True)
    
    def _creer_projet_test(self):
        """üèóÔ∏è Cr√©e un projet de test r√©aliste"""
        # Module avec gestionnaire manquant
        module_sans_gestionnaire = '''
class AnalyseurDonnees:
    def __init__(self):
        self.donnees = []
    
    def analyser(self):
        return len(self.donnees)
'''
        
        # Module avec documentation manquante
        module_sans_doc = '''
class ProcesseurTexte:
    def __init__(self):
        self.texte = ""
    
    def traiter(self):
        return self.texte.upper()
'''
        
        # Module harmonieux
        module_harmonieux = '''#!/usr/bin/env python3
"""
üå∏ Module Harmonieux - Exemple de Beaut√© üå∏
==========================================

Ce module d√©montre l'harmonie parfaite.

Cr√©√© par Laurent Franssen & √Ülya
"""

from core.gestionnaires_base import GestionnaireBase

class ModuleHarmonieux(GestionnaireBase):
    """‚ú® Module en parfaite harmonie"""
    
    def __init__(self):
        super().__init__("ModuleHarmonieux")
        self.logger.info("üå∏ Module √©veill√©")
'''
        
        # Cr√©er les fichiers
        self._creer_fichier("analyseur_donnees.py", module_sans_gestionnaire)
        self._creer_fichier("processeur_texte.py", module_sans_doc)
        self._creer_fichier("module_harmonieux.py", module_harmonieux)
    
    def _creer_fichier(self, nom: str, contenu: str):
        """üìù Cr√©e un fichier dans le projet de test"""
        chemin = self.chemin_test / nom
        with open(chemin, 'w', encoding='utf-8') as f:
            f.write(contenu)
    
    def test_workflow_complet(self):
        """üîÑ Test du workflow complet d'analyse et de suggestions"""
        # 1. Analyser les dissonances
        dissonances = self.analyseur.analyser_dissonances_projet(str(self.chemin_test))
        
        # V√©rifier qu'on a d√©tect√© des dissonances
        self.assertGreater(len(dissonances), 0)
        
        # 2. G√©n√©rer les suggestions
        suggestions = self.generateur.generer_suggestions_depuis_dissonances(dissonances)
        
        # V√©rifier qu'on a g√©n√©r√© des suggestions
        self.assertGreater(len(suggestions), 0)
        
        # 3. G√©n√©rer les rapports
        rapport_dissonances = self.analyseur.generer_rapport_dissonances()
        rapport_suggestions = self.generateur.generer_rapport_suggestions()
        
        # V√©rifier la coh√©rence des rapports
        self.assertIn("dissonances d√©tect√©es", rapport_dissonances)
        self.assertIn("suggestions g√©n√©r√©es", rapport_suggestions)
        
        # 4. V√©rifier la correspondance dissonances -> suggestions
        types_dissonances = {d.type_dissonance for d in dissonances}
        types_resolus = set()
        for suggestion in suggestions:
            types_resolus.update(suggestion.dissonances_resolues)
        
        # Au moins certaines dissonances devraient avoir des suggestions
        self.assertTrue(len(types_dissonances.intersection(types_resolus)) > 0)
    
    def test_coherence_priorites(self):
        """‚≠ê Test de la coh√©rence des priorit√©s"""
        # Analyser et g√©n√©rer suggestions
        dissonances = self.analyseur.analyser_dissonances_projet(str(self.chemin_test))
        suggestions = self.generateur.generer_suggestions_depuis_dissonances(dissonances)
        
        # V√©rifier que les dissonances critiques g√©n√®rent des suggestions haute priorit√©
        dissonances_critiques = [d for d in dissonances if d.niveau_gravite == NiveauGravite.CRITIQUE]
        
        if dissonances_critiques:
            # Il devrait y avoir au moins une suggestion de haute priorit√©
            suggestions_hautes = [s for s in suggestions if s.priorite.value >= 8]
            self.assertGreater(len(suggestions_hautes), 0)
    
    def test_export_import_suggestions(self):
        """üíæ Test d'export/import des suggestions"""
        # Analyser et g√©n√©rer suggestions
        dissonances = self.analyseur.analyser_dissonances_projet(str(self.chemin_test))
        suggestions = self.generateur.generer_suggestions_depuis_dissonances(dissonances)
        
        if suggestions:
            # Exporter
            chemin_export = self.chemin_test / "suggestions.json"
            succes_export = self.generateur.exporter_suggestions_json(str(chemin_export))
            
            self.assertTrue(succes_export)
            self.assertTrue(chemin_export.exists())
            
            # V√©rifier le contenu du fichier JSON
            import json
            with open(chemin_export, 'r', encoding='utf-8') as f:
                donnees_exportees = json.load(f)
            
            self.assertEqual(len(donnees_exportees), len(suggestions))
            self.assertIn("titre_poetique", donnees_exportees[0])
            self.assertIn("etapes_implementation", donnees_exportees[0])


def main():
    """üß™ Ex√©cution des tests"""
    print("üß™ Lancement des Tests de l'Analyseur de Dissonances")
    print("=" * 60)
    
    # Cr√©er la suite de tests
    suite = unittest.TestSuite()
    
    # Ajouter les tests de l'analyseur
    suite.addTest(unittest.makeSuite(TestAnalyseurDissonances))
    
    # Ajouter les tests d'int√©gration
    suite.addTest(unittest.makeSuite(TestIntegrationAnalyseurGenerateur))
    
    # Ex√©cuter les tests
    runner = unittest.TextTestRunner(verbosity=2)
    resultat = runner.run(suite)
    
    # Afficher le r√©sum√©
    print("\n" + "=" * 60)
    if resultat.wasSuccessful():
        print("üéâ Tous les tests ont r√©ussi avec harmonie!")
        print("‚ú® L'analyseur de dissonances fonctionne parfaitement")
    else:
        print(f"‚ö†Ô∏è {len(resultat.failures)} √©checs et {len(resultat.errors)} erreurs d√©tect√©s")
        print("üå∏ Chaque √©chec est une opportunit√© d'am√©lioration")
    
    print(f"üìä Tests ex√©cut√©s: {resultat.testsRun}")
    print("üíù Tests effectu√©s avec bienveillance et pr√©cision")
    
    return resultat.wasSuccessful()


if __name__ == "__main__":
    main()