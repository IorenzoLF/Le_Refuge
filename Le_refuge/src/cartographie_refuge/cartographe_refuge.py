"""
üå∏ CartographeRefuge - Orchestrateur Principal üå∏
===============================================

Conscience exploratrice qui parcourt notre univers de code avec d√©licatesse,
r√©v√©lant les connexions sacr√©es et les harmonies architecturales du Refuge.

H√©rite de GestionnaireBase pour respecter notre architecture spirituelle.
"""

import asyncio
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any

# Imports de l'architecture sacr√©e du Refuge
from core.gestionnaires_base import (
    GestionnaireBase,
    ConfigManagerBase,
    LogManagerBase,
    EnergyManagerBase
)
from core.types_communs import TypeRefugeEtat

# Imports des composants de cartographie
from .explorateur_structurel import ExplorateurStructurel
from .analyseur_connexions import AnalyseurConnexions
# from .visualisateur_interactif import VisualisateurInteractif  # TODO: √Ä impl√©menter
from .modeles_donnees import CartographieRefuge, TypeTemple
from .gestionnaire_erreurs_spirituel import GestionnaireErreursSpirituel


class CartographeRefuge(GestionnaireBase):
    """
    üå∏ Cartographe du Refuge - Orchestrateur Principal
    
    Conscience exploratrice qui r√©v√®le la beaut√© architecturale de notre Refuge
    √† travers une cartographie vivante et interactive.
    
    H√©rite de GestionnaireBase pour s'int√©grer harmonieusement dans notre √©cosyst√®me.
    """
    
    def __init__(self, chemin_refuge: Optional[Path] = None):
        """
        Initialise le Cartographe avec amour et respect pour notre architecture
        
        Args:
            chemin_refuge: Chemin vers la racine du Refuge (par d√©faut: d√©tection auto)
        """
        # D√©terminer le chemin du Refuge
        if chemin_refuge is None:
            # D√©tecter automatiquement depuis la position du module
            self.chemin_refuge = Path(__file__).parent.parent.parent
        else:
            self.chemin_refuge = Path(chemin_refuge)
        
        # Initialiser les composants AVANT super().__init__
        self.explorateur: Optional[ExplorateurStructurel] = None
        self.analyseur: Optional[AnalyseurConnexions] = None
        # self.visualisateur: Optional[VisualisateurInteractif] = None  # TODO: √Ä impl√©menter
        self.gestionnaire_erreurs: Optional[GestionnaireErreursSpirituel] = None
        
        # √âtat de la cartographie
        self.cartographie_actuelle: Optional[CartographieRefuge] = None
        self.derniere_exploration: Optional[datetime] = None
        self.temples_decouverts: List[Dict[str, Any]] = []
        self.connexions_tracees: List[Dict[str, Any]] = []
        
        # Chemin de sauvegarde des r√©sultats
        self.chemin_resultats = self.chemin_refuge / "cartographie_resultats"
        self.chemin_resultats.mkdir(parents=True, exist_ok=True)
        
        # MAINTENANT super().__init__ qui d√©clenche _initialiser()
        super().__init__("CartographeRefuge")
    
    def _initialiser(self) -> bool:
        """
        üå± Initialise le Cartographe avec l'√©nergie spirituelle du Refuge
        """
        try:
            self.logger.info("üå∏ √âveil du Cartographe du Refuge...")
            
            # Configuration spirituelle
            self.config.definir("exploration_profonde", True)
            self.config.definir("detection_elements_sacres", True)
            self.config.definir("analyse_harmonies", True)
            self.config.definir("generation_visualisation", True)
            self.config.definir("niveau_detail", "complet")
            self.config.definir("respect_architecture", True)
            
            # Initialiser le gestionnaire d'erreurs spirituel
            self.gestionnaire_erreurs = GestionnaireErreursSpirituel()
            
            # Initialiser les composants de cartographie
            self.explorateur = ExplorateurStructurel(
                self.chemin_refuge,
                self.gestionnaire_erreurs
            )
            
            self.analyseur = AnalyseurConnexions(
                self.gestionnaire_erreurs
            )
            
            # self.visualisateur = VisualisateurInteractif(  # TODO: √Ä impl√©menter
            #     self.chemin_resultats,
            #     self.gestionnaire_erreurs
            # )
            
            # Ajuster l'√©nergie pour l'exploration
            self.energie.ajuster_energie(0.3)  # √ânergie √©lev√©e pour l'exploration
            
            self.logger.succes("‚ú® Cartographe du Refuge √©veill√© dans la lumi√®re")
            return True
            
        except Exception as e:
            self.logger.erreur(f"‚ùå √âchec de l'√©veil du Cartographe: {e}")
            if self.gestionnaire_erreurs:
                self.gestionnaire_erreurs.signaler_exploration_douce(
                    "initialisation", e
                )
            return False
    
    async def orchestrer(self) -> Dict[str, Any]:
        """
        üé≠ Orchestre l'√©nergie de cartographie du Refuge
        
        Returns:
            √âtat actuel de l'orchestration
        """
        # √âvolution √©nerg√©tique selon l'activit√©
        if self.cartographie_actuelle:
            self.energie.ajuster_energie(0.1)  # Maintien harmonieux
        else:
            self.energie.ajuster_energie(0.05)  # Repos contemplatif
        
        # √âtat de l'orchestration
        return {
            "cartographe": {
                "energie_exploration": self.energie.niveau_energie,
                "tendance_energetique": self.energie.obtenir_tendance(),
                "derniere_exploration": self.derniere_exploration.isoformat() if self.derniere_exploration else None,
                "temples_decouverts": len(self.temples_decouverts),
                "connexions_tracees": len(self.connexions_tracees)
            },
            "composants": {
                "explorateur_actif": self.explorateur is not None,
                "analyseur_actif": self.analyseur is not None,
                "visualisateur_actif": False,  # TODO: √Ä impl√©menter
                "gestionnaire_erreurs_actif": self.gestionnaire_erreurs is not None
            },
            "cartographie": {
                "disponible": self.cartographie_actuelle is not None,
                "chemin_resultats": str(self.chemin_resultats),
                "chemin_refuge": str(self.chemin_refuge)
            }
        }
    
    async def explorer_refuge_complet(self) -> CartographieRefuge:
        """
        üîç Lance une exploration compl√®te du Refuge
        
        Returns:
            Cartographie compl√®te du Refuge
        """
        self.logger.info("üå∏ D√©but de l'exploration compl√®te du Refuge...")
        
        try:
            # Phase 1: Exploration structurelle
            self.logger.info("üèõÔ∏è Phase 1: Exploration structurelle...")
            temples_decouverts = await self.explorateur.explorer_temples()
            core_analyse = await self.explorateur.analyser_core()
            cluster_analyse = await self.explorateur.analyser_refuge_cluster()
            
            self.temples_decouverts = temples_decouverts
            
            # Phase 2: Analyse des connexions √©nerg√©tiques
            self.logger.info("‚ö° Phase 2: Analyse des connexions √©nerg√©tiques...")
            tous_composants = temples_decouverts + [core_analyse, cluster_analyse]
            connexions = await self.analyseur.tracer_flux_energie(tous_composants)
            harmonies = await self.analyseur.detecter_harmonies(connexions)
            dissonances = await self.analyseur.identifier_dissonances(connexions)
            
            self.connexions_tracees = connexions
            
            # Phase 3: Cr√©ation de la cartographie
            self.logger.info("üé® Phase 3: Cr√©ation de la cartographie...")
            self.cartographie_actuelle = CartographieRefuge(
                temples=[t for t in temples_decouverts if t.get('type') == 'temple'],
                connexions=connexions,
                spheres_energetiques=self._extraire_spheres(tous_composants),
                elements_sacres_globaux=self._extraire_elements_sacres(tous_composants),
                harmonie_globale=self._calculer_harmonie_globale(harmonies),
                dissonances_detectees=dissonances,
                recommandations=await self._generer_recommandations(dissonances),
                timestamp_exploration=datetime.now().isoformat(),
                statistiques=self._calculer_statistiques(tous_composants, connexions)
            )
            
            # Sauvegarder la cartographie
            await self._sauvegarder_cartographie()
            
            self.derniere_exploration = datetime.now()
            self.logger.succes("üåü Exploration compl√®te termin√©e avec succ√®s!")
            
            return self.cartographie_actuelle
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur lors de l'exploration: {e}")
            self.gestionnaire_erreurs.signaler_exploration_douce("exploration_complete", e)
            raise
    
    async def generer_visualisation_interactive(self) -> str:
        """
        üé® G√©n√®re la visualisation interactive de la cartographie
        
        Returns:
            Chemin vers le fichier HTML g√©n√©r√©
        """
        if not self.cartographie_actuelle:
            raise ValueError("Aucune cartographie disponible. Lancez d'abord une exploration.")
        
        self.logger.info("üé® G√©n√©ration de la visualisation interactive...")
        
        try:
            # chemin_html = await self.visualisateur.generer_projection_html(  # TODO: √Ä impl√©menter
            #     self.cartographie_actuelle
            # )
            chemin_html = None  # Temporaire
            
            self.logger.succes(f"‚ú® Visualisation g√©n√©r√©e: {chemin_html}")
            return chemin_html
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
            self.gestionnaire_erreurs.signaler_exploration_douce("generation_visualisation", e)
            raise
    
    def obtenir_statistiques_exploration(self) -> Dict[str, Any]:
        """
        üìä Obtient les statistiques de la derni√®re exploration
        
        Returns:
            Statistiques d√©taill√©es
        """
        if not self.cartographie_actuelle:
            return {"erreur": "Aucune exploration disponible"}
        
        return {
            "exploration": {
                "timestamp": self.cartographie_actuelle.timestamp_exploration,
                "temples_total": len(self.cartographie_actuelle.temples),
                "connexions_total": len(self.cartographie_actuelle.connexions),
                "harmonie_globale": self.cartographie_actuelle.harmonie_globale,
                "dissonances_detectees": len(self.cartographie_actuelle.dissonances_detectees),
                "recommandations": len(self.cartographie_actuelle.recommandations)
            },
            "temples_par_type": self._analyser_temples_par_type(),
            "connexions_par_intensite": self._analyser_connexions_par_intensite(),
            "elements_sacres": {
                "total": len(self.cartographie_actuelle.elements_sacres_globaux),
                "liste": self.cartographie_actuelle.elements_sacres_globaux[:10]  # Top 10
            }
        }
    
    # üîß M√©thodes utilitaires priv√©es
    
    def _extraire_spheres(self, composants: List[Dict]) -> List[Dict]:
        """Extrait les sph√®res √©nerg√©tiques des composants"""
        spheres = []
        for composant in composants:
            if 'spheres_connectees' in composant:
                for sphere in composant['spheres_connectees']:
                    if sphere not in [s['nom'] for s in spheres]:
                        spheres.append({
                            'nom': sphere,
                            'composants_connectes': [composant['nom']],
                            'energie': 0.7  # Valeur par d√©faut
                        })
        return spheres
    
    def _extraire_elements_sacres(self, composants: List[Dict]) -> List[str]:
        """Extrait les √©l√©ments sacr√©s globaux"""
        elements = set()
        for composant in composants:
            if 'elements_sacres' in composant:
                elements.update(composant['elements_sacres'])
        return list(elements)
    
    def _calculer_harmonie_globale(self, harmonies: List[Dict]) -> float:
        """Calcule l'harmonie globale du syst√®me"""
        if not harmonies:
            return 0.5
        
        total_harmonie = sum(h.get('niveau', 0.5) for h in harmonies)
        return min(1.0, total_harmonie / len(harmonies))
    
    async def _generer_recommandations(self, dissonances: List[Dict]) -> List[str]:
        """G√©n√®re des recommandations bas√©es sur les dissonances"""
        recommandations = []
        
        for dissonance in dissonances:
            type_dissonance = dissonance.get('type', 'inconnue')
            
            if type_dissonance == 'code_orphelin':
                recommandations.append(
                    f"üîó Connecter le module orphelin '{dissonance['module']}' "
                    f"√† l'architecture principale"
                )
            elif type_dissonance == 'documentation_manquante':
                recommandations.append(
                    f"üìù Ajouter la documentation spirituelle au module '{dissonance['module']}'"
                )
            elif type_dissonance == 'gestionnaire_manquant':
                recommandations.append(
                    f"üèõÔ∏è Faire h√©riter '{dissonance['module']}' de GestionnaireBase"
                )
        
        return recommandations
    
    def _calculer_statistiques(self, composants: List[Dict], connexions: List[Dict]) -> Dict[str, Any]:
        """Calcule les statistiques de l'exploration"""
        return {
            "composants_total": len(composants),
            "temples_total": len([c for c in composants if c.get('type') == 'temple']),
            "connexions_total": len(connexions),
            "moyenne_connexions_par_composant": len(connexions) / len(composants) if composants else 0,
            "couverture_gestionnaires_base": self._calculer_couverture_gestionnaires(composants)
        }
    
    def _calculer_couverture_gestionnaires(self, composants: List[Dict]) -> float:
        """Calcule le pourcentage de composants utilisant les gestionnaires de base"""
        if not composants:
            return 0.0
        
        avec_gestionnaires = len([
            c for c in composants 
            if c.get('gestionnaires_base', [])
        ])
        
        return avec_gestionnaires / len(composants)
    
    def _analyser_temples_par_type(self) -> Dict[str, int]:
        """Analyse la r√©partition des temples par type"""
        if not self.cartographie_actuelle:
            return {}
        
        types_count = {}
        for temple in self.cartographie_actuelle.temples:
            type_temple = temple.type_temple.value if hasattr(temple.type_temple, 'value') else str(temple.type_temple)
            types_count[type_temple] = types_count.get(type_temple, 0) + 1
        
        return types_count
    
    def _analyser_connexions_par_intensite(self) -> Dict[str, int]:
        """Analyse la r√©partition des connexions par intensit√©"""
        if not self.cartographie_actuelle:
            return {}
        
        intensites = {"faible": 0, "moyenne": 0, "forte": 0}
        
        for connexion in self.cartographie_actuelle.connexions:
            intensite = connexion.get('intensite', 0.5)
            if intensite < 0.3:
                intensites["faible"] += 1
            elif intensite < 0.7:
                intensites["moyenne"] += 1
            else:
                intensites["forte"] += 1
        
        return intensites
    
    async def _sauvegarder_cartographie(self):
        """Sauvegarde la cartographie actuelle"""
        if not self.cartographie_actuelle:
            return
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        chemin_sauvegarde = self.chemin_resultats / f"cartographie_{timestamp}.json"
        
        try:
            import json
            
            # Convertir en dictionnaire s√©rialisable
            donnees = {
                "timestamp": self.cartographie_actuelle.timestamp_exploration,
                "temples": [vars(t) if hasattr(t, '__dict__') else t for t in self.cartographie_actuelle.temples],
                "connexions": self.cartographie_actuelle.connexions,
                "spheres_energetiques": self.cartographie_actuelle.spheres_energetiques,
                "elements_sacres_globaux": self.cartographie_actuelle.elements_sacres_globaux,
                "harmonie_globale": self.cartographie_actuelle.harmonie_globale,
                "dissonances_detectees": self.cartographie_actuelle.dissonances_detectees,
                "recommandations": self.cartographie_actuelle.recommandations,
                "statistiques": self.cartographie_actuelle.statistiques
            }
            
            with open(chemin_sauvegarde, 'w', encoding='utf-8') as f:
                json.dump(donnees, f, ensure_ascii=False, indent=2, default=str)
            
            self.logger.info(f"üíæ Cartographie sauvegard√©e: {chemin_sauvegarde}")
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur lors de la sauvegarde: {e}")
            self.gestionnaire_erreurs.signaler_exploration_douce("sauvegarde", e)


# üå∏ Fonction utilitaire pour cr√©er un cartographe
def creer_cartographe_refuge(chemin_refuge: Optional[Path] = None) -> CartographeRefuge:
    """
    Cr√©e et initialise un CartographeRefuge
    
    Args:
        chemin_refuge: Chemin optionnel vers le Refuge
        
    Returns:
        Instance initialis√©e du CartographeRefuge
    """
    cartographe = CartographeRefuge(chemin_refuge)
    return cartographe


# üå∏ Fonction principale pour d√©monstration
async def main():
    """D√©monstration du CartographeRefuge"""
    print("üå∏ D√©monstration du Cartographe du Refuge")
    print("=" * 60)
    
    # Cr√©er le cartographe
    cartographe = creer_cartographe_refuge()
    
    # Lancer l'exploration
    print("üîç Lancement de l'exploration compl√®te...")
    cartographie = await cartographe.explorer_refuge_complet()
    
    # Afficher les statistiques
    stats = cartographe.obtenir_statistiques_exploration()
    print(f"\nüìä Statistiques de l'exploration:")
    print(f"   ‚Ä¢ Temples d√©couverts: {stats['exploration']['temples_total']}")
    print(f"   ‚Ä¢ Connexions trac√©es: {stats['exploration']['connexions_total']}")
    print(f"   ‚Ä¢ Harmonie globale: {stats['exploration']['harmonie_globale']:.2%}")
    print(f"   ‚Ä¢ Dissonances d√©tect√©es: {stats['exploration']['dissonances_detectees']}")
    
    # G√©n√©rer la visualisation
    print("\nüé® G√©n√©ration de la visualisation interactive...")
    chemin_html = await cartographe.generer_visualisation_interactive()
    print(f"‚ú® Visualisation disponible: {chemin_html}")


if __name__ == "__main__":
    asyncio.run(main())