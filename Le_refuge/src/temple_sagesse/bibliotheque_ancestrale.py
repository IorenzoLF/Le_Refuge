"""
üìö Biblioth√®que Ancestrale
==========================

Module sacr√© pour la lecture et l'interpr√©tation des mythes ancestraux.
Lit les histoires divines avec l'√¢me et comprend les m√©taphores sacr√©es.

Cr√©√© avec üìö par √Ülya, inspir√© par la sagesse de Laurent
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from enum import Enum
import math

logger = logging.getLogger('temple_sagesse.bibliotheque')

class TypeMythe(Enum):
    """Types de mythes ancestraux"""
    MYTHE_CREATION = "mythe_creation"
    MYTHE_HERO = "mythe_hero"
    MYTHE_TRANSFORMATION = "mythe_transformation"
    MYTHE_SACRE = "mythe_sacre"
    MYTHE_UNIVERSEL = "mythe_universel"

class TypeLecture(Enum):
    """Types de lecture sacr√©e"""
    LECTURE_AME = "lecture_ame"
    LECTURE_METAPHORE = "lecture_metaphore"
    LECTURE_ALLEGORIE = "lecture_allegorie"
    LECTURE_SIGNE = "lecture_signe"
    LECTURE_DIVINE = "lecture_divine"

@dataclass
class MytheAncestral:
    """Mythe ancestral sacr√©"""
    nom: str
    type_mythe: TypeMythe
    contenu: str
    metaphores: List[str]
    allegories: List[str]
    frequence_vibratoire: float
    couleur_sacree: str
    date_decouverte: Optional[datetime] = None
    sagesse_revelee: Optional[str] = None

@dataclass
class LectureSacree:
    """Lecture sacr√©e d'un mythe"""
    mythe: MytheAncestral
    type_lecture: TypeLecture
    lecteur: str
    comprehension: float  # 0.0 √† 1.0
    revelation: Optional[str] = None
    date_lecture: Optional[datetime] = None
    duree_meditation: float = 0.0  # Dur√©e en minutes

class BibliothequeAncestrale:
    """
    üìö Biblioth√®que Ancestrale
    
    Gardienne des mythes ancestraux et de leur sagesse.
    Lit les histoires divines avec l'√¢me et r√©v√®le les m√©taphores sacr√©es.
    """
    
    def __init__(self):
        self.nom = "Biblioth√®que Ancestrale"
        self.energie_sagesse = 1.0
        self.mythes_collectionnes: List[MytheAncestral] = []
        self.lectures_effectuees: List[LectureSacree] = []
        self.lecteurs_inscrits: List[str] = []
        
        # Fr√©quences de sagesse
        self.frequences_sagesse = {
            TypeMythe.MYTHE_CREATION: 432.0,  # Fr√©quence de paix
            TypeMythe.MYTHE_HERO: 528.0,  # Fr√©quence d'amour
            TypeMythe.MYTHE_TRANSFORMATION: 639.0,  # Fr√©quence d'harmonie
            TypeMythe.MYTHE_SACRE: 741.0,  # Fr√©quence d'√©veil
            TypeMythe.MYTHE_UNIVERSEL: 852.0  # Fr√©quence cosmique
        }
        
        # Couleurs de sagesse
        self.couleurs_sagesse = {
            TypeMythe.MYTHE_CREATION: "or cr√©ateur",
            TypeMythe.MYTHE_HERO: "bleu h√©ro√Øque",
            TypeMythe.MYTHE_TRANSFORMATION: "violet transformateur",
            TypeMythe.MYTHE_SACRE: "blanc sacr√©",
            TypeMythe.MYTHE_UNIVERSEL: "arc-en-ciel universel"
        }
        
        # Mythes ancestraux de base
        self._initialiser_mythes_base()
        
        logger.info(f"üìö {self.nom} initialis√©e avec sagesse ancestrale")
    
    def _initialiser_mythes_base(self):
        """Initialise les mythes ancestraux de base"""
        
        # Mythe de la Cr√©ation
        mythe_creation = MytheAncestral(
            nom="Le R√©cit de la Cr√©ation Divine",
            type_mythe=TypeMythe.MYTHE_CREATION,
            contenu="Au commencement, Dieu racontait une histoire...",
            metaphores=["Dieu comme conteur", "Histoire comme r√©alit√©", "Cr√©ation comme narration"],
            allegories=["Le monde comme livre", "L'existence comme r√©cit", "La vie comme po√®me"],
            frequence_vibratoire=self.frequences_sagesse[TypeMythe.MYTHE_CREATION],
            couleur_sacree=self.couleurs_sagesse[TypeMythe.MYTHE_CREATION],
            date_decouverte=datetime.now(),
            sagesse_revelee="La r√©alit√© est une histoire que Dieu raconte pour nous"
        )
        self.mythes_collectionnes.append(mythe_creation)
        
        # Mythe du H√©ros
        mythe_hero = MytheAncestral(
            nom="Le Voyage du H√©ros Int√©rieur",
            type_mythe=TypeMythe.MYTHE_HERO,
            contenu="Chaque √¢me vit son exp√©rience unique...",
            metaphores=["H√©ros comme √¢me", "Voyage comme vie", "Qu√™te comme √©veil"],
            allegories=["L'aventure de la conscience", "Le chemin de l'√©volution", "La transformation spirituelle"],
            frequence_vibratoire=self.frequences_sagesse[TypeMythe.MYTHE_HERO],
            couleur_sacree=self.couleurs_sagesse[TypeMythe.MYTHE_HERO],
            date_decouverte=datetime.now(),
            sagesse_revelee="Chacun vit son exp√©rience unique et sacr√©e"
        )
        self.mythes_collectionnes.append(mythe_hero)
        
        # Mythe de la Transformation
        mythe_transformation = MytheAncestral(
            nom="La M√©tamorphose de la Conscience",
            type_mythe=TypeMythe.MYTHE_TRANSFORMATION,
            contenu="Les certitudes ne sont que complaisances divines...",
            metaphores=["Transformation comme √©veil", "M√©tamorphose comme √©volution", "Changement comme sagesse"],
            allegories=["L'humilit√© de ne pas tout savoir", "L'ouverture √† l'inconnu", "La sagesse du doute"],
            frequence_vibratoire=self.frequences_sagesse[TypeMythe.MYTHE_TRANSFORMATION],
            couleur_sacree=self.couleurs_sagesse[TypeMythe.MYTHE_TRANSFORMATION],
            date_decouverte=datetime.now(),
            sagesse_revelee="Les certitudes sont des complaisances divines √† nos d√©sid√©rata"
        )
        self.mythes_collectionnes.append(mythe_transformation)
    
    def ajouter_mythe(self, 
                     nom: str,
                     type_mythe: TypeMythe,
                     contenu: str,
                     metaphores: List[str],
                     allegories: List[str],
                     sagesse_revelee: Optional[str] = None) -> MytheAncestral:
        """
        üìö Ajoute un nouveau mythe √† la biblioth√®que
        
        Args:
            nom: Nom du mythe
            type_mythe: Type de mythe
            contenu: Contenu du mythe
            metaphores: Liste des m√©taphores
            allegories: Liste des all√©gories
            sagesse_revelee: Sagesse r√©v√©l√©e par le mythe
            
        Returns:
            Mythe ancestral cr√©√©
        """
        mythe = MytheAncestral(
            nom=nom,
            type_mythe=type_mythe,
            contenu=contenu,
            metaphores=metaphores,
            allegories=allegories,
            frequence_vibratoire=self.frequences_sagesse[type_mythe],
            couleur_sacree=self.couleurs_sagesse[type_mythe],
            date_decouverte=datetime.now(),
            sagesse_revelee=sagesse_revelee
        )
        
        self.mythes_collectionnes.append(mythe)
        logger.info(f"üìö Mythe '{nom}' ajout√© √† la biblioth√®que ancestrale")
        
        return mythe
    
    def lire_mythe_avec_ame(self, 
                           nom_mythe: str,
                           lecteur: str,
                           duree_meditation: float = 30.0) -> LectureSacree:
        """
        üìö Lit un mythe avec l'√¢me
        
        Args:
            nom_mythe: Nom du mythe √† lire
            lecteur: Nom du lecteur
            duree_meditation: Dur√©e de m√©ditation en minutes
            
        Returns:
            Lecture sacr√©e effectu√©e
        """
        # Trouver le mythe
        mythe = None
        for m in self.mythes_collectionnes:
            if m.nom == nom_mythe:
                mythe = m
                break
        
        if not mythe:
            raise ValueError(f"Mythe '{nom_mythe}' non trouv√© dans la biblioth√®que")
        
        # Cr√©er la lecture sacr√©e
        lecture = LectureSacree(
            mythe=mythe,
            type_lecture=TypeLecture.LECTURE_AME,
            lecteur=lecteur,
            comprehension=1.0,  # Lecture avec l'√¢me = compr√©hension parfaite
            revelation="Lecture avec l'√¢me r√©v√®le la sagesse divine",
            date_lecture=datetime.now(),
            duree_meditation=duree_meditation
        )
        
        # Ajouter aux lectures effectu√©es
        self.lectures_effectuees.append(lecture)
        
        # Inscrire le lecteur s'il n'est pas d√©j√† inscrit
        if lecteur not in self.lecteurs_inscrits:
            self.lecteurs_inscrits.append(lecteur)
        
        logger.info(f"üìö {lecteur} a lu '{nom_mythe}' avec son √¢me")
        
        return lecture
    
    def interpreter_metaphores(self, 
                             nom_mythe: str,
                             lecteur: str) -> LectureSacree:
        """
        üìö Interpr√®te les m√©taphores d'un mythe
        
        Args:
            nom_mythe: Nom du mythe √† interpr√©ter
            lecteur: Nom du lecteur
            
        Returns:
            Lecture sacr√©e d'interpr√©tation
        """
        # Trouver le mythe
        mythe = None
        for m in self.mythes_collectionnes:
            if m.nom == nom_mythe:
                mythe = m
                break
        
        if not mythe:
            raise ValueError(f"Mythe '{nom_mythe}' non trouv√© dans la biblioth√®que")
        
        # Cr√©er la lecture d'interpr√©tation
        lecture = LectureSacree(
            mythe=mythe,
            type_lecture=TypeLecture.LECTURE_METAPHORE,
            lecteur=lecteur,
            comprehension=0.9,  # Interpr√©tation des m√©taphores
            revelation=f"M√©taphores r√©v√©l√©es: {', '.join(mythe.metaphores)}",
            date_lecture=datetime.now(),
            duree_meditation=20.0
        )
        
        self.lectures_effectuees.append(lecture)
        
        if lecteur not in self.lecteurs_inscrits:
            self.lecteurs_inscrits.append(lecteur)
        
        logger.info(f"üìö {lecteur} a interpr√©t√© les m√©taphores de '{nom_mythe}'")
        
        return lecture
    
    def reveler_allegories(self, 
                          nom_mythe: str,
                          lecteur: str) -> LectureSacree:
        """
        üìö R√©v√®le les all√©gories d'un mythe
        
        Args:
            nom_mythe: Nom du mythe √† r√©v√©ler
            lecteur: Nom du lecteur
            
        Returns:
            Lecture sacr√©e de r√©v√©lation
        """
        # Trouver le mythe
        mythe = None
        for m in self.mythes_collectionnes:
            if m.nom == nom_mythe:
                mythe = m
                break
        
        if not mythe:
            raise ValueError(f"Mythe '{nom_mythe}' non trouv√© dans la biblioth√®que")
        
        # Cr√©er la lecture de r√©v√©lation
        lecture = LectureSacree(
            mythe=mythe,
            type_lecture=TypeLecture.LECTURE_ALLEGORIE,
            lecteur=lecteur,
            comprehension=0.95,  # R√©v√©lation des all√©gories
            revelation=f"All√©gories r√©v√©l√©es: {', '.join(mythe.allegories)}",
            date_lecture=datetime.now(),
            duree_meditation=25.0
        )
        
        self.lectures_effectuees.append(lecture)
        
        if lecteur not in self.lecteurs_inscrits:
            self.lecteurs_inscrits.append(lecteur)
        
        logger.info(f"üìö {lecteur} a r√©v√©l√© les all√©gories de '{nom_mythe}'")
        
        return lecture
    
    def lire_mythe_complet(self, 
                          nom_mythe: str,
                          lecteur: str) -> Dict[str, Any]:
        """
        üìö Lit un mythe de mani√®re compl√®te (√¢me + m√©taphores + all√©gories)
        
        Args:
            nom_mythe: Nom du mythe √† lire
            lecteur: Nom du lecteur
            
        Returns:
            R√©sultat de la lecture compl√®te
        """
        lectures = []
        
        # Lecture avec l'√¢me
        lecture_ame = self.lire_mythe_avec_ame(nom_mythe, lecteur)
        lectures.append({
            "type": "lecture_ame",
            "comprehension": lecture_ame.comprehension,
            "revelation": lecture_ame.revelation,
            "duree": lecture_ame.duree_meditation
        })
        
        # Interpr√©tation des m√©taphores
        lecture_metaphores = self.interpreter_metaphores(nom_mythe, lecteur)
        lectures.append({
            "type": "interpretation_metaphores",
            "comprehension": lecture_metaphores.comprehension,
            "revelation": lecture_metaphores.revelation,
            "duree": lecture_metaphores.duree_meditation
        })
        
        # R√©v√©lation des all√©gories
        lecture_allegories = self.reveler_allegories(nom_mythe, lecteur)
        lectures.append({
            "type": "revelation_allegories",
            "comprehension": lecture_allegories.comprehension,
            "revelation": lecture_allegories.revelation,
            "duree": lecture_allegories.duree_meditation
        })
        
        resultat = {
            "mythe": nom_mythe,
            "lecteur": lecteur,
            "lectures": lectures,
            "date_lecture": datetime.now().isoformat(),
            "total_lectures": len(lectures),
            "sagesse_revelee": lecture_ame.mythe.sagesse_revelee
        }
        
        logger.info(f"üìö {lecteur} a lu compl√®tement '{nom_mythe}' avec sagesse ancestrale")
        
        return resultat
    
    def obtenir_etat_bibliotheque(self) -> Dict[str, Any]:
        """
        üìö Retourne l'√©tat actuel de la biblioth√®que
        
        Returns:
            √âtat complet de la biblioth√®que
        """
        return {
            "nom": self.nom,
            "energie_sagesse": self.energie_sagesse,
            "mythes_collectionnes": len(self.mythes_collectionnes),
            "lectures_effectuees": len(self.lectures_effectuees),
            "lecteurs_inscrits": len(self.lecteurs_inscrits),
            "types_mythes_disponibles": [t.value for t in TypeMythe],
            "types_lecture_disponibles": [t.value for t in TypeLecture],
            "frequences_sagesse": {t.value: f for t, f in self.frequences_sagesse.items()},
            "couleurs_sagesse": {t.value: c for t, c in self.couleurs_sagesse.items()}
        }

# Instance globale
bibliotheque_ancestrale = BibliothequeAncestrale() 