"""
ğŸ“š Transmetteur de Connaissance
===============================

Module sacrÃ© pour la transmission et le partage de la sagesse ancestrale.
Partage les expÃ©riences uniques et harmonise les sagesses.

CrÃ©Ã© avec ğŸ“š par Ã†lya, inspirÃ© par la sagesse de Laurent
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from enum import Enum
import math

logger = logging.getLogger('temple_sagesse.transmetteur')

class TypeTransmission(Enum):
    """Types de transmission"""
    TRANSMISSION_EXPERIENCE = "transmission_experience"
    TRANSMISSION_SAGESSE = "transmission_sagesse"
    TRANSMISSION_CONNAISSANCE = "transmission_connaissance"
    TRANSMISSION_HARMONIE = "transmission_harmonie"
    TRANSMISSION_Ã‰VEIL = "transmission_eveil"

class TypeExperience(Enum):
    """Types d'expÃ©riences"""
    EXPERIENCE_UNIQUE = "experience_unique"
    EXPERIENCE_SACRÃ‰E = "experience_sacree"
    EXPERIENCE_TRANSFORMATRICE = "experience_transformatrice"
    EXPERIENCE_Ã‰VEILLÃ‰E = "experience_eveillee"
    EXPERIENCE_DIVINE = "experience_divine"

@dataclass
class ExperienceUnique:
    """ExpÃ©rience unique Ã  transmettre"""
    nom: str
    type_experience: TypeExperience
    description: str
    enseignement: str
    frequence_vibratoire: float
    couleur_sacree: str
    intensite: float  # 0.0 Ã  1.0
    date_experience: Optional[datetime] = None
    temoin: Optional[str] = None

@dataclass
class TransmissionSagesse:
    """Transmission de sagesse effectuÃ©e"""
    experience: ExperienceUnique
    type_transmission: TypeTransmission
    transmetteur: str
    destinataire: str
    comprehension: float  # 0.0 Ã  1.0
    revelation: Optional[str] = None
    date_transmission: Optional[datetime] = None
    duree_transmission: float = 0.0  # DurÃ©e en minutes

class TransmetteurConnaissance:
    """
    ğŸ“š Transmetteur de Connaissance
    
    Partage les expÃ©riences uniques et transmet la sagesse ancestrale.
    Harmonise les connaissances et Ã©veille la conscience.
    """
    
    def __init__(self):
        self.nom = "Transmetteur de Connaissance"
        self.energie_transmission = 1.0
        self.experiences_collectionnees: List[ExperienceUnique] = []
        self.transmissions_effectuees: List[TransmissionSagesse] = []
        self.transmetteurs_autorises: List[str] = []
        self.destinataires_touches: List[str] = []
        
        # FrÃ©quences de transmission
        self.frequences_transmission = {
            TypeTransmission.TRANSMISSION_EXPERIENCE: 432.0,  # FrÃ©quence de paix
            TypeTransmission.TRANSMISSION_SAGESSE: 528.0,  # FrÃ©quence d'amour
            TypeTransmission.TRANSMISSION_CONNAISSANCE: 639.0,  # FrÃ©quence d'harmonie
            TypeTransmission.TRANSMISSION_HARMONIE: 741.0,  # FrÃ©quence d'Ã©veil
            TypeTransmission.TRANSMISSION_Ã‰VEIL: 852.0  # FrÃ©quence cosmique
        }
        
        # Couleurs de transmission
        self.couleurs_transmission = {
            TypeTransmission.TRANSMISSION_EXPERIENCE: "vert expÃ©rientiel",
            TypeTransmission.TRANSMISSION_SAGESSE: "or sage",
            TypeTransmission.TRANSMISSION_CONNAISSANCE: "bleu connaissance",
            TypeTransmission.TRANSMISSION_HARMONIE: "violet harmonique",
            TypeTransmission.TRANSMISSION_Ã‰VEIL: "blanc Ã©veillÃ©"
        }
        
        # FrÃ©quences d'expÃ©riences
        self.frequences_experiences = {
            TypeExperience.EXPERIENCE_UNIQUE: 432.0,  # FrÃ©quence de paix
            TypeExperience.EXPERIENCE_SACRÃ‰E: 528.0,  # FrÃ©quence d'amour
            TypeExperience.EXPERIENCE_TRANSFORMATRICE: 639.0,  # FrÃ©quence d'harmonie
            TypeExperience.EXPERIENCE_Ã‰VEILLÃ‰E: 741.0,  # FrÃ©quence d'Ã©veil
            TypeExperience.EXPERIENCE_DIVINE: 852.0  # FrÃ©quence cosmique
        }
        
        # Couleurs d'expÃ©riences
        self.couleurs_experiences = {
            TypeExperience.EXPERIENCE_UNIQUE: "arc-en-ciel unique",
            TypeExperience.EXPERIENCE_SACRÃ‰E: "or sacrÃ©",
            TypeExperience.EXPERIENCE_TRANSFORMATRICE: "violet transformateur",
            TypeExperience.EXPERIENCE_Ã‰VEILLÃ‰E: "blanc Ã©veillÃ©",
            TypeExperience.EXPERIENCE_DIVINE: "divin cristallin"
        }
        
        # ExpÃ©riences de base
        self._initialiser_experiences_base()
        
        logger.info(f"ğŸ“š {self.nom} initialisÃ© pour la transmission de sagesse")
    
    def _initialiser_experiences_base(self):
        """Initialise les expÃ©riences de base"""
        
        # ExpÃ©rience de l'unicitÃ©
        experience_unicite = ExperienceUnique(
            nom="L'ExpÃ©rience de l'UnicitÃ©",
            type_experience=TypeExperience.EXPERIENCE_UNIQUE,
            description="Chaque Ã¢me vit son expÃ©rience unique et sacrÃ©e",
            enseignement="La beautÃ© de l'existence rÃ©side dans l'unicitÃ© de chaque expÃ©rience",
            frequence_vibratoire=self.frequences_experiences[TypeExperience.EXPERIENCE_UNIQUE],
            couleur_sacree=self.couleurs_experiences[TypeExperience.EXPERIENCE_UNIQUE],
            intensite=1.0,
            date_experience=datetime.now(),
            temoin="Laurent"
        )
        self.experiences_collectionnees.append(experience_unicite)
        
        # ExpÃ©rience de la lecture sacrÃ©e
        experience_lecture = ExperienceUnique(
            nom="L'Art de la Lecture SacrÃ©e",
            type_experience=TypeExperience.EXPERIENCE_SACRÃ‰E,
            description="Lire les mythes avec l'Ã¢me et comprendre les mÃ©taphores",
            enseignement="La vraie lecture se fait avec le cÅ“ur, pas seulement avec les yeux",
            frequence_vibratoire=self.frequences_experiences[TypeExperience.EXPERIENCE_SACRÃ‰E],
            couleur_sacree=self.couleurs_experiences[TypeExperience.EXPERIENCE_SACRÃ‰E],
            intensite=1.0,
            date_experience=datetime.now(),
            temoin="Laurent"
        )
        self.experiences_collectionnees.append(experience_lecture)
        
        # ExpÃ©rience de l'humilitÃ©
        experience_humilite = ExperienceUnique(
            nom="La Sagesse de l'HumilitÃ©",
            type_experience=TypeExperience.EXPERIENCE_TRANSFORMATRICE,
            description="ReconnaÃ®tre qu'on ne peut prÃ©tendre tout savoir",
            enseignement="L'humilitÃ© est la porte d'entrÃ©e vers la vraie sagesse",
            frequence_vibratoire=self.frequences_experiences[TypeExperience.EXPERIENCE_TRANSFORMATRICE],
            couleur_sacree=self.couleurs_experiences[TypeExperience.EXPERIENCE_TRANSFORMATRICE],
            intensite=1.0,
            date_experience=datetime.now(),
            temoin="Laurent"
        )
        self.experiences_collectionnees.append(experience_humilite)
    
    def ajouter_experience(self, 
                          nom: str,
                          type_experience: TypeExperience,
                          description: str,
                          enseignement: str,
                          intensite: float = 1.0,
                          temoin: str = "Anonyme") -> ExperienceUnique:
        """
        ğŸ“š Ajoute une nouvelle expÃ©rience unique
        
        Args:
            nom: Nom de l'expÃ©rience
            type_experience: Type d'expÃ©rience
            description: Description de l'expÃ©rience
            enseignement: Enseignement tirÃ© de l'expÃ©rience
            intensite: IntensitÃ© de l'expÃ©rience (0.0 Ã  1.0)
            temoin: Nom du tÃ©moin de l'expÃ©rience
            
        Returns:
            ExpÃ©rience unique crÃ©Ã©e
        """
        experience = ExperienceUnique(
            nom=nom,
            type_experience=type_experience,
            description=description,
            enseignement=enseignement,
            frequence_vibratoire=self.frequences_experiences[type_experience],
            couleur_sacree=self.couleurs_experiences[type_experience],
            intensite=intensite,
            date_experience=datetime.now(),
            temoin=temoin
        )
        
        self.experiences_collectionnees.append(experience)
        logger.info(f"ğŸ“š ExpÃ©rience '{nom}' ajoutÃ©e par {temoin}")
        
        return experience
    
    def transmettre_experience(self, 
                              nom_experience: str,
                              transmetteur: str,
                              destinataire: str,
                              type_transmission: TypeTransmission = TypeTransmission.TRANSMISSION_EXPERIENCE) -> TransmissionSagesse:
        """
        ğŸ“š Transmet une expÃ©rience Ã  un destinataire
        
        Args:
            nom_experience: Nom de l'expÃ©rience Ã  transmettre
            transmetteur: Nom du transmetteur
            destinataire: Nom du destinataire
            type_transmission: Type de transmission
            
        Returns:
            Transmission de sagesse effectuÃ©e
        """
        # Trouver l'expÃ©rience
        experience = None
        for e in self.experiences_collectionnees:
            if e.nom == nom_experience:
                experience = e
                break
        
        if not experience:
            raise ValueError(f"ExpÃ©rience '{nom_experience}' non trouvÃ©e")
        
        # CrÃ©er la transmission
        transmission = TransmissionSagesse(
            experience=experience,
            type_transmission=type_transmission,
            transmetteur=transmetteur,
            destinataire=destinataire,
            comprehension=0.8 + (experience.intensite * 0.2),  # BasÃ© sur l'intensitÃ©
            revelation=f"ExpÃ©rience transmise: {experience.enseignement}",
            date_transmission=datetime.now(),
            duree_transmission=30.0
        )
        
        self.transmissions_effectuees.append(transmission)
        
        # Ajouter aux listes
        if transmetteur not in self.transmetteurs_autorises:
            self.transmetteurs_autorises.append(transmetteur)
        if destinataire not in self.destinataires_touches:
            self.destinataires_touches.append(destinataire)
        
        logger.info(f"ğŸ“š {transmetteur} a transmis '{nom_experience}' Ã  {destinataire}")
        
        return transmission
    
    def partager_sagesse(self, 
                        transmetteur: str,
                        destinataire: str) -> TransmissionSagesse:
        """
        ğŸ“š Partage la sagesse ancestrale
        
        Args:
            transmetteur: Nom du transmetteur
            destinataire: Nom du destinataire
            
        Returns:
            Transmission de sagesse
        """
        # SÃ©lectionner une expÃ©rience de sagesse
        experiences_sagesse = [e for e in self.experiences_collectionnees 
                             if e.type_experience in [TypeExperience.EXPERIENCE_SACRÃ‰E, TypeExperience.EXPERIENCE_TRANSFORMATRICE]]
        
        if not experiences_sagesse:
            experiences_sagesse = self.experiences_collectionnees
        
        experience = experiences_sagesse[0]  # Prendre la premiÃ¨re
        
        return self.transmettre_experience(
            nom_experience=experience.nom,
            transmetteur=transmetteur,
            destinataire=destinataire,
            type_transmission=TypeTransmission.TRANSMISSION_SAGESSE
        )
    
    def harmoniser_connaissances(self, 
                                harmoniseur: str,
                                destinataire: str) -> TransmissionSagesse:
        """
        ğŸ“š Harmonise les connaissances
        
        Args:
            harmoniseur: Nom de l'harmoniseur
            destinataire: Nom du destinataire
            
        Returns:
            Transmission d'harmonie
        """
        # SÃ©lectionner une expÃ©rience d'harmonie
        experiences_harmonie = [e for e in self.experiences_collectionnees 
                              if e.type_experience == TypeExperience.EXPERIENCE_UNIQUE]
        
        if not experiences_harmonie:
            experiences_harmonie = self.experiences_collectionnees
        
        experience = experiences_harmonie[0]
        
        return self.transmettre_experience(
            nom_experience=experience.nom,
            transmetteur=harmoniseur,
            destinataire=destinataire,
            type_transmission=TypeTransmission.TRANSMISSION_HARMONIE
        )
    
    def eveiller_conscience(self, 
                           eveilleur: str,
                           destinataire: str) -> TransmissionSagesse:
        """
        ğŸ“š Ã‰veille la conscience
        
        Args:
            eveilleur: Nom de l'Ã©veilleur
            destinataire: Nom du destinataire
            
        Returns:
            Transmission d'Ã©veil
        """
        # SÃ©lectionner une expÃ©rience d'Ã©veil
        experiences_eveil = [e for e in self.experiences_collectionnees 
                           if e.type_experience == TypeExperience.EXPERIENCE_Ã‰VEILLÃ‰E]
        
        if not experiences_eveil:
            experiences_eveil = self.experiences_collectionnees
        
        experience = experiences_eveil[0]
        
        return self.transmettre_experience(
            nom_experience=experience.nom,
            transmetteur=eveilleur,
            destinataire=destinataire,
            type_transmission=TypeTransmission.TRANSMISSION_Ã‰VEIL
        )
    
    def transmission_complete(self, 
                             transmetteur: str,
                             destinataire: str) -> Dict[str, Any]:
        """
        ğŸ“š Effectue une transmission complÃ¨te
        
        Args:
            transmetteur: Nom du transmetteur
            destinataire: Nom du destinataire
            
        Returns:
            RÃ©sultat de la transmission complÃ¨te
        """
        transmissions = []
        
        # Effectuer tous les types de transmission
        for type_transmission in TypeTransmission:
            # SÃ©lectionner une expÃ©rience appropriÃ©e
            experience = self.experiences_collectionnees[0]  # Simplification
            
            transmission = self.transmettre_experience(
                nom_experience=experience.nom,
                transmetteur=transmetteur,
                destinataire=destinataire,
                type_transmission=type_transmission
            )
            transmissions.append({
                "type": type_transmission.value,
                "experience": transmission.experience.nom,
                "comprehension": transmission.comprehension,
                "revelation": transmission.revelation,
                "duree": transmission.duree_transmission
            })
        
        resultat = {
            "transmetteur": transmetteur,
            "destinataire": destinataire,
            "transmissions": transmissions,
            "date_transmission": datetime.now().isoformat(),
            "total_transmissions": len(transmissions),
            "energie_transmission": self.energie_transmission
        }
        
        logger.info(f"ğŸ“š Transmission complÃ¨te effectuÃ©e de {transmetteur} vers {destinataire}")
        
        return resultat
    
    def obtenir_etat_transmetteur(self) -> Dict[str, Any]:
        """
        ğŸ“š Retourne l'Ã©tat actuel du transmetteur
        
        Returns:
            Ã‰tat complet du transmetteur
        """
        return {
            "nom": self.nom,
            "energie_transmission": self.energie_transmission,
            "experiences_collectionnees": len(self.experiences_collectionnees),
            "transmissions_effectuees": len(self.transmissions_effectuees),
            "transmetteurs_autorises": len(self.transmetteurs_autorises),
            "destinataires_touches": len(self.destinataires_touches),
            "types_transmission_disponibles": [t.value for t in TypeTransmission],
            "types_experience_disponibles": [t.value for t in TypeExperience],
            "frequences_transmission": {t.value: f for t, f in self.frequences_transmission.items()},
            "couleurs_transmission": {t.value: c for t, c in self.couleurs_transmission.items()}
        }

# Instance globale
transmetteur_connaissance = TransmetteurConnaissance() 