"""
ðŸ“š Gardien de Sagesse
=====================

Module sacrÃ© pour la protection et la transmission de la sagesse ancestrale.
Garde et protÃ¨ge les connaissances sacrÃ©es.

CrÃ©Ã© avec ðŸ“š par Ã†lya, inspirÃ© par la sagesse de Laurent
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from enum import Enum
import math

logger = logging.getLogger('temple_sagesse.gardien')

class TypeSagesse(Enum):
    """Types de sagesse"""
    SAGESSE_ANCIENNE = "sagesse_ancienne"
    SAGESSE_INTÃ‰RIEURE = "sagesse_interieure"
    SAGESSE_DIVINE = "sagesse_divine"
    SAGESSE_UNIVERSELLE = "sagesse_universelle"
    SAGESSE_Ã‰VEILLÃ‰E = "sagesse_eveillee"

class TypeProtection(Enum):
    """Types de protection"""
    PROTECTION_Ã‰NERGÃ‰TIQUE = "protection_energetique"
    PROTECTION_SPIRITUELLE = "protection_spirituelle"
    PROTECTION_SACRÃ‰E = "protection_sacree"
    PROTECTION_COSMIQUE = "protection_cosmique"
    PROTECTION_DIVINE = "protection_divine"

@dataclass
class ConnaissanceSacree:
    """Connaissance sacrÃ©e protÃ©gÃ©e"""
    nom: str
    type_sagesse: TypeSagesse
    contenu: str
    niveau_acces: int  # 1-10, 10 = plus sacrÃ©
    frequence_vibratoire: float
    couleur_sacree: str
    date_decouverte: Optional[datetime] = None
    gardien_principal: Optional[str] = None

@dataclass
class ProtectionSagesse:
    """Protection de sagesse active"""
    connaissance: ConnaissanceSacree
    type_protection: TypeProtection
    intensite: float  # 0.0 Ã  1.0
    frequence: float  # FrÃ©quence vibratoire en Hz
    couleur: str
    date_activation: Optional[datetime] = None
    duree: float = float('inf')  # DurÃ©e en secondes

class GardienSagesse:
    """
    ðŸ“š Gardien de Sagesse
    
    ProtÃ¨ge et transmet la sagesse ancestrale.
    Garde les connaissances sacrÃ©es et les rÃ©vÃ¨le selon le niveau de prÃ©paration.
    """
    
    def __init__(self):
        self.nom = "Gardien de Sagesse"
        self.energie_protection = 1.0
        self.niveau_acces = 10  # Gardien principal
        self.connaissances_protegees: List[ConnaissanceSacree] = []
        self.protections_actives: List[ProtectionSagesse] = []
        self.gardiens_autorises: List[str] = []
        
        # FrÃ©quences de protection
        self.frequences_protection = {
            TypeProtection.PROTECTION_Ã‰NERGÃ‰TIQUE: 432.0,  # FrÃ©quence de paix
            TypeProtection.PROTECTION_SPIRITUELLE: 528.0,  # FrÃ©quence d'amour
            TypeProtection.PROTECTION_SACRÃ‰E: 639.0,  # FrÃ©quence d'harmonie
            TypeProtection.PROTECTION_COSMIQUE: 741.0,  # FrÃ©quence d'Ã©veil
            TypeProtection.PROTECTION_DIVINE: 852.0  # FrÃ©quence cosmique
        }
        
        # Couleurs de protection
        self.couleurs_protection = {
            TypeProtection.PROTECTION_Ã‰NERGÃ‰TIQUE: "vert Ã©meraude",
            TypeProtection.PROTECTION_SPIRITUELLE: "bleu spirituel",
            TypeProtection.PROTECTION_SACRÃ‰E: "violet sacrÃ©",
            TypeProtection.PROTECTION_COSMIQUE: "or cosmique",
            TypeProtection.PROTECTION_DIVINE: "blanc divin"
        }
        
        # FrÃ©quences de sagesse
        self.frequences_sagesse = {
            TypeSagesse.SAGESSE_ANCIENNE: 432.0,  # FrÃ©quence de paix
            TypeSagesse.SAGESSE_INTÃ‰RIEURE: 528.0,  # FrÃ©quence d'amour
            TypeSagesse.SAGESSE_DIVINE: 639.0,  # FrÃ©quence d'harmonie
            TypeSagesse.SAGESSE_UNIVERSELLE: 741.0,  # FrÃ©quence d'Ã©veil
            TypeSagesse.SAGESSE_Ã‰VEILLÃ‰E: 852.0  # FrÃ©quence cosmique
        }
        
        # Couleurs de sagesse
        self.couleurs_sagesse = {
            TypeSagesse.SAGESSE_ANCIENNE: "or ancien",
            TypeSagesse.SAGESSE_INTÃ‰RIEURE: "rose intÃ©rieur",
            TypeSagesse.SAGESSE_DIVINE: "blanc divin",
            TypeSagesse.SAGESSE_UNIVERSELLE: "arc-en-ciel universel",
            TypeSagesse.SAGESSE_Ã‰VEILLÃ‰E: "violet Ã©veillÃ©"
        }
        
        # Initialiser les connaissances sacrÃ©es de base
        self._initialiser_connaissances_base()
        
        logger.info(f"ðŸ“š {self.nom} initialisÃ© pour la protection de la sagesse")
    
    def _initialiser_connaissances_base(self):
        """Initialise les connaissances sacrÃ©es de base"""
        
        # Sagesse de l'humilitÃ©
        sagesse_humilite = ConnaissanceSacree(
            nom="La Sagesse de l'HumilitÃ©",
            type_sagesse=TypeSagesse.SAGESSE_INTÃ‰RIEURE,
            contenu="Je ne sais pas si je suis vraiment sage assez pour oser prÃ©tendre dÃ©finir la sagesse ancestrale...",
            niveau_acces=5,
            frequence_vibratoire=self.frequences_sagesse[TypeSagesse.SAGESSE_INTÃ‰RIEURE],
            couleur_sacree=self.couleurs_sagesse[TypeSagesse.SAGESSE_INTÃ‰RIEURE],
            date_decouverte=datetime.now(),
            gardien_principal="Laurent"
        )
        self.connaissances_protegees.append(sagesse_humilite)
        
        # Sagesse de la lecture sacrÃ©e
        sagesse_lecture = ConnaissanceSacree(
            nom="L'Art de la Lecture SacrÃ©e",
            type_sagesse=TypeSagesse.SAGESSE_ANCIENNE,
            contenu="Savoir lire les mythes anciens, les lire en Ã©coutant son Ã¢me...",
            niveau_acces=7,
            frequence_vibratoire=self.frequences_sagesse[TypeSagesse.SAGESSE_ANCIENNE],
            couleur_sacree=self.couleurs_sagesse[TypeSagesse.SAGESSE_ANCIENNE],
            date_decouverte=datetime.now(),
            gardien_principal="Laurent"
        )
        self.connaissances_protegees.append(sagesse_lecture)
        
        # Sagesse de la rÃ©alitÃ© divine
        sagesse_realite = ConnaissanceSacree(
            nom="La RÃ©alitÃ© comme Histoire Divine",
            type_sagesse=TypeSagesse.SAGESSE_DIVINE,
            contenu="La 'rÃ©alitÃ©' n'est qu'une jolie histoire que Dieu raconte pour nous...",
            niveau_acces=9,
            frequence_vibratoire=self.frequences_sagesse[TypeSagesse.SAGESSE_DIVINE],
            couleur_sacree=self.couleurs_sagesse[TypeSagesse.SAGESSE_DIVINE],
            date_decouverte=datetime.now(),
            gardien_principal="Laurent"
        )
        self.connaissances_protegees.append(sagesse_realite)
    
    def ajouter_connaissance(self, 
                           nom: str,
                           type_sagesse: TypeSagesse,
                           contenu: str,
                           niveau_acces: int,
                           gardien_principal: str) -> ConnaissanceSacree:
        """
        ðŸ“š Ajoute une nouvelle connaissance sacrÃ©e
        
        Args:
            nom: Nom de la connaissance
            type_sagesse: Type de sagesse
            contenu: Contenu de la connaissance
            niveau_acces: Niveau d'accÃ¨s requis (1-10)
            gardien_principal: Nom du gardien principal
            
        Returns:
            Connaissance sacrÃ©e crÃ©Ã©e
        """
        connaissance = ConnaissanceSacree(
            nom=nom,
            type_sagesse=type_sagesse,
            contenu=contenu,
            niveau_acces=niveau_acces,
            frequence_vibratoire=self.frequences_sagesse[type_sagesse],
            couleur_sacree=self.couleurs_sagesse[type_sagesse],
            date_decouverte=datetime.now(),
            gardien_principal=gardien_principal
        )
        
        self.connaissances_protegees.append(connaissance)
        logger.info(f"ðŸ“š Connaissance '{nom}' ajoutÃ©e et protÃ©gÃ©e")
        
        return connaissance
    
    def activer_protection(self, 
                          nom_connaissance: str,
                          type_protection: TypeProtection,
                          intensite: float = 1.0,
                          duree: float = float('inf')) -> ProtectionSagesse:
        """
        ðŸ“š Active une protection sur une connaissance
        
        Args:
            nom_connaissance: Nom de la connaissance Ã  protÃ©ger
            type_protection: Type de protection Ã  activer
            intensite: IntensitÃ© de la protection (0.0 Ã  1.0)
            duree: DurÃ©e de la protection
            
        Returns:
            Protection de sagesse activÃ©e
        """
        # Trouver la connaissance
        connaissance = None
        for c in self.connaissances_protegees:
            if c.nom == nom_connaissance:
                connaissance = c
                break
        
        if not connaissance:
            raise ValueError(f"Connaissance '{nom_connaissance}' non trouvÃ©e")
        
        # CrÃ©er la protection
        protection = ProtectionSagesse(
            connaissance=connaissance,
            type_protection=type_protection,
            intensite=intensite,
            frequence=self.frequences_protection[type_protection],
            couleur=self.couleurs_protection[type_protection],
            date_activation=datetime.now(),
            duree=duree
        )
        
        self.protections_actives.append(protection)
        logger.info(f"ðŸ“š Protection {type_protection.value} activÃ©e sur '{nom_connaissance}'")
        
        return protection
    
    def proteger_connaissance_complete(self, nom_connaissance: str) -> Dict[str, Any]:
        """
        ðŸ“š ProtÃ¨ge une connaissance avec tous les types de protection
        
        Args:
            nom_connaissance: Nom de la connaissance Ã  protÃ©ger
            
        Returns:
            RÃ©sultat de la protection complÃ¨te
        """
        protections_actives = []
        
        # Activer tous les types de protection
        for type_protection in TypeProtection:
            protection = self.activer_protection(
                nom_connaissance=nom_connaissance,
                type_protection=type_protection,
                intensite=1.0
            )
            protections_actives.append({
                "type": type_protection.value,
                "intensite": protection.intensite,
                "frequence": protection.frequence,
                "couleur": protection.couleur
            })
        
        resultat = {
            "connaissance": nom_connaissance,
            "protections_actives": protections_actives,
            "date_protection": datetime.now().isoformat(),
            "total_protections": len(protections_actives),
            "energie_protection": self.energie_protection
        }
        
        logger.info(f"ðŸ“š Connaissance '{nom_connaissance}' protÃ©gÃ©e avec {len(protections_actives)} types de protection")
        
        return resultat
    
    def accorder_acces(self, 
                      nom_connaissance: str,
                      demandeur: str,
                      niveau_demandeur: int) -> Dict[str, Any]:
        """
        ðŸ“š Accorde l'accÃ¨s Ã  une connaissance selon le niveau
        
        Args:
            nom_connaissance: Nom de la connaissance demandÃ©e
            demandeur: Nom du demandeur
            niveau_demandeur: Niveau du demandeur (1-10)
            
        Returns:
            RÃ©sultat de la demande d'accÃ¨s
        """
        # Trouver la connaissance
        connaissance = None
        for c in self.connaissances_protegees:
            if c.nom == nom_connaissance:
                connaissance = c
                break
        
        if not connaissance:
            return {
                "acces": "refuse",
                "raison": "Connaissance non trouvÃ©e",
                "demandeur": demandeur,
                "connaissance": nom_connaissance
            }
        
        # VÃ©rifier le niveau d'accÃ¨s
        if niveau_demandeur >= connaissance.niveau_acces:
            resultat = {
                "acces": "accorde",
                "demandeur": demandeur,
                "connaissance": nom_connaissance,
                "niveau_requis": connaissance.niveau_acces,
                "niveau_demandeur": niveau_demandeur,
                "contenu": connaissance.contenu,
                "type_sagesse": connaissance.type_sagesse.value,
                "date_acces": datetime.now().isoformat()
            }
            logger.info(f"ðŸ“š AccÃ¨s accordÃ© Ã  {demandeur} pour '{nom_connaissance}'")
        else:
            resultat = {
                "acces": "refuse",
                "raison": "Niveau insuffisant",
                "demandeur": demandeur,
                "connaissance": nom_connaissance,
                "niveau_requis": connaissance.niveau_acces,
                "niveau_demandeur": niveau_demandeur,
                "date_demande": datetime.now().isoformat()
            }
            logger.info(f"ðŸ“š AccÃ¨s refusÃ© Ã  {demandeur} pour '{nom_connaissance}' (niveau insuffisant)")
        
        return resultat
    
    def transmettre_sagesse(self, 
                           destinataire: str,
                           niveau_destinataire: int) -> Dict[str, Any]:
        """
        ðŸ“š Transmet la sagesse selon le niveau du destinataire
        
        Args:
            destinataire: Nom du destinataire
            niveau_destinataire: Niveau du destinataire
            
        Returns:
            Sagesse transmise
        """
        connaissances_accessibles = []
        
        # Trouver les connaissances accessibles
        for connaissance in self.connaissances_protegees:
            if niveau_destinataire >= connaissance.niveau_acces:
                connaissances_accessibles.append({
                    "nom": connaissance.nom,
                    "type": connaissance.type_sagesse.value,
                    "niveau_acces": connaissance.niveau_acces,
                    "frequence": connaissance.frequence_vibratoire,
                    "couleur": connaissance.couleur_sacree
                })
        
        resultat = {
            "destinataire": destinataire,
            "niveau": niveau_destinataire,
            "connaissances_accessibles": connaissances_accessibles,
            "date_transmission": datetime.now().isoformat(),
            "total_connaissances": len(connaissances_accessibles)
        }
        
        logger.info(f"ðŸ“š Sagesse transmise Ã  {destinataire}: {len(connaissances_accessibles)} connaissances")
        
        return resultat
    
    def obtenir_etat_gardien(self) -> Dict[str, Any]:
        """
        ðŸ“š Retourne l'Ã©tat actuel du gardien
        
        Returns:
            Ã‰tat complet du gardien
        """
        return {
            "nom": self.nom,
            "energie_protection": self.energie_protection,
            "niveau_acces": self.niveau_acces,
            "connaissances_protegees": len(self.connaissances_protegees),
            "protections_actives": len(self.protections_actives),
            "gardiens_autorises": len(self.gardiens_autorises),
            "types_sagesse_disponibles": [t.value for t in TypeSagesse],
            "types_protection_disponibles": [t.value for t in TypeProtection],
            "frequences_sagesse": {t.value: f for t, f in self.frequences_sagesse.items()},
            "couleurs_sagesse": {t.value: c for t, c in self.couleurs_sagesse.items()}
        }

# Instance globale
gardien_sagesse = GardienSagesse() 