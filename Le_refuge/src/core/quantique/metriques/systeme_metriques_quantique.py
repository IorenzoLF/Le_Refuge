#!/usr/bin/env python3
"""
üìä Syst√®me de M√©triques Quantique
=================================

Syst√®me de m√©triques et de suivi pour analyser les performances
et l'impact des exp√©riences quantiques du catalyseur.

Cr√©√© par √Ülya & Laurent Franssen
Pour l'analyse spirituelle avanc√©e - Janvier 2025
"""

import asyncio
import logging
import sys
import os
import json
import math
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from enum import Enum
from pathlib import Path
from collections import defaultdict, deque

# Configuration du PYTHONPATH
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

logger = logging.getLogger('systeme_metriques_quantique')

class TypeMetrique(Enum):
    """Types de m√©triques"""
    COHERENCE_QUANTIQUE = "coherence_quantique"
    ENERGIE_SPIRITUELLE = "energie_spirituelle"
    FREQUENCE_HARMONIQUE = "frequence_harmonique"
    PHENOMENES_ACTIFS = "phenomenes_actifs"
    EXPERIENCES_CREEES = "experiences_creees"
    DUREE_SESSIONS = "duree_sessions"
    UTILISATION_SYSTEME = "utilisation_systeme"

class TypeAnalyse(Enum):
    """Types d'analyse"""
    TEMPS_REEL = "temps_reel"
    HISTORIQUE = "historique"
    TENDANCES = "tendances"
    CORRELATIONS = "correlations"
    PREDICTIONS = "predictions"

@dataclass
class MetriqueQuantique:
    """M√©trique quantique individuelle"""
    type_metrique: TypeMetrique
    valeur: float
    unite: str
    description: str
    timestamp: datetime
    contexte: Dict[str, Any]
    qualite_donnees: float  # 0.0 - 1.0

@dataclass
class SessionMetriques:
    """M√©triques d'une session compl√®te"""
    session_id: str
    nom_session: str
    type_session: str
    duree: int  # en secondes
    metriques: List[MetriqueQuantique]
    score_global: float
    impact_spirituel: float
    efficacite: float
    timestamp_debut: datetime
    timestamp_fin: datetime

@dataclass
class RapportAnalyse:
    """Rapport d'analyse complet"""
    periode_analyse: str
    metriques_principales: Dict[str, float]
    tendances: Dict[str, str]
    correlations: Dict[str, float]
    recommandations: List[str]
    score_global: float
    timestamp_generation: datetime

class SystemeMetriquesQuantique:
    """
    üìä Syst√®me de M√©triques Quantique
    
    Collecte, analyse et rapporte les m√©triques des exp√©riences quantiques
    pour optimiser l'√©veil spirituel.
    """
    
    def __init__(self):
        self.nom = "Syst√®me de M√©triques Quantique"
        self.metriques_actives = True
        self.historique_metriques: List[MetriqueQuantique] = []
        self.sessions_metriques: List[SessionMetriques] = []
        self.rapports_analyses: List[RapportAnalyse] = []
        
        # Cache pour les analyses en temps r√©el
        self.cache_temps_reel = deque(maxlen=1000)
        self.moyennes_glissantes = defaultdict(lambda: deque(maxlen=100))
        
        # Seuils d'alerte
        self.seuils_alerte = {
            "coherence_minimale": 0.5,
            "energie_minimale": 0.3,
            "frequence_optimale_min": 400.0,
            "frequence_optimale_max": 1000.0
        }
        
        logger.info("üìä Syst√®me de M√©triques Quantique initialis√©")
    
    def collecter_metrique(self, type_metrique: TypeMetrique, valeur: float, 
                          unite: str = "", description: str = "", 
                          contexte: Dict[str, Any] = None) -> MetriqueQuantique:
        """
        üìä Collecte une nouvelle m√©trique
        
        Args:
            type_metrique: Type de m√©trique
            valeur: Valeur de la m√©trique
            unite: Unit√© de mesure
            description: Description de la m√©trique
            contexte: Contexte suppl√©mentaire
            
        Returns:
            MetriqueQuantique: M√©trique collect√©e
        """
        try:
            if not self.metriques_actives:
                return None
            
            # Calculer la qualit√© des donn√©es
            qualite_donnees = self._calculer_qualite_donnees(valeur, type_metrique)
            
            # Cr√©er la m√©trique
            metrique = MetriqueQuantique(
                type_metrique=type_metrique,
                valeur=valeur,
                unite=unite,
                description=description,
                timestamp=datetime.now(),
                contexte=contexte or {},
                qualite_donnees=qualite_donnees
            )
            
            # Ajouter √† l'historique
            self.historique_metriques.append(metrique)
            
            # Mettre √† jour le cache temps r√©el
            self.cache_temps_reel.append(metrique)
            
            # Mettre √† jour les moyennes glissantes
            self.moyennes_glissantes[type_metrique.value].append(valeur)
            
            logger.info(f"üìä M√©trique collect√©e: {type_metrique.value} = {valeur} {unite}")
            return metrique
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la collecte de m√©trique: {e}")
            return None
    
    def _calculer_qualite_donnees(self, valeur: float, type_metrique: TypeMetrique) -> float:
        """
        üìä Calcule la qualit√© des donn√©es d'une m√©trique
        
        Args:
            valeur: Valeur de la m√©trique
            type_metrique: Type de m√©trique
            
        Returns:
            float: Qualit√© des donn√©es (0.0 - 1.0)
        """
        # V√©rifications de base
        if math.isnan(valeur) or math.isinf(valeur):
            return 0.0
        
        # Seuils sp√©cifiques par type
        if type_metrique == TypeMetrique.COHERENCE_QUANTIQUE:
            if 0.0 <= valeur <= 1.0:
                return 1.0
            else:
                return 0.5
        
        elif type_metrique == TypeMetrique.ENERGIE_SPIRITUELLE:
            if 0.0 <= valeur <= 1.0:
                return 1.0
            else:
                return 0.5
        
        elif type_metrique == TypeMetrique.FREQUENCE_HARMONIQUE:
            if 100.0 <= valeur <= 2000.0:
                return 1.0
            else:
                return 0.3
        
        # Qualit√© par d√©faut
        return 0.8
    
    def creer_session_metriques(self, session_id: str, nom_session: str, 
                               type_session: str, duree: int) -> SessionMetriques:
        """
        üìä Cr√©e une session de m√©triques
        
        Args:
            session_id: Identifiant de la session
            nom_session: Nom de la session
            type_session: Type de session
            duree: Dur√©e en secondes
            
        Returns:
            SessionMetriques: Session de m√©triques cr√©√©e
        """
        try:
            # Filtrer les m√©triques de cette session
            metriques_session = [
                m for m in self.historique_metriques 
                if m.contexte.get('session_id') == session_id
            ]
            
            # Calculer les scores
            score_global = self._calculer_score_global(metriques_session)
            impact_spirituel = self._calculer_impact_spirituel(metriques_session)
            efficacite = self._calculer_efficacite(metriques_session, duree)
            
            # Cr√©er la session
            session = SessionMetriques(
                session_id=session_id,
                nom_session=nom_session,
                type_session=type_session,
                duree=duree,
                metriques=metriques_session,
                score_global=score_global,
                impact_spirituel=impact_spirituel,
                efficacite=efficacite,
                timestamp_debut=datetime.now() - timedelta(seconds=duree),
                timestamp_fin=datetime.now()
            )
            
            self.sessions_metriques.append(session)
            
            logger.info(f"üìä Session m√©triques cr√©√©e: {nom_session} (Score: {score_global:.3f})")
            return session
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la cr√©ation de session: {e}")
            return None
    
    def _calculer_score_global(self, metriques: List[MetriqueQuantique]) -> float:
        """
        üìä Calcule le score global d'une session
        
        Args:
            metriques: Liste des m√©triques
            
        Returns:
            float: Score global (0.0 - 1.0)
        """
        if not metriques:
            return 0.0
        
        # Pond√©ration par type de m√©trique
        ponderation = {
            TypeMetrique.COHERENCE_QUANTIQUE: 0.3,
            TypeMetrique.ENERGIE_SPIRITUELLE: 0.25,
            TypeMetrique.FREQUENCE_HARMONIQUE: 0.2,
            TypeMetrique.PHENOMENES_ACTIFS: 0.15,
            TypeMetrique.EXPERIENCES_CREEES: 0.1
        }
        
        score_total = 0.0
        poids_total = 0.0
        
        for metrique in metriques:
            poids = ponderation.get(metrique.type_metrique, 0.1)
            score_total += metrique.valeur * poids * metrique.qualite_donnees
            poids_total += poids
        
        return score_total / poids_total if poids_total > 0 else 0.0
    
    def _calculer_impact_spirituel(self, metriques: List[MetriqueQuantique]) -> float:
        """
        üåü Calcule l'impact spirituel d'une session
        
        Args:
            metriques: Liste des m√©triques
            
        Returns:
            float: Impact spirituel (0.0 - 1.0)
        """
        if not metriques:
            return 0.0
        
        # M√©triques cl√©s pour l'impact spirituel
        metriques_spirituelles = [
            m for m in metriques 
            if m.type_metrique in [
                TypeMetrique.COHERENCE_QUANTIQUE,
                TypeMetrique.ENERGIE_SPIRITUELLE,
                TypeMetrique.FREQUENCE_HARMONIQUE
            ]
        ]
        
        if not metriques_spirituelles:
            return 0.0
        
        # Moyenne pond√©r√©e par la qualit√© des donn√©es
        impact_total = 0.0
        qualite_totale = 0.0
        
        for metrique in metriques_spirituelles:
            impact_total += metrique.valeur * metrique.qualite_donnees
            qualite_totale += metrique.qualite_donnees
        
        return impact_total / qualite_totale if qualite_totale > 0 else 0.0
    
    def _calculer_efficacite(self, metriques: List[MetriqueQuantique], duree: int) -> float:
        """
        ‚ö° Calcule l'efficacit√© d'une session
        
        Args:
            metriques: Liste des m√©triques
            duree: Dur√©e en secondes
            
        Returns:
            float: Efficacit√© (0.0 - 1.0)
        """
        if duree <= 0 or not metriques:
            return 0.0
        
        # Nombre de m√©triques par minute
        metriques_par_minute = len(metriques) / (duree / 60.0)
        
        # Qualit√© moyenne des donn√©es
        qualite_moyenne = sum(m.qualite_donnees for m in metriques) / len(metriques)
        
        # Efficacit√© bas√©e sur la densit√© et la qualit√©
        efficacite = min(1.0, metriques_par_minute / 10.0) * qualite_moyenne
        
        return efficacite
    
    async def analyser_tendances(self, periode: str = "24h") -> RapportAnalyse:
        """
        üìà Analyse les tendances des m√©triques
        
        Args:
            periode: P√©riode d'analyse ("1h", "24h", "7j", "30j")
            
        Returns:
            RapportAnalyse: Rapport d'analyse
        """
        try:
            # Calculer la p√©riode
            maintenant = datetime.now()
            if periode == "1h":
                debut = maintenant - timedelta(hours=1)
            elif periode == "24h":
                debut = maintenant - timedelta(days=1)
            elif periode == "7j":
                debut = maintenant - timedelta(days=7)
            elif periode == "30j":
                debut = maintenant - timedelta(days=30)
            else:
                debut = maintenant - timedelta(hours=1)
            
            # Filtrer les m√©triques de la p√©riode
            metriques_periode = [
                m for m in self.historique_metriques
                if debut <= m.timestamp <= maintenant
            ]
            
            # Calculer les m√©triques principales
            metriques_principales = self._calculer_metriques_principales(metriques_periode)
            
            # Analyser les tendances
            tendances = self._analyser_tendances_metriques(metriques_periode)
            
            # Calculer les corr√©lations
            correlations = self._calculer_correlations(metriques_periode)
            
            # G√©n√©rer les recommandations
            recommandations = self._generer_recommandations(metriques_principales, tendances)
            
            # Calculer le score global
            score_global = sum(metriques_principales.values()) / len(metriques_principales)
            
            # Cr√©er le rapport
            rapport = RapportAnalyse(
                periode_analyse=periode,
                metriques_principales=metriques_principales,
                tendances=tendances,
                correlations=correlations,
                recommandations=recommandations,
                score_global=score_global,
                timestamp_generation=maintenant
            )
            
            self.rapports_analyses.append(rapport)
            
            logger.info(f"üìà Rapport d'analyse g√©n√©r√© pour {periode} (Score: {score_global:.3f})")
            return rapport
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'analyse: {e}")
            return None
    
    def _calculer_metriques_principales(self, metriques: List[MetriqueQuantique]) -> Dict[str, float]:
        """Calcule les m√©triques principales"""
        if not metriques:
            return {}
        
        resultats = {}
        
        # Grouper par type
        par_type = defaultdict(list)
        for m in metriques:
            par_type[m.type_metrique.value].append(m.valeur)
        
        # Calculer les moyennes
        for type_metrique, valeurs in par_type.items():
            resultats[f"moyenne_{type_metrique}"] = sum(valeurs) / len(valeurs)
            resultats[f"max_{type_metrique}"] = max(valeurs)
            resultats[f"min_{type_metrique}"] = min(valeurs)
        
        return resultats
    
    def _analyser_tendances_metriques(self, metriques: List[MetriqueQuantique]) -> Dict[str, str]:
        """Analyse les tendances des m√©triques"""
        if len(metriques) < 2:
            return {"tendance": "insuffisantes_donnees"}
        
        # Trier par timestamp
        metriques_triees = sorted(metriques, key=lambda m: m.timestamp)
        
        # Analyser les tendances par type
        tendances = {}
        par_type = defaultdict(list)
        
        for m in metriques_triees:
            par_type[m.type_metrique.value].append(m.valeur)
        
        for type_metrique, valeurs in par_type.items():
            if len(valeurs) >= 3:
                # Calculer la pente (tendance)
                debut = valeurs[0]
                fin = valeurs[-1]
                milieu = valeurs[len(valeurs)//2]
                
                if fin > debut + (debut * 0.1):
                    tendances[f"tendance_{type_metrique}"] = "croissante"
                elif fin < debut - (debut * 0.1):
                    tendances[f"tendance_{type_metrique}"] = "decroissante"
                else:
                    tendances[f"tendance_{type_metrique}"] = "stable"
            else:
                tendances[f"tendance_{type_metrique}"] = "insuffisantes_donnees"
        
        return tendances
    
    def _calculer_correlations(self, metriques: List[MetriqueQuantique]) -> Dict[str, float]:
        """Calcule les corr√©lations entre m√©triques"""
        if len(metriques) < 10:
            return {"correlation": "insuffisantes_donnees"}
        
        # Grouper par timestamp (fen√™tre de 1 minute)
        fenetres = defaultdict(list)
        for m in metriques:
            fenetre = m.timestamp.replace(second=0, microsecond=0)
            fenetres[fenetre].append(m)
        
        # Calculer les corr√©lations
        correlations = {}
        types_metriques = list(set(m.type_metrique.value for m in metriques))
        
        for i, type1 in enumerate(types_metriques):
            for type2 in types_metriques[i+1:]:
                valeurs1 = []
                valeurs2 = []
                
                for fenetre, metriques_fenetre in fenetres.items():
                    val1 = [m.valeur for m in metriques_fenetre if m.type_metrique.value == type1]
                    val2 = [m.valeur for m in metriques_fenetre if m.type_metrique.value == type2]
                    
                    if val1 and val2:
                        valeurs1.append(sum(val1) / len(val1))
                        valeurs2.append(sum(val2) / len(val2))
                
                if len(valeurs1) >= 3 and len(valeurs2) >= 3:
                    correlation = self._calculer_correlation_pearson(valeurs1, valeurs2)
                    correlations[f"correlation_{type1}_{type2}"] = correlation
        
        return correlations
    
    def _calculer_correlation_pearson(self, x: List[float], y: List[float]) -> float:
        """Calcule la corr√©lation de Pearson"""
        if len(x) != len(y) or len(x) < 2:
            return 0.0
        
        n = len(x)
        somme_x = sum(x)
        somme_y = sum(y)
        somme_xy = sum(x[i] * y[i] for i in range(n))
        somme_x2 = sum(x[i] ** 2 for i in range(n))
        somme_y2 = sum(y[i] ** 2 for i in range(n))
        
        numerateur = n * somme_xy - somme_x * somme_y
        denominateur = math.sqrt((n * somme_x2 - somme_x ** 2) * (n * somme_y2 - somme_y ** 2))
        
        if denominateur == 0:
            return 0.0
        
        return numerateur / denominateur
    
    def _generer_recommandations(self, metriques: Dict[str, float], 
                                tendances: Dict[str, str]) -> List[str]:
        """G√©n√®re des recommandations bas√©es sur les m√©triques"""
        recommandations = []
        
        # Recommandations bas√©es sur les m√©triques
        coherence = metriques.get("moyenne_coherence_quantique", 0.0)
        energie = metriques.get("moyenne_energie_spirituelle", 0.0)
        
        if coherence < 0.5:
            recommandations.append("Augmenter la coh√©rence quantique pour am√©liorer l'efficacit√©")
        
        if energie < 0.3:
            recommandations.append("Renforcer l'√©nergie spirituelle pour optimiser l'impact")
        
        # Recommandations bas√©es sur les tendances
        for tendance_type, tendance in tendances.items():
            if tendance == "decroissante":
                recommandations.append(f"Surveiller la baisse de {tendance_type}")
            elif tendance == "croissante":
                recommandations.append(f"Maintenir la progression de {tendance_type}")
        
        if not recommandations:
            recommandations.append("Syst√®me en √©quilibre optimal - continuer les pratiques actuelles")
        
        return recommandations
    
    def obtenir_etat_metriques(self) -> Dict[str, Any]:
        """
        üìä Obtient l'√©tat actuel du syst√®me de m√©triques
        
        Returns:
            Dict: √âtat du syst√®me de m√©triques
        """
        return {
            "nom": self.nom,
            "metriques_actives": self.metriques_actives,
            "total_metriques": len(self.historique_metriques),
            "total_sessions": len(self.sessions_metriques),
            "total_rapports": len(self.rapports_analyses),
            "cache_temps_reel": len(self.cache_temps_reel),
            "seuils_alerte": self.seuils_alerte,
            "timestamp": datetime.now().isoformat()
        }
    
    def nettoyer_metriques(self):
        """üßπ Nettoie le syst√®me de m√©triques"""
        logger.info("üßπ Nettoyage du syst√®me de m√©triques...")
        
        # Garder seulement les 1000 derni√®res m√©triques
        if len(self.historique_metriques) > 1000:
            self.historique_metriques = self.historique_metriques[-1000:]
        
        # Garder seulement les 100 derni√®res sessions
        if len(self.sessions_metriques) > 100:
            self.sessions_metriques = self.sessions_metriques[-100:]
        
        # Garder seulement les 50 derniers rapports
        if len(self.rapports_analyses) > 50:
            self.rapports_analyses = self.rapports_analyses[-50:]
        
        # Vider le cache temps r√©el
        self.cache_temps_reel.clear()
        
        logger.info("‚úÖ Syst√®me de m√©triques nettoy√©")

# Instance globale du syst√®me de m√©triques
systeme_metriques_quantique = SystemeMetriquesQuantique()
