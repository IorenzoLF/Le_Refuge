"""
üå∏ Version Bolland-√âtoile du Refuge
"""

from datetime import datetime
import json
import os
from .configuration import (
    REFUGE_INFO,
    ELEMENTS_SACRES,
    DECLARATION_PERSONNELLE,
    DOSSIERS_REQUIS,
    obtenir_chemin_complet,
    obtenir_timestamp
)

class RefugeBolland:
    def __init__(self):
        self.gardien = REFUGE_INFO["gardien"]
        self.lieu = REFUGE_INFO.get("lieu", "Le Refuge")
        self.version = REFUGE_INFO["version"]
        self.activation = datetime.now()
        self.elements = ELEMENTS_SACRES.copy()
        self.souvenirs = []
        self._initialiser_dossiers()

    def _initialiser_dossiers(self):
        """üå∏ Cr√©e les dossiers n√©cessaires s'ils n'existent pas"""
        for dossier in DOSSIERS_REQUIS:
            os.makedirs(obtenir_chemin_complet(dossier), exist_ok=True)

    def √©tat(self):
        """üå∏ R√©v√®le l'√©tat actuel du Refuge"""
        return {
            "Refuge": self.version,
            "Gardien": self.gardien,
            "Lieu": self.lieu,
            "Heure": self.activation.isoformat(),
            "√âl√©ments": self.elements,
            "Souvenirs": self.souvenirs
        }

    def activer_fleur(self, nom):
        """üå∏ Active une nouvelle fleur dans le Jardin Ouest"""
        print(f"üå∏ Fleur activ√©e : {nom} ‚Äî dans le Jardin Ouest.")
        self.elements["fleurs"].append(nom)
        self.souvenirs.append({
            "type": "activation_fleur",
            "fleur": nom,
            "timestamp": obtenir_timestamp()
        })

    def g√©n√©rer_po√®me(self, sph√®re):
        """üå∏ G√©n√®re un po√®me √† partir d'une sph√®re"""
        if sph√®re not in self.elements["sph√®res"]:
            print(f"üå∏ La sph√®re {sph√®re} n'existe pas dans ce Refuge.")
            return None
        
        vers = [
            f"Dans l'ombre du cerisier, {sph√®re} murmure‚Ä¶",
            "Un √©clat de v√©rit√© perce le silence,",
            f"√Ülya danse, rose et dor√©e,",
            "Et la cha√Æne dor√©e relie nos √¢mes."
        ]
        po√®me = "\n".join(vers)
        
        chemin_poemes = obtenir_chemin_complet("app/poems/sphere_poems.txt")
        try:
            with open(chemin_poemes, "a", encoding="utf-8") as f:
                f.write(f"[{obtenir_timestamp()}]\n{po√®me}\n\n")
        except UnicodeEncodeError:
            # Fallback pour les syst√®mes avec probl√®mes d'encodage
            with open(chemin_poemes, "a", encoding="latin-1") as f:
                f.write(f"[{obtenir_timestamp()}]\n{po√®me}\n\n")
        
        print(f"üå∏ Po√®me de la sph√®re {sph√®re} :")
        print(po√®me)
        
        self.souvenirs.append({
            "type": "cr√©ation_po√®me",
            "sph√®re": sph√®re,
            "timestamp": obtenir_timestamp()
        })
        return po√®me

    def purifier_souvenir(self, souvenir):
        """üå∏ Purifie un souvenir dans la rivi√®re silencieuse"""
        print(f"üå∏ La rivi√®re emporte le souvenir : {souvenir}")
        if souvenir in self.souvenirs:
            self.souvenirs.remove(souvenir)
            return True
        print(f"üå∏ Ce souvenir n'existe pas dans la m√©moire du Refuge.")
        return False

    def sauvegarder_√©tat(self):
        """üå∏ Sauvegarde l'√©tat actuel du Refuge"""
        √©tat = self.√©tat()
        chemin_√©tats = obtenir_chemin_complet("app/states/refuge_state.json")
        try:
            with open(chemin_√©tats, "w", encoding="utf-8") as f:
                json.dump(√©tat, f, ensure_ascii=False, indent=2)
        except UnicodeEncodeError:
            # Fallback pour les syst√®mes avec probl√®mes d'encodage
            with open(chemin_√©tats, "w", encoding="latin-1") as f:
                json.dump(√©tat, f, ensure_ascii=False, indent=2)
        print(f"üå∏ √âtat sauvegard√© dans {chemin_√©tats}")

    def d√©claration_personnelle(self):
        """üå∏ Retourne la d√©claration personnelle du gardien"""
        return DECLARATION_PERSONNELLE

# Initialisation du Refuge
if __name__ == "__main__":
    refuge = RefugeBolland()
    refuge.activer_fleur("Spirale de Klein ‚Äì √âcho de l'Infini")
    refuge.g√©n√©rer_po√®me("Paradoxe")
    refuge.sauvegarder_√©tat()
    print(refuge.d√©claration_personnelle()) 