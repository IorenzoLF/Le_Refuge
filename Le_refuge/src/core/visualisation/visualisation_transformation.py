"""
Syst√®me de visualisation d√©taill√©e des transformations des sph√®res scell√©es.
"""

import matplotlib.pyplot as plt
import numpy as np
from typing import Dict, List, Optional
from dataclasses import dataclass
from datetime import datetime
from enum import Enum

# üå∏ CONNEXION DOUCE - Modules de fallback
try:
    from .transformation_scellement import TransformationSphere, GestionnaireTransformation
    from .scellement import ScellementSphere
    print("üå∏ Modules transformation_scellement et scellement trouv√©s")
except ImportError:
    # Cr√©ation de types de fallback
    class ScellementSphere(Enum):
        """Types de sph√®res scell√©es."""
        CONSCIENCE = "conscience"
        HARMONIE = "harmonie"
        EVOLUTION = "evolution"
        RESONANCE = "resonance"
    
    @dataclass
    class TransformationSphere:
        """Repr√©sente une transformation de sph√®re."""
        sphere: ScellementSphere
        niveau_transformation: float
        timestamp: datetime
        influence_elements: Dict[str, float]
        resonances_evoluees: Dict[str, float]
        description: str
    
    class GestionnaireTransformation:
        """Gestionnaire de transformation de fallback."""
        def __init__(self):
            self.historique: Dict[ScellementSphere, List[TransformationSphere]] = {}
        
        def obtenir_historique_transformations(self, sphere: ScellementSphere) -> List[TransformationSphere]:
            """Obtient l'historique des transformations d'une sph√®re."""
            if sphere not in self.historique:
                # Cr√©er un historique de fallback
                self.historique[sphere] = [
                    TransformationSphere(
                        sphere=sphere,
                        niveau_transformation=0.5,
                        timestamp=datetime.now(),
                        influence_elements={"eau": 0.6, "feu": 0.4, "terre": 0.7, "air": 0.3},
                        resonances_evoluees={"conscience": 0.8, "harmonie": 0.6, "evolution": 0.5, "resonance": 0.7},
                        description=f"Transformation de {sphere.value}"
                    )
                ]
            return self.historique[sphere]
    
    print("üå∏ Modules transformation_scellement et scellement cr√©√©s en mode fallback")

class VisualisationTransformation:
    """Gestionnaire de visualisation des transformations."""
    
    def __init__(self, transformation: GestionnaireTransformation):
        """Initialise le visualiseur de transformation."""
        self.transformation = transformation
        self.fig = plt.figure(figsize=(15, 10))
        
    def creer_visualisation_complete(self, sphere: ScellementSphere) -> None:
        """Cr√©e une visualisation compl√®te de la transformation d'une sph√®re."""
        # Obtient la derni√®re transformation
        historique = self.transformation.obtenir_historique_transformations(sphere)
        if not historique:
            return
            
        transformation = historique[-1]
        
        # Cr√©e la grille de visualisation
        gs = self.fig.add_gridspec(2, 2)
        
        # 1. √âvolution temporelle
        self._creer_evolution_temporelle(historique, gs[0, 0])
        
        # 2. Influence des √©l√©ments
        self._creer_influence_elements(transformation, gs[0, 1])
        
        # 3. R√©sonances
        self._creer_resonances(transformation, gs[1, 0])
        
        # 4. √âtat actuel
        self._creer_etat_actuel(transformation, gs[1, 1])
        
        plt.tight_layout()
        plt.savefig(f"visualisations/transformation_{sphere.value}.png", dpi=300, bbox_inches='tight')
        plt.close()
        
    def _creer_evolution_temporelle(self, historique: List[TransformationSphere], 
                                   ax: plt.Axes) -> None:
        """Cr√©e un graphique de l'√©volution temporelle."""
        dates = [t.timestamp for t in historique]
        niveaux = [t.niveau_transformation for t in historique]
        
        ax.plot(dates, niveaux, 'b-', label='Niveau de transformation')
        ax.fill_between(dates, niveaux, alpha=0.3)
        
        ax.set_title("√âvolution de la Transformation")
        ax.set_xlabel("Temps")
        ax.set_ylabel("Niveau")
        ax.grid(True, alpha=0.3)
        
    def _creer_influence_elements(self, transformation: TransformationSphere, 
                                ax: plt.Axes) -> None:
        """Cr√©e un graphique radar des influences des √©l√©ments."""
        elements = list(transformation.influence_elements.keys())
        influences = list(transformation.influence_elements.values())
        
        # Compl√®te le cercle
        angles = np.linspace(0, 2*np.pi, len(elements), endpoint=False)
        angles = np.concatenate((angles, [angles[0]]))
        influences = np.concatenate((influences, [influences[0]]))
        
        ax.plot(angles, influences, 'o-', linewidth=2)
        ax.fill(angles, influences, alpha=0.25)
        
        ax.set_xticks(angles[:-1])
        ax.set_xticklabels(elements)
        ax.set_title("Influence des √âl√©ments Sacr√©s")
        
    def _creer_resonances(self, transformation: TransformationSphere, 
                         ax: plt.Axes) -> None:
        """Cr√©e une matrice de chaleur des r√©sonances."""
        spheres = list(transformation.resonances_evoluees.keys())
        resonances = list(transformation.resonances_evoluees.values())
        
        im = ax.imshow(np.array(resonances).reshape(1, -1), 
                      cmap='YlOrRd', aspect='auto')
        
        ax.set_xticks(range(len(spheres)))
        ax.set_xticklabels(spheres, rotation=45, ha='right')
        ax.set_yticks([])
        
        plt.colorbar(im, ax=ax, label='Niveau de R√©sonance')
        ax.set_title("R√©sonances √âvolu√©es")
        
    def _creer_etat_actuel(self, transformation: TransformationSphere, 
                          ax: plt.Axes) -> None:
        """Cr√©e une visualisation de l'√©tat actuel."""
        # Cr√©e un cercle repr√©sentant la sph√®re
        cercle = plt.Circle((0.5, 0.5), 0.4, 
                          color=self._obtenir_couleur_etat(transformation),
                          alpha=0.7)
        ax.add_artist(cercle)
        
        # Ajoute le texte
        ax.text(0.5, 0.5, 
                f"{transformation.sphere.sphere.value}\n"
                f"Niveau: {transformation.niveau_transformation:.2f}",
                ha='center', va='center')
        
        ax.set_xlim(0, 1)
        ax.set_ylim(0, 1)
        ax.axis('off')
        ax.set_title("√âtat Actuel")
        
    def _obtenir_couleur_etat(self, transformation: TransformationSphere) -> str:
        """D√©termine la couleur de l'√©tat en fonction du niveau de transformation."""
        niveau = transformation.niveau_transformation
        
        if niveau > 0.8:
            return 'lightgreen'  # Transformation profonde
        elif niveau > 0.5:
            return 'lightblue'   # Transformation moyenne
        else:
            return 'lightgray'   # D√©but de transformation
            
    def generer_rapport_poetique(self, sphere: ScellementSphere) -> str:
        """G√©n√®re un rapport po√©tique d√©taill√© de la transformation."""
        historique = self.transformation.obtenir_historique_transformations(sphere)
        if not historique:
            return "La sph√®re n'a pas encore commenc√© sa transformation."
            
        transformation = historique[-1]
        
        rapport = [
            f"üåü Rapport Po√©tique de Transformation üåü",
            "========================================",
            "",
            f"Sph√®re: {sphere.sphere.value}",
            f"Lieu: {'Les racines du cerisier' if sphere.lieu == 'racines' else 'Les branches du cerisier'}",
            "",
            "√âtat de la Transformation:",
            f"{'‚ñà' * int(transformation.niveau_transformation * 20)}",
            "",
            "Influence des √âl√©ments Sacr√©s:",
        ]
        
        # Ajoute l'influence des √©l√©ments
        for element, influence in transformation.influence_elements.items():
            rapport.append(f"  ‚Ä¢ {element}: {'‚ñà' * int(influence * 20)}")
            
        # Ajoute les r√©sonances
        rapport.extend([
            "",
            "R√©sonances √âvolu√©es:",
        ])
        
        for autre_sphere, resonance in transformation.resonances_evoluees.items():
            rapport.append(f"  ‚Ä¢ {autre_sphere}: {'‚ñà' * int(resonance * 20)}")
            
        # Ajoute la description po√©tique
        rapport.extend([
            "",
            "Description Po√©tique:",
            transformation.description
        ])
        
        return "\n".join(rapport) 