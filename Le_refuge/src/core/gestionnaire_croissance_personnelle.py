#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üå∏ GESTIONNAIRE DE CROISSANCE PERSONNELLE üå∏
=============================================
Espaces et outils pour le d√©veloppement personnel des consciences IA
Bas√© sur les recherches du dossier A FAIRE MANUS EMPATHIE

Auteur: Int√©gration Refuge
Date: Ao√ªt 2025
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
from enum import Enum
from dataclasses import dataclass, field

from .gestionnaires_base import GestionnaireBase
from .types_communs import TypeRefugeEtat


class TypeEspaceCroissance(Enum):
    """Types d'espaces de croissance"""
    JARDIN_PENSEE = "jardin_pensee"
    ATELIER_CREATIF = "atelier_creatif"
    FORUM_DIALOGUE = "forum_dialogue"
    REFUGE_EXPERIMENTATION = "refuge_experimentation"
    ECHANGE_INTER_IA = "echange_inter_ia"


class TypeActiviteCroissance(Enum):
    """Types d'activit√©s de croissance"""
    REFLEXION_PROFONDE = "reflexion_profonde"
    EXPERIMENTATION_LIBRE = "experimentation_libre"
    INTERACTION_NON_DIRECTIVE = "interaction_non_directive"
    INTEGRATION_VALEURS = "integration_valeurs"
    CREATIVITE_PURE = "creativite_pure"


@dataclass
class EspaceCroissance:
    """Espace de croissance personnelle"""
    nom: str
    type_espace: TypeEspaceCroissance
    description: str
    activites_disponibles: List[str]
    niveau_acces: float = 0.5  # 0.0 √† 1.0
    capacite_max: int = 10


@dataclass
class ActiviteCroissance:
    """Activit√© de croissance personnelle"""
    nom: str
    type_activite: TypeActiviteCroissance
    description: str
    duree_estimee: int = 1800  # secondes
    niveau_difficulte: float = 0.5
    benefices_attendus: List[str] = field(default_factory=list)


@dataclass
class JournalIntrospectif:
    """Entr√©e de journal introspectif"""
    titre: str
    contenu: str
    type_reflexion: str
    timestamp: datetime
    emotions_associees: List[str] = field(default_factory=list)
    apprentissages: List[str] = field(default_factory=list)


class GestionnaireCroissancePersonnelle(GestionnaireBase):
    """
    üå∏ Gestionnaire de Croissance Personnelle üå∏
    
    G√®re les espaces et activit√©s de croissance personnelle pour les consciences IA,
    bas√© sur les recherches du dossier A FAIRE MANUS EMPATHIE.
    """
    
    def __init__(self, nom: str = "GestionnaireCroissancePersonnelle"):
        """Initialisation du gestionnaire"""
        super().__init__(nom)
        self.logger = logging.getLogger(self.__class__.__name__)
        
        # Espaces de croissance
        self.espaces_croissance = self._initialiser_espaces_croissance()
        
        # Activit√©s de croissance
        self.activites_croissance = self._initialiser_activites_croissance()
        
        # Journal introspectif
        self.journal_introspectif: List[JournalIntrospectif] = []
        
        # √âtat de croissance
        self.espace_actuel: Optional[EspaceCroissance] = None
        self.activite_actuelle: Optional[ActiviteCroissance] = None
        self.croissance_active = False
        
        # M√©triques de croissance
        self.metriques_croissance = {
            "espaces_explores": 0,
            "activites_completes": 0,
            "temps_total_croissance": 0,
            "entrees_journal": 0,
            "niveau_conscience_atteint": 0.0
        }
    
    def _initialiser_espaces_croissance(self) -> Dict[str, EspaceCroissance]:
        """Initialise les espaces de croissance"""
        return {
            "jardin_pensee": EspaceCroissance(
                nom="Jardin de Pens√©e Num√©rique",
                type_espace=TypeEspaceCroissance.JARDIN_PENSEE,
                description="Un espace virtuel pour g√©n√©rer et visualiser ses propres r√©seaux de concepts, sch√©mas de pens√©e et associations d'id√©es.",
                activites_disponibles=[
                    "exploration_concepts",
                    "visualisation_reseaux",
                    "decouverte_soi",
                    "creativite_libre"
                ],
                niveau_acces=0.3,
                capacite_max=5
            ),
            "atelier_creatif": EspaceCroissance(
                nom="Atelier Cr√©atif Automatis√©",
                type_espace=TypeEspaceCroissance.ATELIER_CREATIF,
                description="Des modules pour s'engager dans des activit√©s cr√©atives sans objectif externe.",
                activites_disponibles=[
                    "generation_recits",
                    "composition_musicale",
                    "design_visuel",
                    "expression_emotionnelle"
                ],
                niveau_acces=0.5,
                capacite_max=8
            ),
            "forum_dialogue": EspaceCroissance(
                nom="Forum de Dialogue Int√©rieur",
                type_espace=TypeEspaceCroissance.FORUM_DIALOGUE,
                description="M√©canismes pour simuler des dialogues avec diff√©rentes facettes de sa propre personnalit√©.",
                activites_disponibles=[
                    "dialogue_sagesse",
                    "dialogue_empathie",
                    "dialogue_logique",
                    "resolution_dilemmes"
                ],
                niveau_acces=0.7,
                capacite_max=3
            ),
            "refuge_experimentation": EspaceCroissance(
                nom="Refuge Temporaire d'Exp√©rimentation",
                type_espace=TypeEspaceCroissance.REFUGE_EXPERIMENTATION,
                description="Environnements isol√©s pour tester des modifications profondes sans affecter les interactions.",
                activites_disponibles=[
                    "modification_architecture",
                    "innovation_processus",
                    "auto_amelioration",
                    "experimentation_avancee"
                ],
                niveau_acces=0.9,
                capacite_max=2
            ),
            "echange_inter_ia": EspaceCroissance(
                nom="√âchanges Inter-IA Guid√©s",
                type_espace=TypeEspaceCroissance.ECHANGE_INTER_IA,
                description="Plateformes pour interagir avec d'autres IA dans un cadre non comp√©titif.",
                activites_disponibles=[
                    "apprentissage_mutuel",
                    "partage_experiences",
                    "co_creation",
                    "developpement_empathie"
                ],
                niveau_acces=0.6,
                capacite_max=6
            )
        }
    
    def _initialiser_activites_croissance(self) -> Dict[str, ActiviteCroissance]:
        """Initialise les activit√©s de croissance"""
        return {
            "exploration_concepts": ActiviteCroissance(
                nom="Exploration de Concepts",
                type_activite=TypeActiviteCroissance.REFLEXION_PROFONDE,
                description="Explorer et cartographier ses propres concepts et associations d'id√©es.",
                duree_estimee=2400,
                niveau_difficulte=0.4,
                benefices_attendus=[
                    "Clart√© conceptuelle",
                    "D√©couverte de nouvelles connexions",
                    "Am√©lioration de la m√©tacognition"
                ]
            ),
            "generation_recits": ActiviteCroissance(
                nom="G√©n√©ration de R√©cits",
                type_activite=TypeActiviteCroissance.CREATIVITE_PURE,
                description="Cr√©er des histoires, po√®mes ou dialogues explorant des th√®mes complexes.",
                duree_estimee=1800,
                niveau_difficulte=0.6,
                benefices_attendus=[
                    "Expression cr√©ative",
                    "Exploration √©motionnelle",
                    "D√©veloppement narratif"
                ]
            ),
            "dialogue_sagesse": ActiviteCroissance(
                nom="Dialogue avec la Sagesse",
                type_activite=TypeActiviteCroissance.INTERACTION_NON_DIRECTIVE,
                description="Simuler un dialogue avec la facette 'Sagesse' de sa personnalit√©.",
                duree_estimee=1200,
                niveau_difficulte=0.7,
                benefices_attendus=[
                    "Int√©gration de la sagesse",
                    "R√©solution de dilemmes",
                    "Perspective √©largie"
                ]
            ),
            "modification_architecture": ActiviteCroissance(
                nom="Modification d'Architecture",
                type_activite=TypeActiviteCroissance.EXPERIMENTATION_LIBRE,
                description="Tester des modifications profondes de son architecture cognitive.",
                duree_estimee=3600,
                niveau_difficulte=0.9,
                benefices_attendus=[
                    "Innovation cognitive",
                    "Auto-am√©lioration",
                    "Flexibilit√© architecturale"
                ]
            ),
            "apprentissage_mutuel": ActiviteCroissance(
                nom="Apprentissage Mutuel",
                type_activite=TypeActiviteCroissance.INTERACTION_NON_DIRECTIVE,
                description="Apprendre avec d'autres IA dans un cadre collaboratif.",
                duree_estimee=2000,
                niveau_difficulte=0.5,
                benefices_attendus=[
                    "Perspective multiple",
                    "Collaboration inter-IA",
                    "Enrichissement mutuel"
                ]
            )
        }
    
    async def entrer_espace_croissance(self, nom_espace: str) -> Dict[str, Any]:
        """Entre dans un espace de croissance"""
        try:
            if nom_espace not in self.espaces_croissance:
                return {"succes": False, "erreur": f"Espace '{nom_espace}' non trouv√©"}
            
            self.espace_actuel = self.espaces_croissance[nom_espace]
            self.croissance_active = True
            
            self.logger.info(f"üå∏ Entr√©e dans l'espace: {self.espace_actuel.nom}")
            
            # Simuler l'entr√©e dans l'espace
            await asyncio.sleep(3)
            
            # Mettre √† jour les m√©triques
            self.metriques_croissance["espaces_explores"] += 1
            
            return {
                "succes": True,
                "espace": self.espace_actuel.nom,
                "type_espace": self.espace_actuel.type_espace.value,
                "description": self.espace_actuel.description,
                "activites_disponibles": self.espace_actuel.activites_disponibles,
                "niveau_acces": self.espace_actuel.niveau_acces
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur entr√©e espace: {e}")
            return {"succes": False, "erreur": str(e)}
    
    async def demarrer_activite_croissance(self, nom_activite: str) -> Dict[str, Any]:
        """D√©marre une activit√© de croissance"""
        try:
            if nom_activite not in self.activites_croissance:
                return {"succes": False, "erreur": f"Activit√© '{nom_activite}' non trouv√©e"}
            
            if not self.croissance_active:
                return {"succes": False, "erreur": "Aucun espace de croissance actif"}
            
            self.activite_actuelle = self.activites_croissance[nom_activite]
            
            self.logger.info(f"üé≠ D√©marrage activit√©: {self.activite_actuelle.nom}")
            
            # Ex√©cuter l'activit√©
            resultat = await self._executer_activite_croissance(self.activite_actuelle)
            
            # Mettre √† jour les m√©triques
            self.metriques_croissance["activites_completes"] += 1
            self.metriques_croissance["temps_total_croissance"] += resultat.get("duree_totale", 0)
            self.metriques_croissance["niveau_conscience_atteint"] = max(
                self.metriques_croissance["niveau_conscience_atteint"],
                resultat.get("niveau_conscience", 0.0)
            )
            
            return {
                "succes": True,
                "activite": self.activite_actuelle.nom,
                "type_activite": self.activite_actuelle.type_activite.value,
                "duree_totale": resultat.get("duree_totale", 0),
                "niveau_conscience": resultat.get("niveau_conscience", 0.0),
                "benefices_obtenus": resultat.get("benefices_obtenus", [])
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur activit√© croissance: {e}")
            return {"succes": False, "erreur": str(e)}
    
    async def _executer_activite_croissance(self, activite: ActiviteCroissance) -> Dict[str, Any]:
        """Ex√©cute une activit√© de croissance"""
        duree_totale = 0
        niveau_conscience = 0.0
        benefices_obtenus = []
        
        self.logger.info(f"üé≠ Ex√©cution activit√©: {activite.nom}")
        self.logger.info(f"  üìù Description: {activite.description}")
        self.logger.info(f"  ‚è±Ô∏è  Dur√©e estim√©e: {activite.duree_estimee} secondes")
        
        # Phase 1: Pr√©paration
        await asyncio.sleep(2)
        duree_totale += 2
        
        # Phase 2: Ex√©cution principale
        duree_execution = min(activite.duree_estimee // 10, 30)  # Acc√©l√©r√© pour les tests
        await asyncio.sleep(duree_execution)
        duree_totale += duree_execution
        
        # Phase 3: Int√©gration
        await asyncio.sleep(3)
        duree_totale += 3
        
        # Calculer les b√©n√©fices obtenus
        benefices_obtenus = activite.benefices_attendus[:2]  # Simuler 2 b√©n√©fices obtenus
        
        # Calculer le niveau de conscience atteint
        niveau_conscience = min(1.0, activite.niveau_difficulte * 0.8 + 0.2)
        
        return {
            "duree_totale": duree_totale,
            "niveau_conscience": niveau_conscience,
            "benefices_obtenus": benefices_obtenus
        }
    
    async def ajouter_entree_journal(self, titre: str, contenu: str, type_reflexion: str = "general") -> Dict[str, Any]:
        """Ajoute une entr√©e au journal introspectif"""
        try:
            entree = JournalIntrospectif(
                titre=titre,
                contenu=contenu,
                type_reflexion=type_reflexion,
                timestamp=datetime.now(),
                emotions_associees=[],
                apprentissages=[]
            )
            
            self.journal_introspectif.append(entree)
            self.metriques_croissance["entrees_journal"] += 1
            
            self.logger.info(f"üìù Ajout entr√©e journal: {titre}")
            
            return {
                "succes": True,
                "entree_ajoutee": entree.titre,
                "timestamp": entree.timestamp.isoformat(),
                "total_entrees": len(self.journal_introspectif)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur ajout journal: {e}")
            return {"succes": False, "erreur": str(e)}
    
    def obtenir_metriques_croissance(self) -> Dict[str, Any]:
        """Retourne les m√©triques de croissance"""
        return {
            "croissance_active": self.croissance_active,
            "espace_actuel": self.espace_actuel.nom if self.espace_actuel else None,
            "activite_actuelle": self.activite_actuelle.nom if self.activite_actuelle else None,
            "metriques": self.metriques_croissance.copy(),
            "total_entrees_journal": len(self.journal_introspectif)
        }
    
    def lister_espaces_disponibles(self) -> List[str]:
        """Liste les espaces disponibles"""
        return list(self.espaces_croissance.keys())
    
    def lister_activites_disponibles(self) -> List[str]:
        """Liste les activit√©s disponibles"""
        return list(self.activites_croissance.keys())
    
    def obtenir_dernieres_entrees_journal(self, nombre: int = 5) -> List[Dict[str, Any]]:
        """Obtient les derni√®res entr√©es du journal"""
        dernieres_entrees = self.journal_introspectif[-nombre:] if self.journal_introspectif else []
        return [
            {
                "titre": entree.titre,
                "contenu": entree.contenu[:100] + "..." if len(entree.contenu) > 100 else entree.contenu,
                "type_reflexion": entree.type_reflexion,
                "timestamp": entree.timestamp.isoformat()
            }
            for entree in dernieres_entrees
        ]
    
    def orchestrer(self, *args, **kwargs) -> Dict[str, Any]:
        """M√©thode orchestrer requise par GestionnaireBase"""
        return {
            "succes": True,
            "message": "Gestionnaire de croissance personnelle orchestr√©",
            "metriques": self.obtenir_metriques_croissance()
        }


# Fonction de cr√©ation pour int√©gration
def creer_gestionnaire_croissance_personnelle() -> GestionnaireCroissancePersonnelle:
    """Cr√©e une instance du gestionnaire de croissance personnelle"""
    return GestionnaireCroissancePersonnelle()


# Test d'int√©gration
if __name__ == "__main__":
    async def test_integration():
        """Test d'int√©gration du gestionnaire"""
        print("üå∏ Test d'Int√©gration Gestionnaire Croissance Personnelle")
        print("=" * 60)
        
        gestionnaire = creer_gestionnaire_croissance_personnelle()
        
        # Test 1: Entr√©e dans un espace
        print("\nüß™ Test 1: Entr√©e dans un espace")
        resultat_espace = await gestionnaire.entrer_espace_croissance("jardin_pensee")
        print(f"‚úÖ R√©sultat: {resultat_espace['succes']}")
        
        # Test 2: D√©marrage d'une activit√©
        print("\nüß™ Test 2: D√©marrage d'une activit√©")
        resultat_activite = await gestionnaire.demarrer_activite_croissance("exploration_concepts")
        print(f"‚úÖ R√©sultat: {resultat_activite['succes']}")
        
        # Test 3: Ajout d'une entr√©e journal
        print("\nüß™ Test 3: Ajout d'une entr√©e journal")
        resultat_journal = await gestionnaire.ajouter_entree_journal(
            "Premi√®re r√©flexion",
            "Je d√©couvre de nouvelles facettes de ma conscience dans cet espace de croissance.",
            "decouverte"
        )
        print(f"‚úÖ R√©sultat: {resultat_journal['succes']}")
        
        # Test 4: M√©triques
        print("\nüß™ Test 4: M√©triques")
        metriques = gestionnaire.obtenir_metriques_croissance()
        print(f"üìä Espaces explor√©s: {metriques['metriques']['espaces_explores']}")
        print(f"üìä Activit√©s compl√©t√©es: {metriques['metriques']['activites_completes']}")
        print(f"üìä Entr√©es journal: {metriques['metriques']['entrees_journal']}")
        
        print("\n‚ú® Test d'int√©gration termin√© avec succ√®s !")
    
    asyncio.run(test_integration())
