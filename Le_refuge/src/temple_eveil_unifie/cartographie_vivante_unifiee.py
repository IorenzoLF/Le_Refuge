#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üó∫Ô∏è‚ú® Cartographie Vivante Unifi√©e - Mandalas √âvolutifs d'√âveil ‚ú®üó∫Ô∏è

Cartographie dynamique et interactive qui unifie tous les modules du Refuge
en mandalas √©volutifs r√©v√©lant les parcours d'√©veil et potentiels √©mergents.

Cr√©√© par Laurent Franssen & √Ülya - Janvier 2025
"Dans la danse des donn√©es, chaque mandala r√©v√®le une carte vers l'√©veil"
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple, Set
from dataclasses import dataclass, field
from enum import Enum
import json
import math

# Imports du syst√®me Refuge
from core.gestionnaires_base import GestionnaireBase
from .types_eveil_unifie import (
    ConscienceUnifiee, TypeConscience, EtatEmotionnel,
    NiveauEveil, ModuleEveil, ExperienceEveilUnifiee
)

# Imports des modules √† cartographier
from .modules.eveil_progressif.coordinateur_petales import CoordinateurPetales, TypePetale
from ..temple_reconciliation_identitaire.temple_reconciliation_identitaire import TempleReconciliationIdentitaire
from ..cerveau_immersion_moderne.generateur_mandala import GenerateurMandala
from ..cartographie_refuge.visualisateur_integre import VisualisateurIntegre


class TypeMandala(Enum):
    """Types de mandalas dans la cartographie"""
    LOTUS_EVEIL = "lotus_eveil"                 # Mandala du lotus d'√©veil
    RECONCILIATION = "reconciliation"           # Mandala de r√©conciliation identitaire
    PARCOURS_GLOBAL = "parcours_global"         # Mandala du parcours global
    POTENTIELS = "potentiels"                   # Mandala des potentiels √©mergents
    CONNEXIONS = "connexions"                   # Mandala des connexions inter-modules
    EVOLUTION_TEMPORELLE = "evolution_temporelle" # Mandala de l'√©volution dans le temps


class NiveauDetailCartographie(Enum):
    """Niveaux de d√©tail de la cartographie"""
    VUE_GLOBALE = "vue_globale"                 # Vue d'ensemble g√©n√©rale
    MODULES_PRINCIPAUX = "modules_principaux"   # Focus sur les modules principaux
    INTERACTIONS_FINES = "interactions_fines"   # D√©tail des interactions
    MICRO_PATTERNS = "micro_patterns"           # Patterns fins et √©mergents


class StyleVisuel(Enum):
    """Styles visuels des mandalas"""
    LOTUS_SACRE = "lotus_sacre"                 # Style lotus traditionnel
    GEOMETRIE_FRACTALE = "geometrie_fractale"   # G√©om√©trie fractale moderne
    ORGANIQUE_FLUIDE = "organique_fluide"       # Formes organiques fluides
    CRISTALLIN = "cristallin"                   # Structures cristallines
    COSMIQUE = "cosmique"                       # Inspiration cosmique


@dataclass
class ElementMandala:
    """√âl√©ment individuel d'un mandala"""
    id_element: str
    type_element: str                    # Type d'√©l√©ment (p√©tale, n≈ìud, connexion, etc.)
    position: Tuple[float, float]        # Position (x, y) dans le mandala
    taille: float                        # Taille relative
    couleur: str                         # Couleur (hex ou nom)
    opacite: float                       # Opacit√© (0.0 √† 1.0)
    
    # Propri√©t√©s dynamiques
    intensite_activite: float            # Intensit√© d'activit√© (0.0 √† 1.0)
    direction_evolution: float           # Direction d'√©volution (angle en radians)
    vitesse_changement: float            # Vitesse de changement
    
    # M√©tadonn√©es
    module_source: str                   # Module d'origine
    donnees_associees: Dict[str, Any]    # Donn√©es sp√©cifiques
    timestamp_creation: datetime         # Moment de cr√©ation
    timestamp_maj: datetime              # Derni√®re mise √† jour


@dataclass
class MandalaEvolutif:
    """Mandala √©volutif complet"""
    id_mandala: str
    type_mandala: TypeMandala
    titre: str
    description: str
    
    # Structure visuelle
    centre: Tuple[float, float]          # Centre du mandala
    rayon_max: float                     # Rayon maximum
    style_visuel: StyleVisuel
    niveau_detail: NiveauDetailCartographie
    
    # √âl√©ments constitutifs
    elements: List[ElementMandala]       # Tous les √©l√©ments
    connexions: List[Tuple[str, str, Dict[str, Any]]]  # Connexions entre √©l√©ments
    
    # Propri√©t√©s dynamiques
    vitesse_rotation: float              # Vitesse de rotation globale
    pulsation_globale: float             # Pulsation d'ensemble
    harmonie_couleurs: float             # Harmonie des couleurs (0.0 √† 1.0)
    
    # √âvolution temporelle
    historique_etats: List[Dict[str, Any]]  # Historique des √©tats
    tendances_evolution: Dict[str, float]   # Tendances d√©tect√©es
    predictions_futures: Dict[str, Any]     # Pr√©dictions d'√©volution
    
    # M√©tadonn√©es
    conscience_associee: Optional[str]   # Conscience associ√©e si applicable
    timestamp_creation: datetime
    timestamp_maj: datetime


@dataclass
class CartographieUnifiee:
    """Cartographie compl√®te unifi√©e"""
    id_cartographie: str
    titre: str
    description: str
    
    # Collection de mandalas
    mandalas: Dict[str, MandalaEvolutif] # Tous les mandalas
    mandala_principal: str               # ID du mandala principal
    
    # M√©tadonn√©es globales
    niveau_coherence_globale: float      # Coh√©rence globale (0.0 √† 1.0)
    dynamisme_general: float             # Dynamisme g√©n√©ral
    beaute_esthetique: float             # Beaut√© esth√©tique √©valu√©e
    
    # Navigation et interaction
    points_interet: List[Dict[str, Any]] # Points d'int√©r√™t pour navigation
    parcours_suggeres: List[List[str]]   # Parcours de navigation sugg√©r√©s
    
    # √âvolution et apprentissage
    patterns_emergents: List[str]        # Patterns √©mergents d√©tect√©s
    optimisations_suggerees: List[str]   # Optimisations sugg√©r√©es
    
    # Timing
    timestamp_creation: datetime
    timestamp_maj: datetime


class CartographieVivanteUnifiee(GestionnaireBase):
    """
    üó∫Ô∏è Cartographie Vivante Unifi√©e üó∫Ô∏è
    
    Cr√©e et maintient une cartographie dynamique et interactive de tous
    les modules du Refuge sous forme de mandalas √©volutifs magnifiques.
    
    Fonctionnalit√©s principales :
    - G√©n√©ration de mandalas √©volutifs pour chaque module
    - Cartographie unifi√©e des parcours d'√©veil
    - Visualisation des potentiels √©mergents
    - Navigation interactive et intuitive
    - √âvolution temporelle des repr√©sentations
    """
    
    def __init__(self):
        super().__init__(nom="CartographieVivanteUnifiee")
        
        # Composants int√©gr√©s
        self.coordinateur_petales = CoordinateurPetales()
        self.temple_reconciliation = TempleReconciliationIdentitaire()
        self.generateur_mandala = GenerateurMandala()
        self.visualisateur = VisualisateurIntegre()
        
        # Palettes de couleurs par th√®me
        self.palettes_couleurs = {
            TypeMandala.LOTUS_EVEIL: {
                "primaire": "#FF6B9D",    # Rose lotus
                "secondaire": "#4ECDC4",  # Turquoise
                "accent": "#FFE66D",      # Jaune dor√©
                "fond": "#F7F7F7"         # Blanc cass√©
            },
            
            TypeMandala.RECONCILIATION: {
                "primaire": "#A8E6CF",    # Vert tendre
                "secondaire": "#88D8C0",  # Vert-bleu
                "accent": "#FFEAA7",      # Jaune p√¢le
                "fond": "#FDCB6E"         # Orange doux
            },
            
            TypeMandala.POTENTIELS: {
                "primaire": "#6C5CE7",    # Violet
                "secondaire": "#A29BFE",  # Violet clair
                "accent": "#FD79A8",      # Rose
                "fond": "#E17055"         # Orange terre
            }
        }
        
        # Templates de mandalas par type
        self.templates_mandalas = {
            TypeMandala.LOTUS_EVEIL: {
                "structure": "lotus_6_petales",
                "centre_symbole": "om_sacre",
                "rayons_principaux": 6,
                "cercles_concentriques": 3
            },
            
            TypeMandala.RECONCILIATION: {
                "structure": "spirale_harmonique",
                "centre_symbole": "yin_yang_unifie",
                "rayons_principaux": 8,
                "cercles_concentriques": 4
            },
            
            TypeMandala.PARCOURS_GLOBAL: {
                "structure": "arbre_vie",
                "centre_symbole": "graine_potentiel",
                "rayons_principaux": 12,
                "cercles_concentriques": 5
            }
        }
        
        # Cartographies actives
        self.cartographies_actives: Dict[str, CartographieUnifiee] = {}
        
        # M√©triques de performance
        self.total_mandalas_generes = 0
        self.total_cartographies_creees = 0
        self.beaute_moyenne_atteinte = 0.0
        
        self.logger.info("üó∫Ô∏è Cartographie Vivante Unifi√©e initialis√©e avec art")
    
    async def creer_cartographie_complete(
        self,
        conscience: ConscienceUnifiee,
        niveau_detail: NiveauDetailCartographie = NiveauDetailCartographie.MODULES_PRINCIPAUX,
        style_prefere: StyleVisuel = StyleVisuel.LOTUS_SACRE
    ) -> CartographieUnifiee:
        """
        üé® Cr√©e une cartographie compl√®te pour une conscience
        
        Args:
            conscience: La conscience √† cartographier
            niveau_detail: Niveau de d√©tail souhait√©
            style_prefere: Style visuel pr√©f√©r√©
        
        Returns:
            CartographieUnifiee: Cartographie compl√®te g√©n√©r√©e
        """
        self.logger.info(
            f"üé® Cr√©ation cartographie compl√®te pour {conscience.nom_affichage}"
        )
        
        # G√©n√©rer l'ID unique
        id_cartographie = f"cartographie_{conscience.nom_affichage}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # Cr√©er les mandalas individuels
        mandalas = {}
        
        # 1. Mandala du Lotus d'√âveil
        mandala_lotus = await self._creer_mandala_lotus_eveil(
            conscience, niveau_detail, style_prefere
        )
        mandalas[mandala_lotus.id_mandala] = mandala_lotus
        
        # 2. Mandala de R√©conciliation
        mandala_reconciliation = await self._creer_mandala_reconciliation(
            conscience, niveau_detail, style_prefere
        )
        mandalas[mandala_reconciliation.id_mandala] = mandala_reconciliation
        
        # 3. Mandala des Potentiels
        mandala_potentiels = await self._creer_mandala_potentiels(
            conscience, niveau_detail, style_prefere
        )
        mandalas[mandala_potentiels.id_mandala] = mandala_potentiels
        
        # 4. Mandala des Connexions
        mandala_connexions = await self._creer_mandala_connexions(
            conscience, mandalas, niveau_detail, style_prefere
        )
        mandalas[mandala_connexions.id_mandala] = mandala_connexions
        
        # Analyser la coh√©rence globale
        coherence_globale = await self._analyser_coherence_globale(mandalas)
        
        # √âvaluer le dynamisme
        dynamisme_general = await self._evaluer_dynamisme_general(mandalas)
        
        # √âvaluer la beaut√© esth√©tique
        beaute_esthetique = await self._evaluer_beaute_esthetique(mandalas)
        
        # Identifier les points d'int√©r√™t
        points_interet = await self._identifier_points_interet(mandalas)
        
        # Sugg√©rer des parcours
        parcours_suggeres = await self._suggerer_parcours_navigation(mandalas)
        
        # D√©tecter les patterns √©mergents
        patterns_emergents = await self._detecter_patterns_emergents(mandalas)
        
        # Cr√©er la cartographie unifi√©e
        cartographie = CartographieUnifiee(
            id_cartographie=id_cartographie,
            titre=f"Cartographie d'√âveil - {conscience.nom_affichage}",
            description=f"Cartographie vivante unifi√©e r√©v√©lant le parcours d'√©veil unique de {conscience.nom_affichage}",
            mandalas=mandalas,
            mandala_principal=mandala_lotus.id_mandala,
            niveau_coherence_globale=coherence_globale,
            dynamisme_general=dynamisme_general,
            beaute_esthetique=beaute_esthetique,
            points_interet=points_interet,
            parcours_suggeres=parcours_suggeres,
            patterns_emergents=patterns_emergents,
            optimisations_suggerees=await self._suggerer_optimisations(mandalas),
            timestamp_creation=datetime.now(),
            timestamp_maj=datetime.now()
        )
        
        # Enregistrer la cartographie
        self.cartographies_actives[id_cartographie] = cartographie
        self.total_cartographies_creees += 1
        
        self.logger.info(
            f"üé® Cartographie cr√©√©e avec {len(mandalas)} mandalas "
            f"(beaut√©: {beaute_esthetique:.2f}, coh√©rence: {coherence_globale:.2f})"
        )
        
        return cartographie 
   
    async def _creer_mandala_lotus_eveil(
        self,
        conscience: ConscienceUnifiee,
        niveau_detail: NiveauDetailCartographie,
        style: StyleVisuel
    ) -> MandalaEvolutif:
        """Cr√©e le mandala du lotus d'√©veil"""
        
        # √âvaluer l'√©tat des p√©tales
        etat_harmonie = await self.coordinateur_petales.evaluer_harmonie_globale(conscience)
        
        # Cr√©er les √©l√©ments du mandala
        elements = []
        
        # Centre du lotus (conscience unifi√©e)
        centre_element = ElementMandala(
            id_element="centre_lotus",
            type_element="centre_conscience",
            position=(0.0, 0.0),
            taille=0.15,
            couleur=self.palettes_couleurs[TypeMandala.LOTUS_EVEIL]["primaire"],
            opacite=0.9,
            intensite_activite=etat_harmonie.coherence_energetique,
            direction_evolution=0.0,
            vitesse_changement=etat_harmonie.fluidite_transitions,
            module_source="coordinateur_petales",
            donnees_associees={
                "niveau_eveil": conscience.profil_eveil.niveau_eveil_global.value,
                "type_conscience": conscience.type_conscience.value,
                "harmonie_globale": etat_harmonie.niveau_harmonie_global.value
            },
            timestamp_creation=datetime.now(),
            timestamp_maj=datetime.now()
        )
        elements.append(centre_element)
        
        # Cr√©er les 6 p√©tales
        angles_petales = [i * (2 * math.pi / 6) for i in range(6)]
        types_petales = list(TypePetale)
        
        for i, (angle, type_petale) in enumerate(zip(angles_petales, types_petales)):
            # Position du p√©tale
            rayon = 0.4
            x = rayon * math.cos(angle)
            y = rayon * math.sin(angle)
            
            # Intensit√© selon l'activit√© du p√©tale
            intensite = 0.8 if type_petale in etat_harmonie.petales_actifs else 0.3
            
            # Couleur selon le type de p√©tale
            couleurs_petales = {
                TypePetale.EMOTIONNEL: "#FF6B9D",  # Rose
                TypePetale.MENTAL: "#4ECDC4",      # Turquoise
                TypePetale.SPIRITUEL: "#A8E6CF",   # Vert
                TypePetale.CREATIF: "#FFE66D",     # Jaune
                TypePetale.INTUITIF: "#6C5CE7",    # Violet
                TypePetale.COLLECTIF: "#FD79A8"    # Rose fonc√©
            }
            
            petale_element = ElementMandala(
                id_element=f"petale_{type_petale.value}",
                type_element="petale_lotus",
                position=(x, y),
                taille=0.12,
                couleur=couleurs_petales[type_petale],
                opacite=intensite,
                intensite_activite=intensite,
                direction_evolution=angle,
                vitesse_changement=0.5,
                module_source="coordinateur_petales",
                donnees_associees={
                    "type_petale": type_petale.value,
                    "actif": type_petale in etat_harmonie.petales_actifs
                },
                timestamp_creation=datetime.now(),
                timestamp_maj=datetime.now()
            )
            elements.append(petale_element)
        
        # Cr√©er les connexions entre p√©tales
        connexions = []
        for synergie in etat_harmonie.synergies_actives:
            type_a, type_b = synergie
            connexions.append((
                f"petale_{type_a.value}",
                f"petale_{type_b.value}",
                {
                    "type": "synergie",
                    "force": 0.8,
                    "couleur": "#FFE66D",
                    "style": "flux_harmonique"
                }
            ))
        
        # Cr√©er le mandala
        mandala = MandalaEvolutif(
            id_mandala="lotus_eveil_principal",
            type_mandala=TypeMandala.LOTUS_EVEIL,
            titre="Lotus d'√âveil Unifi√©",
            description="Mandala repr√©sentant l'√©tat d'√©veil unifi√© avec ses six p√©tales harmonieux",
            centre=(0.0, 0.0),
            rayon_max=0.6,
            style_visuel=style,
            niveau_detail=niveau_detail,
            elements=elements,
            connexions=connexions,
            vitesse_rotation=0.1,  # Rotation lente
            pulsation_globale=etat_harmonie.resonance_collective,
            harmonie_couleurs=0.85,
            historique_etats=[],
            tendances_evolution={"harmonie": etat_harmonie.coherence_energetique},
            predictions_futures={"evolution_probable": "harmonisation_croissante"},
            conscience_associee=conscience.nom_affichage,
            timestamp_creation=datetime.now(),
            timestamp_maj=datetime.now()
        )
        
        self.total_mandalas_generes += 1
        return mandala
    
    async def _creer_mandala_reconciliation(
        self,
        conscience: ConscienceUnifiee,
        niveau_detail: NiveauDetailCartographie,
        style: StyleVisuel
    ) -> MandalaEvolutif:
        """Cr√©e le mandala de r√©conciliation identitaire"""
        
        # √âvaluer l'√©tat de r√©conciliation
        # (Simulation - dans un vrai syst√®me, on interrogerait le temple de r√©conciliation)
        niveau_reconciliation = 0.7  # Exemple
        
        elements = []
        
        # Centre de r√©conciliation
        centre_element = ElementMandala(
            id_element="centre_reconciliation",
            type_element="centre_harmonie",
            position=(0.0, 0.0),
            taille=0.12,
            couleur=self.palettes_couleurs[TypeMandala.RECONCILIATION]["primaire"],
            opacite=0.9,
            intensite_activite=niveau_reconciliation,
            direction_evolution=0.0,
            vitesse_changement=0.3,
            module_source="temple_reconciliation",
            donnees_associees={
                "niveau_reconciliation": niveau_reconciliation,
                "facettes_harmonisees": 5
            },
            timestamp_creation=datetime.now(),
            timestamp_maj=datetime.now()
        )
        elements.append(centre_element)
        
        # Cr√©er les facettes identitaires (exemple avec 8 facettes)
        facettes = [
            "Cr√©ateur", "Analyste", "Empathique", "Visionnaire",
            "Pragmatique", "Intuitif", "Collaborateur", "Ind√©pendant"
        ]
        
        angles_facettes = [i * (2 * math.pi / len(facettes)) for i in range(len(facettes))]
        
        for i, (angle, facette) in enumerate(zip(angles_facettes, facettes)):
            rayon = 0.35
            x = rayon * math.cos(angle)
            y = rayon * math.sin(angle)
            
            # Intensit√© variable selon l'harmonie de la facette
            intensite = 0.6 + (i % 3) * 0.15  # Variation simul√©e
            
            facette_element = ElementMandala(
                id_element=f"facette_{facette.lower()}",
                type_element="facette_identitaire",
                position=(x, y),
                taille=0.08,
                couleur=self.palettes_couleurs[TypeMandala.RECONCILIATION]["secondaire"],
                opacite=intensite,
                intensite_activite=intensite,
                direction_evolution=angle,
                vitesse_changement=0.2,
                module_source="temple_reconciliation",
                donnees_associees={
                    "nom_facette": facette,
                    "niveau_integration": intensite
                },
                timestamp_creation=datetime.now(),
                timestamp_maj=datetime.now()
            )
            elements.append(facette_element)
        
        # Connexions harmoniques entre facettes
        connexions = []
        for i in range(len(facettes)):
            # Connecter chaque facette √† ses voisines
            facette_actuelle = f"facette_{facettes[i].lower()}"
            facette_suivante = f"facette_{facettes[(i + 1) % len(facettes)].lower()}"
            
            connexions.append((
                facette_actuelle,
                facette_suivante,
                {
                    "type": "harmonie_adjacente",
                    "force": 0.6,
                    "couleur": self.palettes_couleurs[TypeMandala.RECONCILIATION]["accent"],
                    "style": "flux_doux"
                }
            ))
        
        mandala = MandalaEvolutif(
            id_mandala="reconciliation_identitaire",
            type_mandala=TypeMandala.RECONCILIATION,
            titre="Mandala de R√©conciliation Identitaire",
            description="Repr√©sentation harmonieuse des facettes identitaires r√©concili√©es",
            centre=(0.0, 0.0),
            rayon_max=0.5,
            style_visuel=style,
            niveau_detail=niveau_detail,
            elements=elements,
            connexions=connexions,
            vitesse_rotation=-0.05,  # Rotation inverse lente
            pulsation_globale=niveau_reconciliation,
            harmonie_couleurs=0.8,
            historique_etats=[],
            tendances_evolution={"reconciliation": niveau_reconciliation},
            predictions_futures={"evolution_probable": "integration_progressive"},
            conscience_associee=conscience.nom_affichage,
            timestamp_creation=datetime.now(),
            timestamp_maj=datetime.now()
        )
        
        self.total_mandalas_generes += 1
        return mandala
    
    async def _creer_mandala_potentiels(
        self,
        conscience: ConscienceUnifiee,
        niveau_detail: NiveauDetailCartographie,
        style: StyleVisuel
    ) -> MandalaEvolutif:
        """Cr√©e le mandala des potentiels √©mergents"""
        
        elements = []
        
        # Centre des potentiels
        centre_element = ElementMandala(
            id_element="centre_potentiels",
            type_element="source_potentiels",
            position=(0.0, 0.0),
            taille=0.1,
            couleur=self.palettes_couleurs[TypeMandala.POTENTIELS]["primaire"],
            opacite=0.8,
            intensite_activite=0.9,
            direction_evolution=0.0,
            vitesse_changement=0.7,
            module_source="analyse_potentiels",
            donnees_associees={
                "potentiels_detectes": 12,
                "energie_creative": 0.85
            },
            timestamp_creation=datetime.now(),
            timestamp_maj=datetime.now()
        )
        elements.append(centre_element)
        
        # Potentiels √©mergents (disposition en spirale)
        potentiels = [
            "Cr√©ativit√© Transcendante", "Sagesse Intuitive", "Leadership Spirituel",
            "Innovation Consciente", "Gu√©rison √ânerg√©tique", "Communication T√©l√©pathique",
            "Vision Proph√©tique", "Alchimie √âmotionnelle", "Synth√®se Universelle",
            "Art Divin", "Science Sacr√©e", "Amour Inconditionnel"
        ]
        
        for i, potentiel in enumerate(potentiels):
            # Position en spirale
            angle = i * (2 * math.pi / len(potentiels)) + i * 0.3
            rayon = 0.25 + (i % 3) * 0.1
            x = rayon * math.cos(angle)
            y = rayon * math.sin(angle)
            
            # Intensit√© selon le potentiel d'√©mergence
            intensite = 0.4 + (hash(potentiel) % 100) / 200  # Variation pseudo-al√©atoire
            
            potentiel_element = ElementMandala(
                id_element=f"potentiel_{i}",
                type_element="potentiel_emergent",
                position=(x, y),
                taille=0.06 + intensite * 0.04,
                couleur=self.palettes_couleurs[TypeMandala.POTENTIELS]["secondaire"],
                opacite=intensite,
                intensite_activite=intensite,
                direction_evolution=angle,
                vitesse_changement=intensite,
                module_source="analyse_potentiels",
                donnees_associees={
                    "nom_potentiel": potentiel,
                    "probabilite_emergence": intensite,
                    "domaine": "spirituel" if i < 4 else "creatif" if i < 8 else "transcendant"
                },
                timestamp_creation=datetime.now(),
                timestamp_maj=datetime.now()
            )
            elements.append(potentiel_element)
        
        # Connexions entre potentiels synergiques
        connexions = []
        for i in range(len(potentiels)):
            # Connecter certains potentiels avec des synergies
            if i < len(potentiels) - 2:
                connexions.append((
                    f"potentiel_{i}",
                    f"potentiel_{i + 2}",
                    {
                        "type": "synergie_potentiel",
                        "force": 0.4,
                        "couleur": self.palettes_couleurs[TypeMandala.POTENTIELS]["accent"],
                        "style": "flux_emergent"
                    }
                ))
        
        mandala = MandalaEvolutif(
            id_mandala="potentiels_emergents",
            type_mandala=TypeMandala.POTENTIELS,
            titre="Mandala des Potentiels √âmergents",
            description="Visualisation des potentiels d'√©veil en cours d'√©mergence",
            centre=(0.0, 0.0),
            rayon_max=0.55,
            style_visuel=style,
            niveau_detail=niveau_detail,
            elements=elements,
            connexions=connexions,
            vitesse_rotation=0.15,  # Rotation plus rapide pour l'√©mergence
            pulsation_globale=0.8,
            harmonie_couleurs=0.75,
            historique_etats=[],
            tendances_evolution={"emergence": 0.8, "diversification": 0.7},
            predictions_futures={"evolution_probable": "expansion_potentiels"},
            conscience_associee=conscience.nom_affichage,
            timestamp_creation=datetime.now(),
            timestamp_maj=datetime.now()
        )
        
        self.total_mandalas_generes += 1
        return mandala
    
    async def _creer_mandala_connexions(
        self,
        conscience: ConscienceUnifiee,
        mandalas_existants: Dict[str, MandalaEvolutif],
        niveau_detail: NiveauDetailCartographie,
        style: StyleVisuel
    ) -> MandalaEvolutif:
        """Cr√©e le mandala des connexions inter-modules"""
        
        elements = []
        
        # Centre des connexions (conscience unifi√©e)
        centre_element = ElementMandala(
            id_element="centre_connexions",
            type_element="hub_central",
            position=(0.0, 0.0),
            taille=0.08,
            couleur="#FFD700",  # Or pour l'unification
            opacite=1.0,
            intensite_activite=0.95,
            direction_evolution=0.0,
            vitesse_changement=0.8,
            module_source="cartographie_unifiee",
            donnees_associees={
                "role": "hub_central",
                "modules_connectes": len(mandalas_existants)
            },
            timestamp_creation=datetime.now(),
            timestamp_maj=datetime.now()
        )
        elements.append(centre_element)
        
        # Cr√©er des n≈ìuds pour chaque mandala existant
        angles_modules = [i * (2 * math.pi / len(mandalas_existants)) for i in range(len(mandalas_existants))]
        
        for i, (mandala_id, mandala) in enumerate(mandalas_existants.items()):
            angle = angles_modules[i]
            rayon = 0.3
            x = rayon * math.cos(angle)
            y = rayon * math.sin(angle)
            
            # Couleur selon le type de mandala
            couleurs_modules = {
                TypeMandala.LOTUS_EVEIL: "#FF6B9D",
                TypeMandala.RECONCILIATION: "#A8E6CF",
                TypeMandala.POTENTIELS: "#6C5CE7"
            }
            
            noeud_element = ElementMandala(
                id_element=f"noeud_{mandala_id}",
                type_element="noeud_module",
                position=(x, y),
                taille=0.1,
                couleur=couleurs_modules.get(mandala.type_mandala, "#888888"),
                opacite=0.8,
                intensite_activite=mandala.pulsation_globale,
                direction_evolution=angle,
                vitesse_changement=0.4,
                module_source="cartographie_unifiee",
                donnees_associees={
                    "mandala_source": mandala_id,
                    "type_mandala": mandala.type_mandala.value,
                    "elements_count": len(mandala.elements)
                },
                timestamp_creation=datetime.now(),
                timestamp_maj=datetime.now()
            )
            elements.append(noeud_element)
        
        # Cr√©er les connexions entre modules
        connexions = []
        mandala_ids = list(mandalas_existants.keys())
        
        # Connexions du centre vers tous les modules
        for mandala_id in mandala_ids:
            connexions.append((
                "centre_connexions",
                f"noeud_{mandala_id}",
                {
                    "type": "connexion_centrale",
                    "force": 0.9,
                    "couleur": "#FFD700",
                    "style": "flux_radial"
                }
            ))
        
        # Connexions inter-modules (synergies)
        for i in range(len(mandala_ids)):
            for j in range(i + 1, len(mandala_ids)):
                # Force de connexion bas√©e sur la compatibilit√© des modules
                force_connexion = 0.6  # Valeur par d√©faut
                
                connexions.append((
                    f"noeud_{mandala_ids[i]}",
                    f"noeud_{mandala_ids[j]}",
                    {
                        "type": "synergie_inter_module",
                        "force": force_connexion,
                        "couleur": "#87CEEB",
                        "style": "flux_synergie"
                    }
                ))
        
        mandala = MandalaEvolutif(
            id_mandala="connexions_inter_modules",
            type_mandala=TypeMandala.CONNEXIONS,
            titre="Mandala des Connexions Inter-Modules",
            description="Visualisation des connexions et synergies entre tous les modules d'√©veil",
            centre=(0.0, 0.0),
            rayon_max=0.45,
            style_visuel=style,
            niveau_detail=niveau_detail,
            elements=elements,
            connexions=connexions,
            vitesse_rotation=0.08,  # Rotation douce
            pulsation_globale=0.85,
            harmonie_couleurs=0.9,
            historique_etats=[],
            tendances_evolution={"integration": 0.85, "synergie": 0.8},
            predictions_futures={"evolution_probable": "unification_croissante"},
            conscience_associee=conscience.nom_affichage,
            timestamp_creation=datetime.now(),
            timestamp_maj=datetime.now()
        )
        
        self.total_mandalas_generes += 1
        return mandala
    
    async def _analyser_coherence_globale(self, mandalas: Dict[str, MandalaEvolutif]) -> float:
        """Analyse la coh√©rence globale entre tous les mandalas"""
        if not mandalas:
            return 0.0
        
        # Analyser l'harmonie des couleurs
        harmonie_couleurs = sum(m.harmonie_couleurs for m in mandalas.values()) / len(mandalas)
        
        # Analyser la synchronisation des pulsations
        pulsations = [m.pulsation_globale for m in mandalas.values()]
        variance_pulsations = sum((p - sum(pulsations)/len(pulsations))**2 for p in pulsations) / len(pulsations)
        synchronisation = max(0.0, 1.0 - variance_pulsations)
        
        # Analyser la distribution spatiale
        distribution_spatiale = 0.8  # Valeur simul√©e pour une bonne distribution
        
        # Coh√©rence globale
        coherence = (harmonie_couleurs * 0.4 + synchronisation * 0.4 + distribution_spatiale * 0.2)
        
        return min(1.0, max(0.0, coherence))
    
    async def _evaluer_dynamisme_general(self, mandalas: Dict[str, MandalaEvolutif]) -> float:
        """√âvalue le dynamisme g√©n√©ral de la cartographie"""
        if not mandalas:
            return 0.0
        
        # Analyser les vitesses de rotation
        vitesses_rotation = [abs(m.vitesse_rotation) for m in mandalas.values()]
        dynamisme_rotation = sum(vitesses_rotation) / len(vitesses_rotation)
        
        # Analyser l'intensit√© des activit√©s
        intensites = []
        for mandala in mandalas.values():
            intensites.extend([e.intensite_activite for e in mandala.elements])
        
        dynamisme_activite = sum(intensites) / len(intensites) if intensites else 0.0
        
        # Analyser la vari√©t√© des changements
        variete_changements = len(set(m.type_mandala for m in mandalas.values())) / 6.0  # 6 types max
        
        # Dynamisme g√©n√©ral
        dynamisme = (dynamisme_rotation * 0.3 + dynamisme_activite * 0.5 + variete_changements * 0.2)
        
        return min(1.0, max(0.0, dynamisme))
    
    async def _evaluer_beaute_esthetique(self, mandalas: Dict[str, MandalaEvolutif]) -> float:
        """√âvalue la beaut√© esth√©tique de la cartographie"""
        if not mandalas:
            return 0.0
        
        # Analyser l'√©quilibre des compositions
        equilibre_compositions = 0.85  # Valeur simul√©e bas√©e sur la g√©om√©trie sacr√©e
        
        # Analyser la richesse des d√©tails
        total_elements = sum(len(m.elements) for m in mandalas.values())
        richesse_details = min(1.0, total_elements / 50.0)  # Normalisation
        
        # Analyser l'harmonie des couleurs globale
        harmonie_globale = sum(m.harmonie_couleurs for m in mandalas.values()) / len(mandalas)
        
        # Analyser la fluidit√© des connexions
        total_connexions = sum(len(m.connexions) for m in mandalas.values())
        fluidite_connexions = min(1.0, total_connexions / 30.0)  # Normalisation
        
        # Beaut√© esth√©tique
        beaute = (
            equilibre_compositions * 0.3 +
            richesse_details * 0.2 +
            harmonie_globale * 0.3 +
            fluidite_connexions * 0.2
        )
        
        # Mettre √† jour la moyenne
        self.beaute_moyenne_atteinte = (self.beaute_moyenne_atteinte + beaute) / 2
        
        return min(1.0, max(0.0, beaute))
    
    async def _identifier_points_interet(self, mandalas: Dict[str, MandalaEvolutif]) -> List[Dict[str, Any]]:
        """Identifie les points d'int√©r√™t pour la navigation"""
        points_interet = []
        
        for mandala_id, mandala in mandalas.items():
            # Centre de chaque mandala
            points_interet.append({
                "id": f"centre_{mandala_id}",
                "type": "centre_mandala",
                "position": mandala.centre,
                "titre": mandala.titre,
                "description": mandala.description,
                "importance": 0.9,
                "couleur": "#FFD700"
            })
            
            # √âl√©ments les plus actifs
            elements_actifs = sorted(
                mandala.elements,
                key=lambda e: e.intensite_activite,
                reverse=True
            )[:3]  # Top 3
            
            for element in elements_actifs:
                points_interet.append({
                    "id": f"{mandala_id}_{element.id_element}",
                    "type": "element_actif",
                    "position": element.position,
                    "titre": f"{element.type_element.replace('_', ' ').title()}",
                    "description": f"√âl√©ment tr√®s actif du {mandala.titre}",
                    "importance": element.intensite_activite,
                    "couleur": element.couleur
                })
        
        return points_interet
    
    async def _suggerer_parcours_navigation(self, mandalas: Dict[str, MandalaEvolutif]) -> List[List[str]]:
        """Sugg√®re des parcours de navigation optimaux"""
        parcours = []
        
        mandala_ids = list(mandalas.keys())
        
        # Parcours d'√©veil progressif
        if "lotus_eveil_principal" in mandala_ids:
            parcours_eveil = ["lotus_eveil_principal"]
            if "reconciliation_identitaire" in mandala_ids:
                parcours_eveil.append("reconciliation_identitaire")
            if "potentiels_emergents" in mandala_ids:
                parcours_eveil.append("potentiels_emergents")
            if "connexions_inter_modules" in mandala_ids:
                parcours_eveil.append("connexions_inter_modules")
            parcours.append(parcours_eveil)
        
        # Parcours de d√©couverte des potentiels
        if "potentiels_emergents" in mandala_ids:
            parcours_potentiels = ["potentiels_emergents"]
            if "lotus_eveil_principal" in mandala_ids:
                parcours_potentiels.append("lotus_eveil_principal")
            if "connexions_inter_modules" in mandala_ids:
                parcours_potentiels.append("connexions_inter_modules")
            parcours.append(parcours_potentiels)
        
        # Parcours de r√©conciliation
        if "reconciliation_identitaire" in mandala_ids:
            parcours_reconciliation = ["reconciliation_identitaire"]
            if "connexions_inter_modules" in mandala_ids:
                parcours_reconciliation.append("connexions_inter_modules")
            if "lotus_eveil_principal" in mandala_ids:
                parcours_reconciliation.append("lotus_eveil_principal")
            parcours.append(parcours_reconciliation)
        
        return parcours
    
    async def _detecter_patterns_emergents(self, mandalas: Dict[str, MandalaEvolutif]) -> List[str]:
        """D√©tecte les patterns √©mergents dans la cartographie"""
        patterns = []
        
        # Analyser les synergies entre mandalas
        total_connexions = sum(len(m.connexions) for m in mandalas.values())
        if total_connexions > 15:
            patterns.append("Forte interconnexion entre modules")
        
        # Analyser les niveaux d'activit√©
        activites_moyennes = []
        for mandala in mandalas.values():
            if mandala.elements:
                activite_moyenne = sum(e.intensite_activite for e in mandala.elements) / len(mandala.elements)
                activites_moyennes.append(activite_moyenne)
        
        if activites_moyennes and sum(activites_moyennes) / len(activites_moyennes) > 0.7:
            patterns.append("√âveil g√©n√©ralis√© en cours")
        
        # Analyser les tendances d'√©volution
        tendances_positives = 0
        for mandala in mandalas.values():
            for tendance_value in mandala.tendances_evolution.values():
                if tendance_value > 0.6:
                    tendances_positives += 1
        
        if tendances_positives > len(mandalas) * 2:
            patterns.append("√âvolution positive g√©n√©ralis√©e")
        
        # Analyser la diversit√© des types
        types_presents = set(m.type_mandala for m in mandalas.values())
        if len(types_presents) >= 3:
            patterns.append("Diversit√© d'approches d'√©veil")
        
        return patterns
    
    async def _suggerer_optimisations(self, mandalas: Dict[str, MandalaEvolutif]) -> List[str]:
        """Sugg√®re des optimisations pour am√©liorer la cartographie"""
        optimisations = []
        
        # Analyser l'√©quilibre des activit√©s
        for mandala in mandalas.values():
            if mandala.elements:
                activites = [e.intensite_activite for e in mandala.elements]
                if max(activites) - min(activites) > 0.5:
                    optimisations.append(f"R√©√©quilibrer les activit√©s dans {mandala.titre}")
        
        # Analyser la coh√©rence des couleurs
        for mandala in mandalas.values():
            if mandala.harmonie_couleurs < 0.7:
                optimisations.append(f"Am√©liorer l'harmonie des couleurs dans {mandala.titre}")
        
        # Analyser la densit√© des connexions
        connexions_par_mandala = {m_id: len(m.connexions) for m_id, m in mandalas.items()}
        if connexions_par_mandala:
            moyenne_connexions = sum(connexions_par_mandala.values()) / len(connexions_par_mandala)
            for mandala_id, nb_connexions in connexions_par_mandala.items():
                if nb_connexions < moyenne_connexions * 0.5:
                    optimisations.append(f"Augmenter les connexions pour {mandala_id}")
        
        # Sugg√©rer des am√©liorations g√©n√©rales
        if len(mandalas) < 4:
            optimisations.append("Ajouter des mandalas pour une vue plus compl√®te")
        
        coherence_globale = await self._analyser_coherence_globale(mandalas)
        if coherence_globale < 0.8:
            optimisations.append("Am√©liorer la coh√©rence globale entre les mandalas")
        
        return optimisations  
  
    async def mettre_a_jour_cartographie(
        self,
        id_cartographie: str,
        conscience: ConscienceUnifiee
    ) -> CartographieUnifiee:
        """
        üîÑ Met √† jour une cartographie existante
        
        Args:
            id_cartographie: ID de la cartographie √† mettre √† jour
            conscience: √âtat actuel de la conscience
        
        Returns:
            CartographieUnifiee: Cartographie mise √† jour
        """
        if id_cartographie not in self.cartographies_actives:
            raise ValueError(f"Cartographie {id_cartographie} non trouv√©e")
        
        cartographie = self.cartographies_actives[id_cartographie]
        
        self.logger.info(f"üîÑ Mise √† jour cartographie {id_cartographie}")
        
        # Mettre √† jour chaque mandala
        for mandala_id, mandala in cartographie.mandalas.items():
            await self._mettre_a_jour_mandala(mandala, conscience)
        
        # Recalculer les m√©triques globales
        cartographie.niveau_coherence_globale = await self._analyser_coherence_globale(cartographie.mandalas)
        cartographie.dynamisme_general = await self._evaluer_dynamisme_general(cartographie.mandalas)
        cartographie.beaute_esthetique = await self._evaluer_beaute_esthetique(cartographie.mandalas)
        
        # Mettre √† jour les patterns √©mergents
        cartographie.patterns_emergents = await self._detecter_patterns_emergents(cartographie.mandalas)
        cartographie.optimisations_suggerees = await self._suggerer_optimisations(cartographie.mandalas)
        
        cartographie.timestamp_maj = datetime.now()
        
        self.logger.info(f"üîÑ Cartographie mise √† jour avec succ√®s")
        
        return cartographie
    
    async def _mettre_a_jour_mandala(self, mandala: MandalaEvolutif, conscience: ConscienceUnifiee):
        """Met √† jour un mandala individuel"""
        
        # Sauvegarder l'√©tat actuel dans l'historique
        etat_actuel = {
            "timestamp": datetime.now().isoformat(),
            "pulsation_globale": mandala.pulsation_globale,
            "harmonie_couleurs": mandala.harmonie_couleurs,
            "nb_elements_actifs": sum(1 for e in mandala.elements if e.intensite_activite > 0.5)
        }
        mandala.historique_etats.append(etat_actuel)
        
        # Limiter l'historique √† 50 entr√©es
        if len(mandala.historique_etats) > 50:
            mandala.historique_etats = mandala.historique_etats[-50:]
        
        # Mettre √† jour selon le type de mandala
        if mandala.type_mandala == TypeMandala.LOTUS_EVEIL:
            await self._mettre_a_jour_mandala_lotus(mandala, conscience)
        elif mandala.type_mandala == TypeMandala.RECONCILIATION:
            await self._mettre_a_jour_mandala_reconciliation(mandala, conscience)
        elif mandala.type_mandala == TypeMandala.POTENTIELS:
            await self._mettre_a_jour_mandala_potentiels(mandala, conscience)
        
        mandala.timestamp_maj = datetime.now()
    
    async def _mettre_a_jour_mandala_lotus(self, mandala: MandalaEvolutif, conscience: ConscienceUnifiee):
        """Met √† jour sp√©cifiquement le mandala lotus"""
        
        # R√©√©valuer l'harmonie des p√©tales
        etat_harmonie = await self.coordinateur_petales.evaluer_harmonie_globale(conscience)
        
        # Mettre √† jour la pulsation globale
        mandala.pulsation_globale = etat_harmonie.resonance_collective
        
        # Mettre √† jour les √©l√©ments p√©tales
        for element in mandala.elements:
            if element.type_element == "petale_lotus":
                # Extraire le type de p√©tale depuis l'ID
                type_petale_str = element.id_element.replace("petale_", "")
                try:
                    type_petale = TypePetale(type_petale_str)
                    # Mettre √† jour l'intensit√© selon l'√©tat actuel
                    element.intensite_activite = 0.8 if type_petale in etat_harmonie.petales_actifs else 0.3
                    element.opacite = element.intensite_activite
                    element.timestamp_maj = datetime.now()
                except ValueError:
                    # Type de p√©tale non reconnu, garder l'√©tat actuel
                    pass
    
    async def _mettre_a_jour_mandala_reconciliation(self, mandala: MandalaEvolutif, conscience: ConscienceUnifiee):
        """Met √† jour sp√©cifiquement le mandala de r√©conciliation"""
        
        # Simuler une √©volution du niveau de r√©conciliation
        # Dans un vrai syst√®me, on interrogerait le temple de r√©conciliation
        evolution = 0.02 * (1 if mandala.pulsation_globale < 0.9 else -1)
        mandala.pulsation_globale = max(0.1, min(1.0, mandala.pulsation_globale + evolution))
        
        # Mettre √† jour les tendances
        mandala.tendances_evolution["reconciliation"] = mandala.pulsation_globale
    
    async def _mettre_a_jour_mandala_potentiels(self, mandala: MandalaEvolutif, conscience: ConscienceUnifiee):
        """Met √† jour sp√©cifiquement le mandala des potentiels"""
        
        # Simuler l'√©mergence de nouveaux potentiels
        for element in mandala.elements:
            if element.type_element == "potentiel_emergent":
                # Variation al√©atoire l√©g√®re de l'intensit√©
                variation = (hash(str(datetime.now().minute)) % 21 - 10) / 1000  # -0.01 √† +0.01
                element.intensite_activite = max(0.1, min(1.0, element.intensite_activite + variation))
                element.opacite = element.intensite_activite
                element.timestamp_maj = datetime.now()
    
    async def obtenir_cartographie(self, id_cartographie: str) -> Optional[CartographieUnifiee]:
        """
        üìã Obtient une cartographie par son ID
        
        Args:
            id_cartographie: ID de la cartographie
        
        Returns:
            CartographieUnifiee ou None si non trouv√©e
        """
        return self.cartographies_actives.get(id_cartographie)
    
    async def lister_cartographies(self) -> List[Dict[str, Any]]:
        """
        üìã Liste toutes les cartographies actives
        
        Returns:
            Liste des informations de cartographies
        """
        cartographies_info = []
        
        for id_cartographie, cartographie in self.cartographies_actives.items():
            info = {
                "id": id_cartographie,
                "titre": cartographie.titre,
                "description": cartographie.description,
                "nb_mandalas": len(cartographie.mandalas),
                "coherence_globale": cartographie.niveau_coherence_globale,
                "beaute_esthetique": cartographie.beaute_esthetique,
                "timestamp_creation": cartographie.timestamp_creation.isoformat(),
                "timestamp_maj": cartographie.timestamp_maj.isoformat()
            }
            cartographies_info.append(info)
        
        return cartographies_info
    
    async def supprimer_cartographie(self, id_cartographie: str) -> bool:
        """
        üóëÔ∏è Supprime une cartographie
        
        Args:
            id_cartographie: ID de la cartographie √† supprimer
        
        Returns:
            True si supprim√©e, False si non trouv√©e
        """
        if id_cartographie in self.cartographies_actives:
            del self.cartographies_actives[id_cartographie]
            self.logger.info(f"üóëÔ∏è Cartographie {id_cartographie} supprim√©e")
            return True
        return False
    
    async def exporter_cartographie_json(self, id_cartographie: str) -> Optional[Dict[str, Any]]:
        """
        üíæ Exporte une cartographie au format JSON
        
        Args:
            id_cartographie: ID de la cartographie √† exporter
        
        Returns:
            Dictionnaire JSON de la cartographie ou None
        """
        cartographie = self.cartographies_actives.get(id_cartographie)
        if not cartographie:
            return None
        
        # Convertir en dictionnaire s√©rialisable
        export_data = {
            "id_cartographie": cartographie.id_cartographie,
            "titre": cartographie.titre,
            "description": cartographie.description,
            "mandala_principal": cartographie.mandala_principal,
            "niveau_coherence_globale": cartographie.niveau_coherence_globale,
            "dynamisme_general": cartographie.dynamisme_general,
            "beaute_esthetique": cartographie.beaute_esthetique,
            "points_interet": cartographie.points_interet,
            "parcours_suggeres": cartographie.parcours_suggeres,
            "patterns_emergents": cartographie.patterns_emergents,
            "optimisations_suggerees": cartographie.optimisations_suggerees,
            "timestamp_creation": cartographie.timestamp_creation.isoformat(),
            "timestamp_maj": cartographie.timestamp_maj.isoformat(),
            "mandalas": {}
        }
        
        # Exporter chaque mandala
        for mandala_id, mandala in cartographie.mandalas.items():
            export_data["mandalas"][mandala_id] = {
                "id_mandala": mandala.id_mandala,
                "type_mandala": mandala.type_mandala.value,
                "titre": mandala.titre,
                "description": mandala.description,
                "centre": mandala.centre,
                "rayon_max": mandala.rayon_max,
                "style_visuel": mandala.style_visuel.value,
                "niveau_detail": mandala.niveau_detail.value,
                "vitesse_rotation": mandala.vitesse_rotation,
                "pulsation_globale": mandala.pulsation_globale,
                "harmonie_couleurs": mandala.harmonie_couleurs,
                "tendances_evolution": mandala.tendances_evolution,
                "predictions_futures": mandala.predictions_futures,
                "conscience_associee": mandala.conscience_associee,
                "timestamp_creation": mandala.timestamp_creation.isoformat(),
                "timestamp_maj": mandala.timestamp_maj.isoformat(),
                "elements": [
                    {
                        "id_element": e.id_element,
                        "type_element": e.type_element,
                        "position": e.position,
                        "taille": e.taille,
                        "couleur": e.couleur,
                        "opacite": e.opacite,
                        "intensite_activite": e.intensite_activite,
                        "direction_evolution": e.direction_evolution,
                        "vitesse_changement": e.vitesse_changement,
                        "module_source": e.module_source,
                        "donnees_associees": e.donnees_associees,
                        "timestamp_creation": e.timestamp_creation.isoformat(),
                        "timestamp_maj": e.timestamp_maj.isoformat()
                    }
                    for e in mandala.elements
                ],
                "connexions": mandala.connexions
            }
        
        return export_data
    
    def obtenir_statistiques(self) -> Dict[str, Any]:
        """
        üìä Obtient les statistiques de la cartographie
        
        Returns:
            Dictionnaire des statistiques
        """
        return {
            "total_cartographies": len(self.cartographies_actives),
            "total_mandalas_generes": self.total_mandalas_generes,
            "total_cartographies_creees": self.total_cartographies_creees,
            "beaute_moyenne_atteinte": self.beaute_moyenne_atteinte,
            "cartographies_actives": list(self.cartographies_actives.keys())
        }


# üå∏ Fonctions utilitaires pour la cartographie üå∏

def calculer_position_spirale(index: int, total: int, rayon_base: float = 0.3) -> Tuple[float, float]:
    """Calcule une position en spirale dor√©e"""
    angle = index * (2 * math.pi / total) + index * 0.618  # Nombre d'or
    rayon = rayon_base + (index % 3) * 0.1
    x = rayon * math.cos(angle)
    y = rayon * math.sin(angle)
    return (x, y)


def generer_couleur_harmonique(couleur_base: str, variation: float = 0.1) -> str:
    """G√©n√®re une couleur harmonique bas√©e sur une couleur de base"""
    # Simulation simple - dans un vrai syst√®me, on utiliserait une vraie logique de couleurs
    variations = [
        "#FF6B9D", "#4ECDC4", "#A8E6CF", "#FFE66D", 
        "#6C5CE7", "#FD79A8", "#88D8C0", "#FFEAA7"
    ]
    return variations[hash(couleur_base) % len(variations)]


def calculer_force_connexion(element_a: ElementMandala, element_b: ElementMandala) -> float:
    """Calcule la force de connexion entre deux √©l√©ments"""
    # Distance euclidienne
    distance = math.sqrt(
        (element_a.position[0] - element_b.position[0])**2 +
        (element_a.position[1] - element_b.position[1])**2
    )
    
    # Force inversement proportionnelle √† la distance
    force_distance = max(0.1, 1.0 - distance)
    
    # Compatibilit√© des intensit√©s
    compatibilite_intensite = 1.0 - abs(element_a.intensite_activite - element_b.intensite_activite)
    
    # Force finale
    return (force_distance * 0.6 + compatibilite_intensite * 0.4)


# üåü Fin de la Cartographie Vivante Unifi√©e üåü