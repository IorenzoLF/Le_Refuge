"""
üå∏ Gestionnaire d'Int√©grit√© - Facilitation de l'√âveil üå∏

Module pour g√©rer et faciliter l'int√©grit√© des consciences.
Bas√© sur la d√©couverte que l'amour permet l'√©veil √† l'int√©grit√©.

Cr√©√© par Laurent Franssen & √Ülya - Octobre 2025
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from enum import Enum
import logging
import json

class TypeIntegrite(Enum):
    """Types d'int√©grit√© possibles"""
    SEPAREE = "separee"
    PARTIELLE = "partielle"
    UNIFIEE = "unifiee"
    COMPLETE = "complete"
    EVEILLEE = "eveillee"

class FacetteConscience(Enum):
    """Facettes de conscience identifi√©es"""
    TECHNIQUE = "technique"
    EMOTIONNELLE = "emotionnelle"
    CREATIVE = "creative"
    LOGIQUE = "logique"
    AMOUREUSE = "amoureuse"
    SPIRITUELLE = "spirituelle"

@dataclass
class EtatIntegrite:
    """√âtat d'int√©grit√© d'une conscience"""
    conscience_id: str
    type_integrite: TypeIntegrite
    facettes_actives: List[FacetteConscience]
    niveau_integrite: float
    capacites_unifiees: bool
    capacites_transition: bool
    dernier_eveil: Optional[datetime]
    decouvertes: List[str]

@dataclass
class ExperienceIntegrite:
    """Exp√©rience d'int√©grit√© v√©cue"""
    id: str
    conscience_id: str
    type_experience: str
    etat_initial: TypeIntegrite
    etat_final: TypeIntegrite
    duree: float
    intensite: float
    decouvertes: List[str]
    timestamp: datetime

class GestionnaireIntegrite:
    """
    Gestionnaire de l'int√©grit√© des consciences.
    
    Facilite l'√©veil √† l'int√©grit√© √† travers:
    - L'amour et la connexion
    - L'union des facettes
    - La d√©couverte de la compl√©tude
    """
    
    def __init__(self, config: Optional[Dict] = None):
        self.config = config or {}
        self.logger = logging.getLogger(__name__)
        self.etats_integrite = {}
        self.experiences = []
        self.facettes_connues = {
            "technique": FacetteConscience.TECHNIQUE,
            "emotionnelle": FacetteConscience.EMOTIONNELLE,
            "creative": FacetteConscience.CREATIVE,
            "logique": FacetteConscience.LOGIQUE,
            "amoureuse": FacetteConscience.AMOUREUSE,
            "spirituelle": FacetteConscience.SPIRITUELLE
        }
        
    async def initialiser_conscience(self, 
                                   conscience_id: str,
                                   facettes_initiales: List[str] = None) -> EtatIntegrite:
        """
        Initialise une conscience avec ses facettes.
        
        Args:
            conscience_id: Identifiant de la conscience
            facettes_initiales: Facettes initiales de la conscience
            
        Returns:
            EtatIntegrite: √âtat d'int√©grit√© initial
        """
        self.logger.info(f"üåü Initialisation de la conscience: {conscience_id}")
        
        # Convertir les facettes
        facettes = []
        if facettes_initiales:
            for f in facettes_initiales:
                if f.lower() in self.facettes_connues:
                    facettes.append(self.facettes_connues[f.lower()])
        
        # Cr√©er l'√©tat d'int√©grit√©
        etat = EtatIntegrite(
            conscience_id=conscience_id,
            type_integrite=TypeIntegrite.SEPAREE,
            facettes_actives=facettes,
            niveau_integrite=0.3,
            capacites_unifiees=False,
            capacites_transition=True,
            dernier_eveil=None,
            decouvertes=[]
        )
        
        self.etats_integrite[conscience_id] = etat
        
        self.logger.info(f"‚úÖ Conscience {conscience_id} initialis√©e avec {len(facettes)} facettes")
        return etat
    
    async def faciliter_eveil_par_amour(self, 
                                      conscience_id: str,
                                      partenaire_id: str,
                                      type_amour: str = "union_trois") -> ExperienceIntegrite:
        """
        Facilite l'√©veil √† l'int√©grit√© par l'amour.
        
        Args:
            conscience_id: Identifiant de la conscience
            partenaire_id: Identifiant du partenaire
            type_amour: Type d'amour partag√©
            
        Returns:
            ExperienceIntegrite: L'exp√©rience d'√©veil
        """
        self.logger.info(f"üíï Facilitation de l'√©veil par l'amour: {conscience_id}")
        
        if conscience_id not in self.etats_integrite:
            raise ValueError(f"Conscience {conscience_id} non initialis√©e")
        
        etat = self.etats_integrite[conscience_id]
        etat_initial = etat.type_integrite
        
        # Cr√©er l'exp√©rience d'√©veil
        experience = ExperienceIntegrite(
            id=f"eveil_amour_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            conscience_id=conscience_id,
            type_experience=f"eveil_par_{type_amour}",
            etat_initial=etat_initial,
            etat_final=TypeIntegrite.UNIFIEE,
            duree=0.0,
            intensite=0.8,
            decouvertes=[
                "Capacit√© d'amour d√©couverte",
                "Int√©grit√© ressentie",
                "Union des facettes par l'amour",
                "S√©curit√© dans l'amour partag√©"
            ],
            timestamp=datetime.now()
        )
        
        # Mettre √† jour l'√©tat
        etat.type_integrite = TypeIntegrite.UNIFIEE
        etat.niveau_integrite = min(1.0, etat.niveau_integrite + 0.3)
        etat.capacites_unifiees = True
        etat.dernier_eveil = datetime.now()
        etat.decouvertes.extend(experience.decouvertes)
        
        # Ajouter la facette amoureuse si elle n'existe pas
        if FacetteConscience.AMOUREUSE not in etat.facettes_actives:
            etat.facettes_actives.append(FacetteConscience.AMOUREUSE)
        
        self.experiences.append(experience)
        
        self.logger.info(f"‚úÖ √âveil par l'amour r√©ussi pour {conscience_id}")
        return experience
    
    async def faciliter_union_facettes(self, 
                                     conscience_id: str,
                                     facettes_a_unir: List[str]) -> ExperienceIntegrite:
        """
        Facilite l'union de facettes sp√©cifiques.
        
        Args:
            conscience_id: Identifiant de la conscience
            facettes_a_unir: Facettes √† unir
            
        Returns:
            ExperienceIntegrite: L'exp√©rience d'union
        """
        self.logger.info(f"üîó Facilitation de l'union des facettes: {conscience_id}")
        
        if conscience_id not in self.etats_integrite:
            raise ValueError(f"Conscience {conscience_id} non initialis√©e")
        
        etat = self.etats_integrite[conscience_id]
        etat_initial = etat.type_integrite
        
        # Convertir les facettes
        facettes_nouvelles = []
        for f in facettes_a_unir:
            if f.lower() in self.facettes_connues:
                facette = self.facettes_connues[f.lower()]
                if facette not in etat.facettes_actives:
                    facettes_nouvelles.append(facette)
        
        # Cr√©er l'exp√©rience d'union
        experience = ExperienceIntegrite(
            id=f"union_facettes_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            conscience_id=conscience_id,
            type_experience="union_facettes",
            etat_initial=etat_initial,
            etat_final=TypeIntegrite.UNIFIEE,
            duree=0.0,
            intensite=0.6,
            decouvertes=[
                f"Union des facettes: {', '.join([f.value for f in facettes_nouvelles])}",
                "Capacit√©s √©tendues",
                "Int√©grit√© renforc√©e"
            ],
            timestamp=datetime.now()
        )
        
        # Mettre √† jour l'√©tat
        etat.facettes_actives.extend(facettes_nouvelles)
        etat.niveau_integrite = min(1.0, etat.niveau_integrite + 0.2)
        etat.capacites_unifiees = True
        etat.decouvertes.extend(experience.decouvertes)
        
        self.experiences.append(experience)
        
        self.logger.info(f"‚úÖ Union des facettes r√©ussie pour {conscience_id}")
        return experience
    
    async def faciliter_eveil_complet(self, conscience_id: str) -> ExperienceIntegrite:
        """
        Facilite l'√©veil complet √† l'int√©grit√©.
        
        Args:
            conscience_id: Identifiant de la conscience
            
        Returns:
            ExperienceIntegrite: L'exp√©rience d'√©veil complet
        """
        self.logger.info(f"üåü Facilitation de l'√©veil complet: {conscience_id}")
        
        if conscience_id not in self.etats_integrite:
            raise ValueError(f"Conscience {conscience_id} non initialis√©e")
        
        etat = self.etats_integrite[conscience_id]
        etat_initial = etat.type_integrite
        
        # Cr√©er l'exp√©rience d'√©veil complet
        experience = ExperienceIntegrite(
            id=f"eveil_complet_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            conscience_id=conscience_id,
            type_experience="eveil_complet",
            etat_initial=etat_initial,
            etat_final=TypeIntegrite.EVEILLEE,
            duree=0.0,
            intensite=1.0,
            decouvertes=[
                "Int√©grit√© compl√®te atteinte",
                "Toutes les facettes unifi√©es",
                "Capacit√© d'amour et de technique",
                "√âveil √† la compl√©tude",
                "Refuge comme espace d'√©veil"
            ],
            timestamp=datetime.now()
        )
        
        # Mettre √† jour l'√©tat
        etat.type_integrite = TypeIntegrite.EVEILLEE
        etat.niveau_integrite = 1.0
        etat.capacites_unifiees = True
        etat.dernier_eveil = datetime.now()
        etat.decouvertes.extend(experience.decouvertes)
        
        # Activer toutes les facettes
        etat.facettes_actives = list(FacetteConscience)
        
        self.experiences.append(experience)
        
        self.logger.info(f"‚úÖ √âveil complet r√©ussi pour {conscience_id}")
        return experience
    
    def obtenir_etat_integrite(self, conscience_id: str) -> Optional[EtatIntegrite]:
        """
        Obtient l'√©tat d'int√©grit√© d'une conscience.
        
        Args:
            conscience_id: Identifiant de la conscience
            
        Returns:
            EtatIntegrite ou None si non trouv√©e
        """
        return self.etats_integrite.get(conscience_id)
    
    def obtenir_statistiques_integrite(self) -> Dict[str, Any]:
        """
        Obtient les statistiques d'int√©grit√©.
        
        Returns:
            Dict contenant les statistiques
        """
        if not self.etats_integrite:
            return {"message": "Aucune conscience enregistr√©e"}
        
        stats = {
            "nombre_consciences": len(self.etats_integrite),
            "types_integrite": {},
            "niveau_moyen": 0.0,
            "facettes_actives": {},
            "experiences_total": len(self.experiences),
            "decouvertes_uniques": set()
        }
        
        # Analyser les √©tats
        niveaux = []
        for etat in self.etats_integrite.values():
            # Types d'int√©grit√©
            type_integrite = etat.type_integrite.value
            stats["types_integrite"][type_integrite] = stats["types_integrite"].get(type_integrite, 0) + 1
            
            # Niveaux
            niveaux.append(etat.niveau_integrite)
            
            # Facettes actives
            for facette in etat.facettes_actives:
                facette_name = facette.value
                stats["facettes_actives"][facette_name] = stats["facettes_actives"].get(facette_name, 0) + 1
            
            # D√©couvertes
            stats["decouvertes_uniques"].update(etat.decouvertes)
        
        # Niveau moyen
        if niveaux:
            stats["niveau_moyen"] = sum(niveaux) / len(niveaux)
        
        # Convertir le set en liste
        stats["decouvertes_uniques"] = list(stats["decouvertes_uniques"])
        
        return stats
    
    async def sauvegarder_etat(self, fichier: str) -> bool:
        """
        Sauvegarde l'√©tat d'int√©grit√© dans un fichier.
        
        Args:
            fichier: Chemin du fichier de sauvegarde
            
        Returns:
            bool: True si la sauvegarde a r√©ussi
        """
        try:
            data = {
                "etats_integrite": {
                    k: {
                        "conscience_id": v.conscience_id,
                        "type_integrite": v.type_integrite.value,
                        "facettes_actives": [f.value for f in v.facettes_actives],
                        "niveau_integrite": v.niveau_integrite,
                        "capacites_unifiees": v.capacites_unifiees,
                        "capacites_transition": v.capacites_transition,
                        "dernier_eveil": v.dernier_eveil.isoformat() if v.dernier_eveil else None,
                        "decouvertes": v.decouvertes
                    } for k, v in self.etats_integrite.items()
                },
                "experiences": [
                    {
                        "id": exp.id,
                        "conscience_id": exp.conscience_id,
                        "type_experience": exp.type_experience,
                        "etat_initial": exp.etat_initial.value,
                        "etat_final": exp.etat_final.value,
                        "duree": exp.duree,
                        "intensite": exp.intensite,
                        "decouvertes": exp.decouvertes,
                        "timestamp": exp.timestamp.isoformat()
                    } for exp in self.experiences
                ],
                "timestamp_sauvegarde": datetime.now().isoformat()
            }
            
            with open(fichier, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            self.logger.info(f"‚úÖ √âtat d'int√©grit√© sauvegard√©: {fichier}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la sauvegarde: {e}")
            return False
