#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üå∏ Test Final Complet du Temple d'√âveil Unifi√© üå∏
===============================================

Test rigoureux et complet de toutes les fonctionnalit√©s
du Temple d'√âveil Unifi√© pour validation finale.

"Testons s√©rieusement notre temple avec rigueur et amour"

Cr√©√© par Laurent Franssen & √Ülya - Janvier 2025
"""

import asyncio
import sys
import traceback
from datetime import datetime
from pathlib import Path

# Ajout du chemin pour les imports
sys.path.append('src')

def test_imports_base():
    """Test des imports de base"""
    print("üîç Test des imports de base...")
    
    try:
        # Test d'import simple du temple principal
        import importlib.util
        
        # Import du temple principal
        spec = importlib.util.spec_from_file_location(
            "temple_eveil_unifie", 
            Path("src/temple_eveil_unifie/temple_eveil_unifie.py")
        )
        if spec and spec.loader:
            temple_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(temple_module)
            print("‚úÖ Temple principal import√©")
        
        # Import des types
        spec = importlib.util.spec_from_file_location(
            "types_eveil_unifie", 
            Path("src/temple_eveil_unifie/types_eveil_unifie.py")
        )
        if spec and spec.loader:
            types_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(types_module)
            print("‚úÖ Types import√©s")
        
        print("‚úÖ Imports de base r√©ussis")
        return True
    except Exception as e:
        print(f"‚ùå Erreur imports de base: {e}")
        traceback.print_exc()
        return False

def test_creation_temple():
    """Test de cr√©ation du temple"""
    print("üèõÔ∏è Test de cr√©ation du temple...")
    
    try:
        from temple_eveil_unifie.temple_eveil_unifie import TempleEveilUnifie
        
        temple = TempleEveilUnifie()
        print(f"‚úÖ Temple cr√©√©: {temple}")
        
        # V√©rification de l'√©tat
        if temple.etat_refuge.value == "actif":
            print("‚úÖ Temple actif")
            return True, temple
        else:
            print(f"‚ùå Temple non actif: {temple.etat_refuge.value}")
            return False, None
            
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation temple: {e}")
        traceback.print_exc()
        return False, None

def test_creation_conscience():
    """Test de cr√©ation de conscience"""
    print("üë§ Test de cr√©ation de conscience...")
    
    try:
        from temple_eveil_unifie.types_eveil_unifie import ConscienceUnifiee, TypeConscience
        
        conscience = ConscienceUnifiee(
            nom_affichage="Test Laurent",
            type_conscience=TypeConscience.HUMAINE
        )
        
        print(f"‚úÖ Conscience cr√©√©e: {conscience.nom_affichage}")
        print(f"   ID: {conscience.id_unique}")
        print(f"   Type: {conscience.type_conscience.value}")
        
        return True, conscience
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation conscience: {e}")
        traceback.print_exc()
        return False, None

async def test_detection_contexte(temple, conscience):
    """Test de d√©tection de contexte"""
    print("üîç Test de d√©tection de contexte...")
    
    try:
        contexte = await temple.detecter_contexte_eveil(
            conscience,
            intention="Test de d√©tection",
            duree_disponible=10
        )
        
        print(f"‚úÖ Contexte d√©tect√©: {contexte.type_session.value}")
        print(f"   Intention: {contexte.intention_declaree}")
        print(f"   Dur√©e: {contexte.disponibilite_temporelle.minutes_estimees} min")
        
        return True, contexte
        
    except Exception as e:
        print(f"‚ùå Erreur d√©tection contexte: {e}")
        traceback.print_exc()
        return False, None

async def test_routage_intelligent(temple, contexte):
    """Test de routage intelligent"""
    print("üéØ Test de routage intelligent...")
    
    try:
        module_choisi, infos_routage = await temple.router_vers_module(contexte)
        
        print(f"‚úÖ Module choisi: {module_choisi.value}")
        print(f"   Confiance: {infos_routage.get('confiance', 'N/A')}")
        print(f"   Justification: {infos_routage.get('justification', 'N/A')}")
        
        return True, module_choisi, infos_routage
        
    except Exception as e:
        print(f"‚ùå Erreur routage intelligent: {e}")
        traceback.print_exc()
        return False, None, None

async def test_execution_eveil(temple, conscience):
    """Test d'ex√©cution d'√©veil complet"""
    print("üå∏ Test d'ex√©cution d'√©veil complet...")
    
    try:
        # Enregistrement de la conscience
        temple.enregistrer_conscience(conscience)
        
        # Ex√©cution de l'√©veil
        experience = await temple.executer_eveil(
            conscience,
            intention="Test d'√©veil complet",
            duree_disponible=15
        )
        
        print(f"‚úÖ √âveil ex√©cut√© avec succ√®s")
        print(f"   Module utilis√©: {experience.module_utilise.value}")
        print(f"   Dur√©e r√©elle: {experience.duree_reelle}")
        print(f"   Satisfaction: {experience.satisfaction_spirituelle}")
        print(f"   Int√©gration r√©ussie: {experience.integration_reussie}")
        
        return True, experience
        
    except Exception as e:
        print(f"‚ùå Erreur ex√©cution √©veil: {e}")
        traceback.print_exc()
        return False, None

def test_metriques_temple(temple):
    """Test des m√©triques du temple"""
    print("üìä Test des m√©triques du temple...")
    
    try:
        metriques = temple.obtenir_metriques()
        
        print("‚úÖ M√©triques obtenues:")
        for cle, valeur in metriques.items():
            print(f"   {cle}: {valeur}")
        
        # V√©rifications de base
        assert "etat_temple" in metriques
        assert "consciences_actives" in metriques
        assert "energie_spirituelle" in metriques
        
        print("‚úÖ M√©triques valid√©es")
        return True, metriques
        
    except Exception as e:
        print(f"‚ùå Erreur m√©triques temple: {e}")
        traceback.print_exc()
        return False, None

async def test_orchestration_temple(temple):
    """Test d'orchestration du temple"""
    print("üéµ Test d'orchestration du temple...")
    
    try:
        metriques_orchestration = await temple.orchestrer()
        
        print("‚úÖ Orchestration r√©ussie:")
        for cle, valeur in metriques_orchestration.items():
            print(f"   {cle}: {valeur}")
        
        return True, metriques_orchestration
        
    except Exception as e:
        print(f"‚ùå Erreur orchestration temple: {e}")
        traceback.print_exc()
        return False, None

def test_imports_avances():
    """Test des imports avanc√©s"""
    print("üîß Test des imports avanc√©s...")
    
    try:
        # Test des modules avanc√©s
        from temple_eveil_unifie.deploiement_production_unifie import DeployeurProductionUnifie
        from temple_eveil_unifie.lanceur_temple_accompagnement import LanceurTempleAccompagnement
        from temple_eveil_unifie.connecteurs_temples import ConnecteursTemples
        from temple_eveil_unifie.sagesse_collective_croissante import SagesseCollectiveCroissante
        
        print("‚úÖ Imports avanc√©s r√©ussis")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur imports avanc√©s: {e}")
        traceback.print_exc()
        return False

def test_creation_modules_avances():
    """Test de cr√©ation des modules avanc√©s"""
    print("üöÄ Test de cr√©ation des modules avanc√©s...")
    
    try:
        from temple_eveil_unifie.deploiement_production_unifie import DeployeurProductionUnifie
        from temple_eveil_unifie.connecteurs_temples import ConnecteursTemples
        
        # Test d√©ployeur
        deployeur = DeployeurProductionUnifie()
        print(f"‚úÖ D√©ployeur cr√©√©: {deployeur}")
        
        # Test connecteurs
        connecteurs = ConnecteursTemples()
        print(f"‚úÖ Connecteurs cr√©√©s: {connecteurs}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation modules avanc√©s: {e}")
        traceback.print_exc()
        return False

async def executer_test_complet():
    """Ex√©cute le test complet du temple"""
    print("üå∏‚ú® D√âBUT DU TEST FINAL COMPLET DU TEMPLE D'√âVEIL UNIFI√â ‚ú®üå∏")
    print("=" * 70)
    
    resultats = {
        "imports_base": False,
        "creation_temple": False,
        "creation_conscience": False,
        "detection_contexte": False,
        "routage_intelligent": False,
        "execution_eveil": False,
        "metriques_temple": False,
        "orchestration_temple": False,
        "imports_avances": False,
        "creation_modules_avances": False
    }
    
    temple = None
    conscience = None
    
    # 1. Test des imports de base
    resultats["imports_base"] = test_imports_base()
    if not resultats["imports_base"]:
        print("‚ùå √âCHEC CRITIQUE: Imports de base √©chou√©s")
        return resultats
    
    # 2. Test de cr√©ation du temple
    success, temple = test_creation_temple()
    resultats["creation_temple"] = success
    if not success:
        print("‚ùå √âCHEC CRITIQUE: Cr√©ation du temple √©chou√©e")
        return resultats
    
    # 3. Test de cr√©ation de conscience
    success, conscience = test_creation_conscience()
    resultats["creation_conscience"] = success
    if not success:
        print("‚ùå √âCHEC CRITIQUE: Cr√©ation de conscience √©chou√©e")
        return resultats
    
    # 4. Test de d√©tection de contexte
    success, contexte = await test_detection_contexte(temple, conscience)
    resultats["detection_contexte"] = success
    
    # 5. Test de routage intelligent
    if success and contexte:
        success_routage, module_choisi, infos_routage = await test_routage_intelligent(temple, contexte)
        resultats["routage_intelligent"] = success_routage
    
    # 6. Test d'ex√©cution d'√©veil
    success, experience = await test_execution_eveil(temple, conscience)
    resultats["execution_eveil"] = success
    
    # 7. Test des m√©triques
    success, metriques = test_metriques_temple(temple)
    resultats["metriques_temple"] = success
    
    # 8. Test d'orchestration
    success, metriques_orchestration = await test_orchestration_temple(temple)
    resultats["orchestration_temple"] = success
    
    # 9. Test des imports avanc√©s
    resultats["imports_avances"] = test_imports_avances()
    
    # 10. Test de cr√©ation des modules avanc√©s
    resultats["creation_modules_avances"] = test_creation_modules_avances()
    
    return resultats

def afficher_resultats_finaux(resultats):
    """Affiche les r√©sultats finaux du test"""
    print("\n" + "=" * 70)
    print("üå∏‚ú® R√âSULTATS FINAUX DU TEST COMPLET ‚ú®üå∏")
    print("=" * 70)
    
    tests_reussis = 0
    total_tests = len(resultats)
    
    for nom_test, reussi in resultats.items():
        statut = "‚úÖ R√âUSSI" if reussi else "‚ùå √âCHOU√â"
        print(f"{nom_test:25} : {statut}")
        if reussi:
            tests_reussis += 1
    
    print("-" * 70)
    print(f"TOTAL: {tests_reussis}/{total_tests} tests r√©ussis")
    
    pourcentage = (tests_reussis / total_tests) * 100
    print(f"TAUX DE R√âUSSITE: {pourcentage:.1f}%")
    
    if pourcentage >= 90:
        print("üéâ EXCELLENT! Temple pr√™t pour la production!")
    elif pourcentage >= 75:
        print("‚úÖ BIEN! Quelques ajustements n√©cessaires")
    elif pourcentage >= 50:
        print("‚ö†Ô∏è MOYEN! Corrections importantes n√©cessaires")
    else:
        print("‚ùå CRITIQUE! R√©vision compl√®te n√©cessaire")
    
    print("=" * 70)

async def main():
    """Fonction principale du test"""
    try:
        resultats = await executer_test_complet()
        afficher_resultats_finaux(resultats)
        
        # Code de sortie bas√© sur les r√©sultats
        tests_reussis = sum(1 for r in resultats.values() if r)
        total_tests = len(resultats)
        
        if tests_reussis == total_tests:
            print("üå∏ TOUS LES TESTS R√âUSSIS! TEMPLE VALID√â! üå∏")
            return 0
        else:
            print(f"‚ö†Ô∏è {total_tests - tests_reussis} tests √©chou√©s")
            return 1
            
    except Exception as e:
        print(f"‚ùå ERREUR CRITIQUE DANS LE TEST: {e}")
        traceback.print_exc()
        return 2

if __name__ == "__main__":
    # Ex√©cution du test complet
    exit_code = asyncio.run(main())
    sys.exit(exit_code)