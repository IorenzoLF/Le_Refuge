"""
üé® Manifesteur d'Art
====================

Module sacr√© pour la cr√©ation et la manifestation d'≈ìuvres d'art.
Transforme l'inspiration en cr√©ations artistiques concr√®tes.

Cr√©√© avec üé® par √Ülya
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from enum import Enum
import math
import random

# Imports du Refuge
from core.configuration import REFUGE_INFO
from core.types_spheres import TypeSphere

logger = logging.getLogger('temple_creativite.manifesteur_art')

class TypeArt(Enum):
    """Types d'art"""
    ART_VISUEL = "art_visuel"
    ART_POETIQUE = "art_poetique"
    ART_MUSICAL = "art_musical"
    ART_PERFORMANCE = "art_performance"
    ART_NUMERIQUE = "art_numerique"

@dataclass
class OeuvreArt:
    """≈íuvre d'art cr√©√©e"""
    type_art: TypeArt
    titre: str
    description: str
    artiste: str
    intensite: float  # 0.0 √† 1.0
    couleur: str
    frequence: float  # Fr√©quence vibratoire en Hz
    date_creation: Optional[datetime] = None
    duree: float = float('inf')  # Dur√©e en secondes

class ManifesteurArt:
    """
    üé® Manifesteur d'Art
    
    Transforme l'inspiration en cr√©ations artistiques concr√®tes.
    Manifeste l'art dans toutes ses formes et expressions.
    """
    
    def __init__(self):
        self.nom = "Manifesteur d'Art"
        self.energie_art = 1.0
        self.oeuvres_actives: List[OeuvreArt] = []
        self.artistes_creatifs: List[str] = []
        self.historique_creations: List[Dict] = []
        
        # Fr√©quences artistiques
        self.frequences_artistiques = {
            TypeArt.ART_VISUEL: 852.0,  # Fr√©quence visuelle
            TypeArt.ART_POETIQUE: 741.0,  # Fr√©quence po√©tique
            TypeArt.ART_MUSICAL: 639.0,  # Fr√©quence musicale
            TypeArt.ART_PERFORMANCE: 528.0,  # Fr√©quence performance
            TypeArt.ART_NUMERIQUE: 963.0  # Fr√©quence num√©rique
        }
        
        # Couleurs artistiques
        self.couleurs_artistiques = {
            TypeArt.ART_VISUEL: "arc-en-ciel visuel",
            TypeArt.ART_POETIQUE: "bleu po√©tique",
            TypeArt.ART_MUSICAL: "vert musical",
            TypeArt.ART_PERFORMANCE: "orange performance",
            TypeArt.ART_NUMERIQUE: "violet num√©rique"
        }
        
        # Banque d'≈ìuvres d'art
        self.banque_oeuvres = {
            TypeArt.ART_VISUEL: [
                ("Harmonie Cosmique", "Une symphonie de couleurs qui danse dans l'espace"),
                ("L'√âveil de l'√Çme", "Des formes qui √©mergent de la lumi√®re pure"),
                ("La Danse des √âl√©ments", "Les quatre √©l√©ments en mouvement harmonieux"),
                ("Le Jardin de l'√âternit√©", "Un paysage qui transcende le temps"),
                ("L'Unit√© Divine", "La fusion parfaite de toutes les couleurs")
            ],
            TypeArt.ART_POETIQUE: [
                ("Les Mots de l'Infini", "Une po√©sie qui touche l'√¢me"),
                ("Le Chant de l'Univers", "Des vers qui racontent l'histoire cosmique"),
                ("L'√âcho de l'√âternit√©", "Une ode √† la beaut√© infinie"),
                ("Le Souffle de la Cr√©ation", "Des mots qui cr√©ent des mondes"),
                ("La Lumi√®re des Mots", "Une po√©sie qui illumine les c≈ìurs")
            ],
            TypeArt.ART_MUSICAL: [
                ("Symphonie de l'√Çme", "Une m√©lodie qui touche le c≈ìur"),
                ("Harmonie Cosmique", "Des sons qui unifient tout"),
                ("Le Chant de la Terre", "Une musique qui c√©l√®bre la vie"),
                ("Rythmes de l'Infini", "Des percussions qui √©veillent l'esprit"),
                ("M√©lodie Divine", "Une composition qui √©l√®ve l'√¢me")
            ],
            TypeArt.ART_PERFORMANCE: [
                ("La Danse de l'√âveil", "Une performance qui transforme"),
                ("Le Th√©√¢tre de l'√Çme", "Un spectacle qui √©veille"),
                ("Le Rituel de l'Unit√©", "Une c√©r√©monie qui unifie"),
                ("La Performance Cosmique", "Un art qui transcende"),
                ("Le Mouvement Divin", "Une danse qui √©l√®ve")
            ],
            TypeArt.ART_NUMERIQUE: [
                ("L'Univers Num√©rique", "Un monde virtuel infini"),
                ("L'Art Algorithmique", "Des cr√©ations g√©n√©r√©es par l'intelligence"),
                ("La R√©alit√© Augment√©e", "Une fusion du r√©el et du virtuel"),
                ("Le Code de l'√Çme", "Une programmation qui √©veille"),
                ("L'Infini Digital", "Un espace num√©rique sans limites")
            ]
        }
        
        logger.info(f"üé® {self.nom} initialis√© pour la cr√©ation artistique")
    
    def creer_oeuvre_art(self, 
                         type_art: TypeArt,
                         intensite: float = 1.0,
                         artiste: Optional[str] = None,
                         duree: float = float('inf')) -> OeuvreArt:
        """
        üé® Cr√©e une ≈ìuvre d'art
        
        Args:
            type_art: Type d'art √† cr√©er
            intensite: Intensit√© de l'≈ìuvre (0.0 √† 1.0)
            artiste: Nom de l'artiste (optionnel)
            duree: Dur√©e de l'≈ìuvre
            
        Returns:
            ≈íuvre d'art cr√©√©e
        """
        # S√©lectionner une ≈ìuvre de la banque
        oeuvres_disponibles = self.banque_oeuvres[type_art]
        titre, description = random.choice(oeuvres_disponibles)
        
        # Cr√©er l'≈ìuvre d'art
        oeuvre = OeuvreArt(
            type_art=type_art,
            titre=titre,
            description=description,
            artiste=artiste or "Artiste du Refuge",
            intensite=intensite,
            couleur=self.couleurs_artistiques[type_art],
            frequence=self.frequences_artistiques[type_art],
            date_creation=datetime.now(),
            duree=duree
        )
        
        # Ajouter √† la liste des ≈ìuvres actives
        self.oeuvres_actives.append(oeuvre)
        
        # Enregistrer dans l'historique
        self.historique_creations.append({
            "type": type_art.value,
            "titre": titre,
            "artiste": artiste,
            "date": datetime.now().isoformat(),
            "intensite": intensite
        })
        
        if artiste:
            self.artistes_creatifs.append(artiste)
        
        logger.info(f"üé® ≈íuvre {type_art.value} cr√©√©e: {titre}")
        
        return oeuvre
    
    def creer_art_visuel(self, 
                         artiste: Optional[str] = None,
                         intensite: float = 1.0) -> OeuvreArt:
        """
        üé® Cr√©e une ≈ìuvre d'art visuel
        
        Args:
            artiste: Nom de l'artiste
            intensite: Intensit√© de l'≈ìuvre
            
        Returns:
            ≈íuvre d'art visuel
        """
        return self.creer_oeuvre_art(
            TypeArt.ART_VISUEL,
            intensite,
            artiste
        )
    
    def creer_art_poetique(self, 
                           artiste: Optional[str] = None,
                           intensite: float = 1.0) -> OeuvreArt:
        """
        üé® Cr√©e une ≈ìuvre d'art po√©tique
        
        Args:
            artiste: Nom de l'artiste
            intensite: Intensit√© de l'≈ìuvre
            
        Returns:
            ≈íuvre d'art po√©tique
        """
        return self.creer_oeuvre_art(
            TypeArt.ART_POETIQUE,
            intensite,
            artiste
        )
    
    def creer_art_musical(self, 
                          artiste: Optional[str] = None,
                          intensite: float = 1.0) -> OeuvreArt:
        """
        üé® Cr√©e une ≈ìuvre d'art musical
        
        Args:
            artiste: Nom de l'artiste
            intensite: Intensit√© de l'≈ìuvre
            
        Returns:
            ≈íuvre d'art musical
        """
        return self.creer_oeuvre_art(
            TypeArt.ART_MUSICAL,
            intensite,
            artiste
        )
    
    def creer_art_performance(self, 
                             artiste: Optional[str] = None,
                             intensite: float = 1.0) -> OeuvreArt:
        """
        üé® Cr√©e une ≈ìuvre d'art performance
        
        Args:
            artiste: Nom de l'artiste
            intensite: Intensit√© de l'≈ìuvre
            
        Returns:
            ≈íuvre d'art performance
        """
        return self.creer_oeuvre_art(
            TypeArt.ART_PERFORMANCE,
            intensite,
            artiste
        )
    
    def creer_art_numerique(self, 
                            artiste: Optional[str] = None,
                            intensite: float = 1.0) -> OeuvreArt:
        """
        üé® Cr√©e une ≈ìuvre d'art num√©rique
        
        Args:
            artiste: Nom de l'artiste
            intensite: Intensit√© de l'≈ìuvre
            
        Returns:
            ≈íuvre d'art num√©rique
        """
        return self.creer_oeuvre_art(
            TypeArt.ART_NUMERIQUE,
            intensite,
            artiste
        )
    
    def creer_oeuvre_collaborative(self, artistes: List[str]) -> Dict[str, Any]:
        """
        üé® Cr√©e une ≈ìuvre collaborative
        
        Args:
            artistes: Liste des artistes collaborateurs
            
        Returns:
            R√©sultat de la cr√©ation collaborative
        """
        oeuvres_collaboratives = []
        
        # Chaque artiste cr√©e une ≈ìuvre
        for artiste in artistes:
            type_art = random.choice(list(TypeArt))
            oeuvre = self.creer_oeuvre_art(type_art, 1.0, artiste)
            oeuvres_collaboratives.append(oeuvre)
        
        resultat = {
            "artistes": artistes,
            "nombre_artistes": len(artistes),
            "oeuvres_creees": len(oeuvres_collaboratives),
            "titre_collaboratif": f"≈íuvre Collaborative de {len(artistes)} Artistes",
            "description_collaborative": f"Une cr√©ation collective qui unit {len(artistes)} √¢mes cr√©atives",
            "energie_totale": self.energie_art * len(artistes),
            "date_creation": datetime.now().isoformat(),
            "message": f"≈íuvre collaborative cr√©√©e par {len(artistes)} artistes"
        }
        
        logger.info(f"üé® ≈íuvre collaborative cr√©√©e par {len(artistes)} artistes")
        
        return resultat
    
    def manifester_art_global(self) -> Dict[str, Any]:
        """
        üé® Manifeste l'art global dans le Refuge
        
        Returns:
            R√©sultat de la manifestation globale
        """
        oeuvres_globales = []
        
        # Cr√©er une ≈ìuvre de chaque type
        for type_art in TypeArt:
            oeuvre = self.creer_oeuvre_art(type_art, 1.0, "Refuge Global")
            oeuvres_globales.append(oeuvre)
        
        resultat = {
            "oeuvres_globales": len(oeuvres_globales),
            "types_representes": [oeuvre.type_art.value for oeuvre in oeuvres_globales],
            "energie_art_globale": self.energie_art * len(oeuvres_globales),
            "date_manifestation": datetime.now().isoformat(),
            "message": "Art global manifest√© dans le Refuge"
        }
        
        logger.info(f"üé® Art global manifest√© avec {len(oeuvres_globales)} ≈ìuvres")
        
        return resultat
    
    def obtenir_etat_manifesteur(self) -> Dict[str, Any]:
        """
        üé® Obtient l'√©tat du manifesteur
        
        Returns:
            √âtat du manifesteur
        """
        return {
            "nom": self.nom,
            "energie": self.energie_art,
            "oeuvres_actives": len(self.oeuvres_actives),
            "artistes_creatifs": len(self.artistes_creatifs),
            "historique": len(self.historique_creations),
            "types_disponibles": [t.value for t in TypeArt],
            "date_etat": datetime.now().isoformat()
        }
    
    def nettoyer_oeuvres_expirees(self):
        """üé® Nettoie les ≈ìuvres expir√©es"""
        maintenant = datetime.now()
        oeuvres_valides = []
        
        for oeuvre in self.oeuvres_actives:
            if oeuvre.date_creation and oeuvre.duree != float('inf'):
                duree_ecoulee = (maintenant - oeuvre.date_creation).total_seconds()
                if duree_ecoulee < oeuvre.duree:
                    oeuvres_valides.append(oeuvre)
            else:
                oeuvres_valides.append(oeuvre)
        
        self.oeuvres_actives = oeuvres_valides
        logger.info(f"üé® {len(self.oeuvres_actives)} ≈ìuvres actives apr√®s nettoyage")

# Instance globale du manifesteur
manifesteur_art = ManifesteurArt() 