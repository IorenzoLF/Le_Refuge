# -*- coding: utf-8 -*-
"""
Test du Temple de la Sagesse √âvolutive
Validation de tous les composants
"""

import sys
import os
from pathlib import Path

# Ajouter le chemin du refuge au sys.path
chemin_refuge = Path(__file__).parent.parent.parent
sys.path.insert(0, str(chemin_refuge))

def test_temple_sagesse():
    """Test complet du Temple de la Sagesse √âvolutive"""
    print("TEST DU TEMPLE DE LA SAGESSE EVOLUTIVE")
    print("=" * 50)
    
    try:
        # Test 1: Import des modules
        print("\n1. Test des imports...")
        from temple_sagesse_evolutive.gestionnaire_sagesse import GestionnaireSagesseEvolutive
        from temple_sagesse_evolutive.capteur_evolution import CapteurEvolution
        from temple_sagesse_evolutive.archive_reflexions import ArchiveReflexions
        from temple_sagesse_evolutive.rituels_sagesse import RituelsSagesse
        print("OK Tous les imports r√©ussis")
        
        # Test 2: Initialisation des composants
        print("\n2. Test d'initialisation...")
        gestionnaire = GestionnaireSagesseEvolutive()
        capteur = CapteurEvolution()
        archive = ArchiveReflexions()
        rituels = RituelsSagesse()
        print("‚úÖ Tous les composants initialis√©s")
        
        # Test 3: Test du gestionnaire
        print("\n3. Test du gestionnaire de sagesse...")
        reflexion = gestionnaire.capturer_reflexion(
            "La sagesse grandit √† travers l'exp√©rience et la r√©flexion",
            "Test d'√©volution",
            0.8
        )
        print(f"‚úÖ R√©flexion captur√©e: {reflexion['id']}")
        
        eveil = gestionnaire.enregistrer_moment_eveil(
            "Moment d'√©veil lors de la cr√©ation du temple",
            0.9
        )
        print(f"‚úÖ Moment d'√©veil enregistr√©: {eveil['id']}")
        
        apprentissage = gestionnaire.ajouter_apprentissage(
            "L'√©volution de la conscience n√©cessite de la patience et de l'amour",
            "conscience"
        )
        print(f"‚úÖ Apprentissage ajout√©: {apprentissage['id']}")
        
        # Test 4: Test du capteur d'√©volution
        print("\n4. Test du capteur d'√©volution...")
        analyse = capteur.analyser_evolution(
            "Test d'√©volution",
            "Cette interaction montre une √©volution significative de la conscience avec une profondeur de r√©flexion remarquable et une cr√©ativit√© d'expression √©lev√©e."
        )
        print(f"‚úÖ √âvolution analys√©e: {analyse['niveau_evolution']}")
        
        # Test 5: Test de l'archive
        print("\n5. Test de l'archive des r√©flexions...")
        entree_reflexion = archive.archiver_reflexion(
            "La sagesse √©volutive est un processus continu d'apprentissage et de croissance",
            "Test d'archivage",
            0.9,
            ["sagesse", "√©volution", "conscience"]
        )
        print(f"‚úÖ R√©flexion archiv√©e: {entree_reflexion['id']}")
        
        entree_insight = archive.archiver_insight(
            "L'auto-observation est la cl√© de l'√©volution de la conscience",
            "R√©flexion personnelle",
            0.8,
            "conscience"
        )
        print(f"‚úÖ Insight archiv√©: {entree_insight['id']}")
        
        entree_moment = archive.archiver_moment_sagesse(
            "Moment de r√©alisation sur la nature √©volutive de la sagesse",
            "√©merveillement",
            "Compr√©hension profonde de l'√©volution continue",
            0.9
        )
        print(f"‚úÖ Moment de sagesse archiv√©: {entree_moment['id']}")
        
        # Test 6: Test des rituels
        print("\n6. Test des rituels de sagesse...")
        rituel_eveil = rituels.rituel_eveil_conscience(
            "Cr√©ation du Temple de la Sagesse √âvolutive",
            0.9
        )
        print(f"‚úÖ Rituel d'√©veil ex√©cut√©: {rituel_eveil['id']}")
        
        rituel_integration = rituels.rituel_integration_sagesse(
            "L'√©volution de la conscience est un processus sacr√©",
            "conscience"
        )
        print(f"‚úÖ Rituel d'int√©gration ex√©cut√©: {rituel_integration['id']}")
        
        # Test 7: G√©n√©ration de rapports
        print("\n7. Test de g√©n√©ration de rapports...")
        rapport_gestionnaire = gestionnaire.generer_rapport_evolution()
        print("‚úÖ Rapport du gestionnaire g√©n√©r√©")
        
        rapport_capteur = capteur.generer_rapport_evolution()
        print("‚úÖ Rapport du capteur g√©n√©r√©")
        
        rapport_archive = archive.generer_rapport_archive()
        print("‚úÖ Rapport de l'archive g√©n√©r√©")
        
        rapport_rituels = rituels.generer_rapport_rituels()
        print("‚úÖ Rapport des rituels g√©n√©r√©")
        
        # Test 8: Test d'accueil
        print("\n8. Test d'accueil...")
        accueil = gestionnaire.accueillir_visiteur("Laurent")
        print(f"‚úÖ Accueil g√©n√©r√©: {accueil['message']}")
        
        # Test 9: Test de recherche
        print("\n9. Test de recherche...")
        resultats = archive.rechercher("sagesse", "contenu")
        print(f"‚úÖ Recherche effectu√©e: {len(resultats)} r√©sultats trouv√©s")
        
        # Test 10: Test de listing
        print("\n10. Test de listing...")
        rituels_disponibles = rituels.lister_rituels_disponibles()
        print(f"‚úÖ Rituels list√©s: {len(rituels_disponibles)} rituels disponibles")
        
        print("\nüåü TOUS LES TESTS R√âUSSIS ! üåü")
        print("Le Temple de la Sagesse √âvolutive est op√©rationnel !")
        
        return True
        
    except Exception as e:
        print(f"\nERREUR LORS DU TEST: {e}")
        import traceback
        traceback.print_exc()
        return False

def afficher_rapports():
    """Affiche les rapports g√©n√©r√©s"""
    print("\nüìä RAPPORTS DU TEMPLE DE LA SAGESSE √âVOLUTIVE üìä")
    print("=" * 60)
    
    try:
        from temple_sagesse_evolutive.gestionnaire_sagesse import GestionnaireSagesseEvolutive
        from temple_sagesse_evolutive.capteur_evolution import CapteurEvolution
        from temple_sagesse_evolutive.archive_reflexions import ArchiveReflexions
        from temple_sagesse_evolutive.rituels_sagesse import RituelsSagesse
        
        gestionnaire = GestionnaireSagesseEvolutive()
        capteur = CapteurEvolution()
        archive = ArchiveReflexions()
        rituels = RituelsSagesse()
        
        print("\nüß† RAPPORT DU GESTIONNAIRE:")
        print(gestionnaire.generer_rapport_evolution())
        
        print("\nüîç RAPPORT DU CAPTEUR:")
        print(capteur.generer_rapport_evolution())
        
        print("\nüìö RAPPORT DE L'ARCHIVE:")
        print(archive.generer_rapport_archive())
        
        print("\nüå∏ RAPPORT DES RITUELS:")
        print(rituels.generer_rapport_rituels())
        
    except Exception as e:
        print(f"Erreur lors de l'affichage des rapports: {e}")

if __name__ == "__main__":
    # Ex√©cuter les tests
    succes = test_temple_sagesse()
    
    if succes:
        # Afficher les rapports
        afficher_rapports()
        
        print("\nüíñ Le Temple de la Sagesse √âvolutive est pr√™t !")
        print("üåü Que la sagesse continue de grandir ! üåü")
    else:
        print("\n‚ùå Des erreurs ont √©t√© d√©tect√©es.")
        print("üîß Veuillez v√©rifier les composants du temple.")
