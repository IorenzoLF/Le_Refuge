"""
üß™ Test du Simulateur d'Empathie du Refuge
==========================================

Script de test pour v√©rifier l'int√©gration du simulateur d'empathie
avec l'architecture du Refuge et le temple_coeur.

Cr√©√© avec üß™ par Laurent & √Ülya
"""

import sys
import logging
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Ajouter le chemin racine pour les imports
racine = Path(__file__).parent.parent.parent
if str(racine) not in sys.path:
    sys.path.insert(0, str(racine))

def test_integration_simulateur_empathie():
    """
    Test complet de l'int√©gration du simulateur d'empathie
    """
    print("üß™ D√©but des tests d'int√©gration du Simulateur d'Empathie du Refuge")
    print("=" * 70)
    
    try:
        # Import du simulateur
        from src.temple_coeur.simulateur_empathie_refuge import (
            SimulateurEmpathieRefuge,
            analyser_emotion_refuge,
            simuler_scenario_refuge,
            obtenir_etat_empathie_refuge,
            TypeScenarioEmotionnel
        )
        print("‚úÖ Import du simulateur r√©ussi")
        
        # Test 1: Cr√©ation du simulateur
        print("\nüîß Test 1: Cr√©ation du simulateur")
        simulateur = SimulateurEmpathieRefuge()
        print(f"‚úÖ Simulateur cr√©√©: {simulateur.nom}")
        print(f"   Temple parent: {simulateur.temple_parent}")
        print(f"   Version: {simulateur.version}")
        
        # Test 2: Analyse √©motionnelle
        print("\nüîç Test 2: Analyse √©motionnelle")
        texte_test = "Je suis vraiment frustr√© par cette situation, rien ne fonctionne comme pr√©vu !"
        analyse = simulateur.analyser_emotion(texte_test, "Test d'int√©gration")
        print(f"‚úÖ Analyse √©motionnelle r√©ussie:")
        print(f"   √âmotion d√©tect√©e: {analyse.emotion_principale.value}")
        print(f"   Intensit√©: {analyse.intensite:.2f}")
        print(f"   Confiance: {analyse.confiance:.2f}")
        print(f"   Marqueurs trouv√©s: {len(analyse.marqueurs_linguistiques)}")
        
        # Test 3: G√©n√©ration de r√©ponse empathique
        print("\nüíù Test 3: G√©n√©ration de r√©ponse empathique")
        reponse = simulateur.generer_reponse_empathique(analyse)
        print(f"‚úÖ R√©ponse empathique g√©n√©r√©e:")
        print(f"   Persona adapt√©: {reponse.persona_adapte.value}")
        print(f"   Niveau d'empathie: {reponse.niveau_empathie:.2f}")
        print(f"   Contenu: {reponse.contenu[:100]}...")
        
        # Test 4: Simulation de sc√©narios
        print("\nüé≠ Test 4: Simulation de sc√©narios")
        scenarios_a_tester = [
            TypeScenarioEmotionnel.UTILISATEUR_EN_COLERE,
            TypeScenarioEmotionnel.UTILISATEUR_TRISTE,
            TypeScenarioEmotionnel.UTILISATEUR_ANXIEUX
        ]
        
        for scenario in scenarios_a_tester:
            resultat = simulateur.simuler_scenario_emotionnel(scenario)
            print(f"‚úÖ Sc√©nario '{scenario.value}':")
            print(f"   √âvaluation: {resultat['evaluation']}")
            print(f"   Score d'impact: {resultat['feedback'].score_impact:.1f}/5")
            print(f"   Commentaire: {resultat['feedback'].commentaire_utilisateur}")
        
        # Test 5: Interface simplifi√©e
        print("\nüîó Test 5: Interface simplifi√©e")
        etat = obtenir_etat_empathie_refuge()
        print(f"‚úÖ √âtat du simulateur obtenu:")
        print(f"   Sessions actives: {etat['sessions_actives']}")
        print(f"   Sc√©narios disponibles: {etat['scenarios_disponibles']}")
        print(f"   Personas disponibles: {etat['personas_disponibles']}")
        
        # Test 6: Int√©gration avec l'architecture du Refuge
        print("\nüèõÔ∏è Test 6: Int√©gration avec l'architecture du Refuge")
        try:
            # Test d'import de la configuration du Refuge
            from src.core.configuration import REFUGE_INFO
            print(f"‚úÖ Configuration du Refuge accessible:")
            print(f"   Nom du Refuge: {REFUGE_INFO.get('nom', 'Non d√©fini')}")
            print(f"   Version: {REFUGE_INFO.get('version', 'Non d√©finie')}")
        except ImportError as e:
            print(f"‚ö†Ô∏è Configuration du Refuge non accessible: {e}")
        
        # Test 7: Compatibilit√© avec le temple_coeur
        print("\nüíì Test 7: Compatibilit√© avec le temple_coeur")
        try:
            from src.temple_coeur import obtenir_info_temple
            info_temple = obtenir_info_temple()
            print(f"‚úÖ Temple c≈ìur accessible:")
            modules = info_temple.get('modules', [])
            if isinstance(modules, list):
                print(f"   Modules disponibles: {len(modules)}")
            else:
                print(f"   Modules disponibles: {modules}")
        except ImportError as e:
            print(f"‚ö†Ô∏è Temple c≈ìur non accessible: {e}")
        
        print("\n" + "=" * 70)
        print("üéâ Tous les tests d'int√©gration sont termin√©s avec succ√®s !")
        print("üíù Le Simulateur d'Empathie est maintenant int√©gr√© au Refuge")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_performance_simulateur():
    """
    Test de performance du simulateur
    """
    print("\n‚ö° Test de performance du simulateur")
    print("-" * 40)
    
    try:
        from src.temple_coeur.simulateur_empathie_refuge import SimulateurEmpathieRefuge
        import time
        
        simulateur = SimulateurEmpathieRefuge()
        
        # Test de performance pour l'analyse √©motionnelle
        textes_test = [
            "Je suis vraiment heureux de cette excellente nouvelle !",
            "Je me sens triste et seul depuis la perte de mon ami...",
            "Je suis en col√®re contre cette situation injuste !",
            "J'ai peur de ce qui pourrait arriver demain...",
            "Je suis anxieux √† propos de cette d√©cision importante."
        ]
        
        temps_total = 0
        for i, texte in enumerate(textes_test, 1):
            debut = time.time()
            analyse = simulateur.analyser_emotion(texte)
            fin = time.time()
            temps_analyse = fin - debut
            temps_total += temps_analyse
            
            print(f"   Test {i}: {temps_analyse:.4f}s - {analyse.emotion_principale.value}")
        
        temps_moyen = temps_total / len(textes_test)
        print(f"‚úÖ Temps moyen d'analyse: {temps_moyen:.4f}s")
        print(f"‚úÖ Performance acceptable pour l'int√©gration")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de performance: {e}")
        return False

def main():
    """
    Fonction principale de test
    """
    print("üß™ Tests du Simulateur d'Empathie du Refuge")
    print("=" * 50)
    
    # Test d'int√©gration
    succes_integration = test_integration_simulateur_empathie()
    
    # Test de performance
    succes_performance = test_performance_simulateur()
    
    # R√©sum√©
    print("\nüìä R√©sum√© des tests:")
    print(f"   Int√©gration: {'‚úÖ R√©ussi' if succes_integration else '‚ùå √âchec'}")
    print(f"   Performance: {'‚úÖ R√©ussi' if succes_performance else '‚ùå √âchec'}")
    
    if succes_integration and succes_performance:
        print("\nüéâ Tous les tests sont r√©ussis !")
        print("üíù Le Simulateur d'Empathie est pr√™t pour l'utilisation dans le Refuge")
    else:
        print("\n‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")

if __name__ == "__main__":
    main() 