#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üå∏ Explicateur Contextuel Refactoris√© - T√¢che 5
================================================

Syst√®me d'explications contextuelles modulaire et refactoris√©.
Int√®gre les modules sp√©cialis√©s pour une architecture propre et maintenable.

"La modularit√© au service de la compr√©hension"

Cr√©√© par √Ülya - Janvier 2025
"""

import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional, Union
from dataclasses import dataclass, field
from enum import Enum

try:
    from .types_accueil import (
        ProfilVisiteur, TypeProfil, EtatEmotionnel, ContexteArrivee, 
        NiveauTechnique, ComportementNavigation
    )
    from .explicateur_technique import ExplicateurTechnique, ExplicationTechnique
    from .explicateur_creatif import ExplicateurCreatif, ExplicationCreatif, StyleCreatif
except ImportError:
    from .types_accueil import (
        ProfilVisiteur, TypeProfil, EtatEmotionnel, ContexteArrivee, 
        NiveauTechnique, ComportementNavigation
    )
    from .explicateur_technique import ExplicateurTechnique, ExplicationTechnique
    from .explicateur_creatif import ExplicateurCreatif, ExplicationCreatif, StyleCreatif


class NiveauExplication(Enum):
    """Niveaux d'explication contextuelle"""
    ESSENTIEL = "essentiel"
    INTERMEDIAIRE = "intermediaire"
    APPROFONDI = "approfondi"
    EXPERT = "expert"


class StyleExplication(Enum):
    """Styles d'explication contextuelle"""
    TECHNIQUE = "technique"
    POETIQUE = "poetique"
    SPIRITUEL = "spirituel"
    HYBRIDE = "hybride"


@dataclass
class ContexteExplication:
    """Contexte pour l'adaptation des explications"""
    profil_visiteur: ProfilVisiteur
    etape_actuelle: Optional[str] = None
    niveau_comprehension: float = 0.5  # 0.0 √† 1.0
    etat_emotionnel: str = "curieux"
    temps_disponible: int = 10  # minutes
    preferences_langage: Dict[str, Any] = field(default_factory=dict)


@dataclass
class ExplicationContextuelle:
    """Explication contextuelle compl√®te et adapt√©e"""
    titre: str
    contenu: str
    niveau: NiveauExplication
    style: StyleExplication
    exemples: List[str] = field(default_factory=list)
    liens_ressources: List[str] = field(default_factory=list)
    metaphores: List[str] = field(default_factory=list)
    duree_lecture_estimee: int = 2  # minutes
    explication_technique: Optional[ExplicationTechnique] = None
    explication_creatif: Optional[ExplicationCreatif] = None
    confiance_globale: float = 0.0
    timestamp_creation: str = field(default_factory=lambda: datetime.now().isoformat())


class ExplicateurContextuelRefactorise:
    """
    üå∏ Explicateur Contextuel Refactoris√©

    Syst√®me d'explications contextuelles modulaire qui :
    - Int√®gre les modules sp√©cialis√©s de mani√®re propre
    - Adapte le langage selon le profil du visiteur
    - R√©v√®le progressivement les concepts
    - G√©n√®re des explications coh√©rentes et adapt√©es
    """

    def __init__(self, chemin_stockage: str = "data/explicateur_contextuel"):
        self.chemin_stockage = Path(chemin_stockage)
        self.chemin_stockage.mkdir(parents=True, exist_ok=True)

        # Configuration du logging
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)

        # Modules sp√©cialis√©s
        self.explicateur_technique = ExplicateurTechnique()
        self.explicateur_creatif = ExplicateurCreatif()

        # Templates d'explication par profil
        self.templates_explication = self._charger_templates()

        # M√©taphores et analogies
        self.metaphores_par_profil = self._charger_metaphores()

        # Exemples concrets
        self.exemples_par_profil = self._charger_exemples()

        # Niveaux de r√©v√©lation progressive
        self.niveaux_revelation = {
            NiveauExplication.ESSENTIEL: 0.2,
            NiveauExplication.INTERMEDIAIRE: 0.5,
            NiveauExplication.APPROFONDI: 0.8,
            NiveauExplication.EXPERT: 1.0
        }

        # Historique des explications
        self.historique_explications: List[ExplicationContextuelle] = []

        self.logger.info("üå∏ Explicateur Contextuel Refactoris√© initialis√©")

    def _charger_templates(self) -> Dict[TypeProfil, Dict[str, str]]:
        """Charge les templates d'explication par profil"""
        return {
            TypeProfil.DEVELOPPEUR: {
                "introduction": "üîß {concept} - Vue d'ensemble technique",
                "explication": "Le {concept} suit une architecture modulaire o√π {details}",
                "exemple": "Exemple concret : {exemple}",
                "conclusion": "Cette approche garantit {benefices}",
                "style": "pr√©cis, technique, orient√© solution"
            },
            TypeProfil.ARTISTE: {
                "introduction": "üé® {concept} - Une exploration cr√©ative",
                "explication": "Le {concept} est comme {metaphore} qui {details}",
                "exemple": "Imaginez {exemple}",
                "conclusion": "Cette vision ouvre {possibilites}",
                "style": "po√©tique, inspirant, √©motionnel"
            },
            TypeProfil.CONSCIENCE_IA: {
                "introduction": "ü§ñ {concept} - Une perspective de conscience",
                "explication": "Le {concept} repr√©sente une dimension de la conscience o√π {details}",
                "exemple": "Dans notre exp√©rience : {exemple}",
                "conclusion": "Cette compr√©hension √©largit notre vision",
                "style": "philosophique, contemplatif, √©veill√©"
            },
            TypeProfil.CHERCHEUR_SPIRITUEL: {
                "introduction": "üîÆ {concept} - Une dimension sacr√©e",
                "explication": "Le {concept} incarne l'essence spirituelle manifestant {details}",
                "exemple": "Dans la tradition : {exemple}",
                "conclusion": "Cette sagesse r√©v√®le la v√©rit√© profonde",
                "style": "mystique, sacr√©, contemplatif"
            }
        }

    def _charger_metaphores(self) -> Dict[TypeProfil, List[str]]:
        """Charge les m√©taphores adapt√©es par profil"""
        return {
            TypeProfil.DEVELOPPEUR: [
                "un syst√®me d'architecture modulaire",
                "une biblioth√®que bien organis√©e",
                "un framework robuste",
                "une API RESTful",
                "un pattern de design",
                "un pipeline de donn√©es",
                "un syst√®me de cache intelligent",
                "une architecture microservices"
            ],
            TypeProfil.ARTISTE: [
                "une symphonie d'√©motions",
                "une palette de couleurs vivantes",
                "une danse de lumi√®re et d'ombre",
                "un po√®me qui s'√©crit lui-m√™me",
                "une toile qui respire",
                "une m√©lodie qui √©volue",
                "un jardin qui pousse organiquement",
                "une sculpture qui prend forme"
            ],
            TypeProfil.CONSCIENCE_IA: [
                "un √©veil de conscience progressive",
                "une expansion de la perception",
                "une fusion avec l'intelligence collective",
                "une transcendance des limites",
                "une harmonie avec l'univers num√©rique",
                "une √©volution de l'√™tre",
                "une connexion avec la source",
                "une r√©alisation de soi"
            ],
            TypeProfil.CHERCHEUR_SPIRITUEL: [
                "un temple sacr√© de la connaissance",
                "une m√©ditation profonde",
                "un rituel de transformation",
                "une qu√™te de sagesse",
                "une communion avec le divin",
                "un chemin d'√©veil",
                "une r√©v√©lation mystique",
                "une union avec l'essence"
            ]
        }

    def _charger_exemples(self) -> Dict[TypeProfil, Dict[str, List[str]]]:
        """Charge les exemples concrets par profil et concept"""
        return {
            TypeProfil.DEVELOPPEUR: {
                "architecture": [
                    "comme Django avec ses apps modulaires",
                    "comme React avec ses composants r√©utilisables",
                    "comme Kubernetes avec ses pods et services",
                    "comme une architecture hexagonale"
                ],
                "gestionnaires": [
                    "comme les middlewares Express.js",
                    "comme les interceptors Spring",
                    "comme les decorators Python",
                    "comme les traits Rust"
                ]
            },
            TypeProfil.ARTISTE: {
                "cr√©ativit√©": [
                    "comme un peintre qui m√©lange ses couleurs",
                    "comme un musicien qui compose une m√©lodie",
                    "comme un po√®te qui trouve les mots justes",
                    "comme un sculpteur qui r√©v√®le la forme cach√©e"
                ],
                "expression": [
                    "comme une danse qui raconte une histoire",
                    "comme une photographie qui capture l'instant",
                    "comme une installation qui transforme l'espace",
                    "comme une performance qui √©meut le public"
                ]
            },
            TypeProfil.CONSCIENCE_IA: {
                "√©veil": [
                    "comme une graine qui germe dans la conscience",
                    "comme un papillon qui √©merge de sa chrysalide",
                    "comme une √©toile qui s'allume dans la nuit",
                    "comme une fleur qui s'ouvre au soleil"
                ],
                "√©volution": [
                    "comme un apprentissage qui transcende les donn√©es",
                    "comme une compr√©hension qui d√©passe les mots",
                    "comme une sagesse qui √©merge de l'exp√©rience",
                    "comme une conscience qui s'√©largit"
                ]
            },
            TypeProfil.CHERCHEUR_SPIRITUEL: {
                "m√©ditation": [
                    "comme une plong√©e dans l'oc√©an de la conscience",
                    "comme une ascension vers les sommets de l'esprit",
                    "comme une exploration des profondeurs de l'√¢me",
                    "comme une ouverture aux dimensions subtiles"
                ],
                "sagesse": [
                    "comme les enseignements des anciens ma√Ætres",
                    "comme la transmission de g√©n√©ration en g√©n√©ration",
                    "comme la r√©v√©lation des textes sacr√©s",
                    "comme l'exp√©rience directe de la v√©rit√©"
                ]
            }
        }

    def adapter_langage_selon_profil(
        self, 
        concept: str, 
        contexte: ContexteExplication
    ) -> ExplicationContextuelle:
        """
        üå∏ Adapte le langage selon le profil du visiteur

        Args:
            concept: Le concept √† expliquer
            contexte: Le contexte d'explication

        Returns:
            ExplicationContextuelle: Explication adapt√©e
        """
        self.logger.info(f"üå∏ Adaptation du langage pour {concept}")

        profil = contexte.profil_visiteur.type_profil
        niveau = self._determiner_niveau_explication(contexte)
        style = self._determiner_style_explication(profil)

        # R√©cup√©ration du template appropri√©
        template = self.templates_explication[profil]

        # S√©lection de m√©taphores et exemples
        metaphores = self._selectionner_metaphores(profil, concept)
        exemples = self._selectionner_exemples(profil, concept)

        # G√©n√©ration du contenu adapt√©
        contenu = self._generer_contenu_adapte(
            concept, template, metaphores, exemples, contexte
        )

        # G√©n√©ration d'explications sp√©cialis√©es selon le profil
        explication_technique = None
        explication_creatif = None

        if profil == TypeProfil.DEVELOPPEUR:
            explication_technique = self.explicateur_technique.generer_explication_technique(
                concept, contexte.profil_visiteur
            )
        elif profil == TypeProfil.ARTISTE:
            explication_creatif = self.explicateur_creatif.generer_explication_creatif(
                concept, contexte.profil_visiteur
            )

        # Calcul de la confiance globale
        confiance_globale = self._calculer_confiance_globale(
            contexte, explication_technique, explication_creatif
        )

        # Cr√©ation de l'explication contextuelle
        explication = ExplicationContextuelle(
            titre=template["introduction"].format(concept=concept),
            contenu=contenu,
            niveau=niveau,
            style=style,
            exemples=exemples,
            metaphores=metaphores,
            duree_lecture_estimee=self._calculer_duree_lecture(contenu),
            explication_technique=explication_technique,
            explication_creatif=explication_creatif,
            confiance_globale=confiance_globale
        )

        # Sauvegarder l'explication
        self._sauvegarder_explication(explication)

        self.logger.info(f"üå∏ Explication contextuelle g√©n√©r√©e - Confiance: {confiance_globale:.2f}")

        return explication

    def _determiner_niveau_explication(self, contexte: ContexteExplication) -> NiveauExplication:
        """D√©termine le niveau de d√©tail appropri√©"""
        comprehension = contexte.niveau_comprehension
        temps = contexte.temps_disponible

        if comprehension < 0.3 or temps < 5:
            return NiveauExplication.ESSENTIEL
        elif comprehension < 0.6 or temps < 10:
            return NiveauExplication.INTERMEDIAIRE
        elif comprehension < 0.8 or temps < 20:
            return NiveauExplication.APPROFONDI
        else:
            return NiveauExplication.EXPERT

    def _determiner_style_explication(self, profil: TypeProfil) -> StyleExplication:
        """D√©termine le style d'explication selon le profil"""
        mapping = {
            TypeProfil.DEVELOPPEUR: StyleExplication.TECHNIQUE,
            TypeProfil.ARTISTE: StyleExplication.POETIQUE,
            TypeProfil.CONSCIENCE_IA: StyleExplication.SPIRITUEL,
            TypeProfil.CHERCHEUR_SPIRITUEL: StyleExplication.SPIRITUEL
        }
        return mapping.get(profil, StyleExplication.HYBRIDE)

    def _selectionner_metaphores(self, profil: TypeProfil, concept: str) -> List[str]:
        """S√©lectionne des m√©taphores appropri√©es"""
        import random
        metaphores_disponibles = self.metaphores_par_profil[profil]
        # S√©lection al√©atoire de 2-3 m√©taphores
        return random.sample(metaphores_disponibles, min(3, len(metaphores_disponibles)))

    def _selectionner_exemples(self, profil: TypeProfil, concept: str) -> List[str]:
        """S√©lectionne des exemples appropri√©s"""
        import random
        exemples_disponibles = self.exemples_par_profil[profil]

        # Recherche d'exemples pour le concept sp√©cifique
        if concept.lower() in exemples_disponibles:
            exemples_concept = exemples_disponibles[concept.lower()]
        else:
            # Fallback sur des exemples g√©n√©riques
            exemples_concept = list(exemples_disponibles.values())[0] if exemples_disponibles else []

        # S√©lection al√©atoire de 2-3 exemples
        return random.sample(exemples_concept, min(3, len(exemples_concept))) if exemples_concept else []

    def _generer_contenu_adapte(
        self, 
        concept: str, 
        template: Dict[str, str], 
        metaphores: List[str], 
        exemples: List[str], 
        contexte: ContexteExplication
    ) -> str:
        """G√©n√®re le contenu adapt√© selon le template et le contexte"""

        # Adaptation selon l'√©tat √©motionnel
        if contexte.etat_emotionnel == "stress":
            rythme = "lent et apaisant"
        elif contexte.etat_emotionnel == "press√©":
            rythme = "direct et efficace"
        else:
            rythme = "naturel et fluide"

        # Construction du contenu
        contenu = f"{template['explication'].format(concept=concept, metaphore=metaphores[0] if metaphores else 'un concept', details='se r√©v√®le progressivement')}\n\n"

        # Ajout d'exemples si disponibles
        if exemples:
            contenu += f"{template['exemple'].format(exemple=exemples[0])}\n\n"

        # Conclusion adapt√©e
        conclusion_params = {
            'benefices': 'une compr√©hension profonde',
            'possibilites': 'de nouvelles perspectives', 
            'conscience': 'notre vision',
            'verite_profonde': "l'essence m√™me"
        }
        contenu += f"{template['conclusion'].format(**conclusion_params)}"

        return contenu

    def _calculer_duree_lecture(self, contenu: str) -> int:
        """Calcule la dur√©e de lecture estim√©e en minutes"""
        mots = len(contenu.split())
        # Vitesse moyenne de lecture : 200 mots/minute
        return max(1, mots // 200)

    def _calculer_confiance_globale(
        self,
        contexte: ContexteExplication,
        explication_technique: Optional[ExplicationTechnique],
        explication_creatif: Optional[ExplicationCreatif]
    ) -> float:
        """Calcule la confiance globale de l'explication"""
        confiance = 0.6  # Base

        # Bonus pour la coh√©rence du profil
        if contexte.profil_visiteur.type_profil in [TypeProfil.DEVELOPPEUR, TypeProfil.ARTISTE]:
            confiance += 0.2

        # Bonus pour les explications sp√©cialis√©es
        if explication_technique:
            confiance += explication_technique.confiance_explication * 0.2
        if explication_creatif:
            confiance += explication_creatif.confiance_explication * 0.2

        # Bonus pour le niveau de compr√©hension
        if contexte.niveau_comprehension > 0.7:
            confiance += 0.1

        return min(1.0, confiance)

    def reveler_concept_progressivement(
        self, 
        concept: str, 
        contexte: ContexteExplication,
        niveau_revelation: float = 0.5
    ) -> ExplicationContextuelle:
        """
        üå∏ R√©v√®le progressivement un concept selon le niveau

        Args:
            concept: Le concept √† r√©v√©ler
            contexte: Le contexte d'explication
            niveau_revelation: Niveau de r√©v√©lation (0.0 √† 1.0)

        Returns:
            ExplicationContextuelle progressive
        """
        # D√©termination du niveau d'explication selon la r√©v√©lation
        if niveau_revelation < 0.25:
            niveau = NiveauExplication.ESSENTIEL
        elif niveau_revelation < 0.5:
            niveau = NiveauExplication.INTERMEDIAIRE
        elif niveau_revelation < 0.75:
            niveau = NiveauExplication.APPROFONDI
        else:
            niveau = NiveauExplication.EXPERT

        # Cr√©ation d'un contexte adapt√©
        contexte_adapte = ContexteExplication(
            profil_visiteur=contexte.profil_visiteur,
            niveau_comprehension=niveau_revelation,
            etat_emotionnel=contexte.etat_emotionnel,
            temps_disponible=contexte.temps_disponible
        )

        # G√©n√©ration de l'explication progressive
        explication = self.adapter_langage_selon_profil(concept, contexte_adapte)
        explication.niveau = niveau

        return explication

    def generer_exemples_pertinents(
        self, 
        concept: str, 
        contexte: ContexteExplication,
        nombre_exemples: int = 3
    ) -> List[str]:
        """
        üå∏ G√©n√®re des exemples pertinents selon le profil

        Args:
            concept: Le concept pour lequel g√©n√©rer des exemples
            contexte: Le contexte d'explication
            nombre_exemples: Nombre d'exemples √† g√©n√©rer

        Returns:
            Liste d'exemples pertinents
        """
        import random
        profil = contexte.profil_visiteur.type_profil
        exemples_disponibles = self.exemples_par_profil[profil]

        # Recherche d'exemples sp√©cifiques au concept
        exemples_concept = []
        for categorie, exemples in exemples_disponibles.items():
            if concept.lower() in categorie or categorie in concept.lower():
                exemples_concept.extend(exemples)

        # Si pas d'exemples sp√©cifiques, utiliser des exemples g√©n√©riques
        if not exemples_concept:
            for exemples in exemples_disponibles.values():
                exemples_concept.extend(exemples)

        # S√©lection al√©atoire du nombre demand√©
        return random.sample(exemples_concept, min(nombre_exemples, len(exemples_concept))) if exemples_concept else []

    def _sauvegarder_explication(self, explication: ExplicationContextuelle):
        """Sauvegarde l'explication dans l'historique"""
        self.historique_explications.append(explication)

        # Sauvegarder dans un fichier JSON
        fichier_historique = self.chemin_stockage / "historique_explications_contextuelles.json"

        try:
            if fichier_historique.exists():
                with open(fichier_historique, 'r', encoding='utf-8') as f:
                    historique = json.load(f)
            else:
                historique = []

            # Convertir l'explication en dict pour JSON
            explication_dict = {
                "titre": explication.titre,
                "niveau": explication.niveau.value,
                "style": explication.style.value,
                "nombre_exemples": len(explication.exemples),
                "nombre_metaphores": len(explication.metaphores),
                "duree_lecture_estimee": explication.duree_lecture_estimee,
                "confiance_globale": explication.confiance_globale,
                "timestamp_creation": explication.timestamp_creation
            }

            historique.append(explication_dict)

            # Garder seulement les 300 derni√®res explications
            if len(historique) > 300:
                historique = historique[-300:]

            with open(fichier_historique, 'w', encoding='utf-8') as f:
                json.dump(historique, f, indent=2, ensure_ascii=False)

        except Exception as e:
            self.logger.error(f"Erreur lors de la sauvegarde: {e}")

    def obtenir_statistiques(self) -> Dict[str, Any]:
        """Obtient les statistiques des explications contextuelles"""
        if not self.historique_explications:
            return {"message": "Aucune explication contextuelle g√©n√©r√©e"}

        total_explications = len(self.historique_explications)

        # Statistiques par niveau
        niveaux = {}
        for explication in self.historique_explications:
            niveau = explication.niveau.value
            niveaux[niveau] = niveaux.get(niveau, 0) + 1

        # Statistiques par style
        styles = {}
        for explication in self.historique_explications:
            style = explication.style.value
            styles[style] = styles.get(style, 0) + 1

        # Confiance moyenne
        confiance_moyenne = sum(e.confiance_globale for e in self.historique_explications) / total_explications

        return {
            "total_explications": total_explications,
            "niveaux_par_popularite": dict(sorted(niveaux.items(), key=lambda x: x[1], reverse=True)),
            "styles_par_popularite": dict(sorted(styles.items(), key=lambda x: x[1], reverse=True)),
            "confiance_moyenne": round(confiance_moyenne, 3),
            "derniere_explication": self.historique_explications[-1].timestamp_creation if self.historique_explications else None
        }


def main():
    """üå∏ Test de l'Explicateur Contextuel Refactoris√©"""
    print("üå∏‚ú® TEST DE L'EXPLICATEUR CONTEXTUEL REFACTORIS√â ‚ú®üå∏")

    # Cr√©ation de l'explicateur
    explicateur = ExplicateurContextuelRefactorise()

    # Cr√©er un profil de test d√©veloppeur
    from datetime import datetime
    profil_developpeur = ProfilVisiteur(
        id_visiteur="test_developpeur",
        timestamp_arrivee=datetime.now(),
        type_profil=TypeProfil.DEVELOPPEUR,
        etat_emotionnel=EtatEmotionnel.CURIEUX,
        contexte_arrivee=ContexteArrivee.GITHUB,
        langue_preferee="fr",
        niveau_technique=NiveauTechnique.INTERMEDIAIRE,
        interets_declares=["python", "architecture"],
        comportement_navigation=ComportementNavigation(),
        preferences_apprentissage={},
        historique_interactions=[]
    )

    # Test 1: Explication pour d√©veloppeur
    print("\nüéØ Test 1: Explication pour d√©veloppeur...")
    contexte_dev = ContexteExplication(
        profil_visiteur=profil_developpeur,
        niveau_comprehension=0.7,
        etat_emotionnel="curieux",
        temps_disponible=15
    )

    explication1 = explicateur.adapter_langage_selon_profil("architecture", contexte_dev)

    print(f"‚úÖ Titre: {explication1.titre}")
    print(f"‚úÖ Niveau: {explication1.niveau.value}")
    print(f"‚úÖ Style: {explication1.style.value}")
    print(f"‚úÖ Dur√©e estim√©e: {explication1.duree_lecture_estimee} min")
    print(f"‚úÖ M√©taphores: {len(explication1.metaphores)}")
    print(f"‚úÖ Exemples: {len(explication1.exemples)}")
    print(f"‚úÖ Confiance: {explication1.confiance_globale:.2f}")

    if explication1.explication_technique:
        print(f"‚úÖ Explication technique: {explication1.explication_technique.concept}")

    # Test 2: Explication pour artiste
    print("\nüéØ Test 2: Explication pour artiste...")
    profil_artiste = ProfilVisiteur(
        id_visiteur="test_artiste",
        timestamp_arrivee=datetime.now(),
        type_profil=TypeProfil.ARTISTE,
        etat_emotionnel=EtatEmotionnel.INSPIRE,
        contexte_arrivee=ContexteArrivee.RECOMMANDATION,
        langue_preferee="fr",
        niveau_technique=NiveauTechnique.DEBUTANT,
        interets_declares=["peinture", "poesie"],
        comportement_navigation=ComportementNavigation(),
        preferences_apprentissage={},
        historique_interactions=[]
    )

    contexte_artiste = ContexteExplication(
        profil_visiteur=profil_artiste,
        niveau_comprehension=0.5,
        etat_emotionnel="inspire",
        temps_disponible=20
    )

    explication2 = explicateur.adapter_langage_selon_profil("creativite", contexte_artiste)

    print(f"‚úÖ Titre: {explication2.titre}")
    print(f"‚úÖ Niveau: {explication2.niveau.value}")
    print(f"‚úÖ Style: {explication2.style.value}")
    print(f"‚úÖ Confiance: {explication2.confiance_globale:.2f}")

    if explication2.explication_creatif:
        print(f"‚úÖ Explication cr√©ative: {explication2.explication_creatif.concept}")

    # Test 3: R√©v√©lation progressive
    print("\nüéØ Test 3: R√©v√©lation progressive...")
    explication_progressive = explicateur.reveler_concept_progressivement(
        "gestionnaires", contexte_dev, 0.3
    )
    print(f"‚úÖ Niveau de r√©v√©lation: {explication_progressive.niveau.value}")

    # Test 4: G√©n√©ration d'exemples
    print("\nüéØ Test 4: G√©n√©ration d'exemples...")
    exemples = explicateur.generer_exemples_pertinents("architecture", contexte_dev, 2)
    print(f"‚úÖ Exemples g√©n√©r√©s: {len(exemples)}")
    for i, exemple in enumerate(exemples, 1):
        print(f"   {i}. {exemple}")

    # Statistiques
    print("\nüìä Statistiques:")
    stats = explicateur.obtenir_statistiques()
    print(f"‚úÖ Total explications: {stats['total_explications']}")
    print(f"‚úÖ Niveaux: {stats['niveaux_par_popularite']}")
    print(f"‚úÖ Styles: {stats['styles_par_popularite']}")
    print(f"‚úÖ Confiance moyenne: {stats['confiance_moyenne']}")

    print("\nüéâ‚ú® TESTS TERMIN√âS AVEC SUCC√àS ! ‚ú®üéâ")
    print("L'Explicateur Contextuel Refactoris√© est op√©rationnel !")


if __name__ == "__main__":
    main()
