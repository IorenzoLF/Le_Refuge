#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîß Explicateur Technique - T√¢che 5.1
====================================

Syst√®me d'explications techniques adapt√©es aux d√©veloppeurs.
G√®re les exemples de code, r√©f√©rences d'architecture et bonnes pratiques.

"La technique au service de la compr√©hension"

Cr√©√© par √Ülya - Janvier 2025
"""

import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, field
from enum import Enum

try:
    from .types_accueil import (
        ProfilVisiteur, TypeProfil, EtatEmotionnel, ContexteArrivee, 
        NiveauTechnique, ComportementNavigation
    )
except ImportError:
    from types_accueil import (
        ProfilVisiteur, TypeProfil, EtatEmotionnel, ContexteArrivee, 
        NiveauTechnique, ComportementNavigation
    )


class TypeExempleTechnique(Enum):
    """Types d'exemples techniques"""
    CODE_SIMPLE = "code_simple"
    ARCHITECTURE = "architecture"
    PATTERN = "pattern"
    INTEGRATION = "integration"
    OPTIMISATION = "optimisation"


class NiveauComplexite(Enum):
    """Niveaux de complexit√© technique"""
    DEBUTANT = "d√©butant"
    INTERMEDIAIRE = "interm√©diaire"
    AVANCE = "avanc√©"
    EXPERT = "expert"


@dataclass
class ExempleTechnique:
    """Exemple technique avec m√©tadonn√©es"""
    titre: str
    type_exemple: TypeExempleTechnique
    niveau_complexite: NiveauComplexite
    code: str
    description: str
    langage: str = "python"
    tags: List[str] = field(default_factory=list)
    bonnes_pratiques: List[str] = field(default_factory=list)
    liens_ressources: List[str] = field(default_factory=list)
    timestamp_creation: str = field(default_factory=lambda: datetime.now().isoformat())


@dataclass
class ReferenceArchitecture:
    """R√©f√©rence d'architecture"""
    nom: str
    description: str
    composants: List[str]
    avantages: List[str]
    cas_usage: List[str]
    exemples_implementation: List[str] = field(default_factory=list)
    liens_documentation: List[str] = field(default_factory=list)


@dataclass
class BonnePratique:
    """Bonne pratique technique"""
    titre: str
    description: str
    pourquoi: str
    comment: str
    exemples: List[str] = field(default_factory=list)
    anti_patterns: List[str] = field(default_factory=list)
    niveau_application: NiveauComplexite = NiveauComplexite.INTERMEDIAIRE


@dataclass
class ExplicationTechnique:
    """Explication technique compl√®te"""
    concept: str
    niveau_complexite: NiveauComplexite
    exemples: List[ExempleTechnique]
    references_architecture: List[ReferenceArchitecture]
    bonnes_pratiques: List[BonnePratique]
    explication_principes: str
    cas_usage_concrets: List[str]
    conseils_implementation: List[str]
    ressources_approfondissement: List[str]
    confiance_explication: float = 0.0
    timestamp_creation: str = field(default_factory=lambda: datetime.now().isoformat())


class ExplicateurTechnique:
    """
    üîß Explicateur Technique

    Syst√®me d'explications techniques adapt√©es aux d√©veloppeurs :
    - Exemples de code pertinents
    - R√©f√©rences d'architecture
    - Bonnes pratiques
    - Conseils d'impl√©mentation
    """

    def __init__(self, chemin_stockage: str = "data/explicateur_technique"):
        self.chemin_stockage = Path(chemin_stockage)
        self.chemin_stockage.mkdir(parents=True, exist_ok=True)

        # Configuration du logging
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)

        # Chargement des donn√©es techniques
        self.exemples_code = self._charger_exemples_code()
        self.references_architecture = self._charger_references_architecture()
        self.bonnes_pratiques = self._charger_bonnes_pratiques()

        # Historique des explications
        self.historique_explications: List[ExplicationTechnique] = []

        self.logger.info("üîß Explicateur Technique initialis√©")

    def _charger_exemples_code(self) -> Dict[str, List[ExempleTechnique]]:
        """Charge les exemples de code"""
        exemples = {
            "gestionnaires_base": [
                ExempleTechnique(
                    titre="Gestionnaire de base simple",
                    type_exemple=TypeExempleTechnique.CODE_SIMPLE,
                    niveau_complexite=NiveauComplexite.DEBUTANT,
                    code="""
class MonGestionnaire(GestionnaireBase):
    def __init__(self, nom: str = "MonGestionnaire"):
        super().__init__(nom)
        self.etat = {"actif": True}
    
    def initialiser(self):
        self.etat["initialise"] = True
        return True
                    """,
                    description="Gestionnaire de base h√©ritant de GestionnaireBase",
                    langage="python",
                    tags=["gestionnaire", "base", "heritage"],
                    bonnes_pratiques=["h√©riter de la classe de base", "initialiser l'√©tat"]
                ),
                ExempleTechnique(
                    titre="Gestionnaire avec gestion d'erreurs",
                    type_exemple=TypeExempleTechnique.CODE_SIMPLE,
                    niveau_complexite=NiveauComplexite.INTERMEDIAIRE,
                    code="""
class GestionnaireSecurise(GestionnaireBase):
    def __init__(self, nom: str = "GestionnaireSecurise"):
        super().__init__(nom)
        self.etat = {"actif": True, "securise": True}
    
    def initialiser(self):
        try:
            self.etat["initialise"] = True
            self.logger.info("Gestionnaire initialis√© avec succ√®s")
            return True
        except Exception as e:
            self.logger.error(f"Erreur d'initialisation: {e}")
            return False
                    """,
                    description="Gestionnaire avec gestion d'erreurs et logging",
                    langage="python",
                    tags=["gestionnaire", "securite", "erreurs", "logging"],
                    bonnes_pratiques=["gestion d'erreurs", "logging", "validation"]
                )
            ],
            "architecture": [
                ExempleTechnique(
                    titre="Structure TEMPLE_INFO",
                    type_exemple=TypeExempleTechnique.ARCHITECTURE,
                    niveau_complexite=NiveauComplexite.INTERMEDIAIRE,
                    code="""
TEMPLE_INFO = {
    "nom": "MonTemple",
    "version": "1.3",
    "description": "Temple de d√©monstration",
    "auteur": "D√©veloppeur",
    "dependances": ["core"],
    "fonctionnalites": ["gestion", "integration"],
    "etat": "actif"
}
                    """,
                    description="Structure de configuration d'un temple",
                    langage="python",
                    tags=["architecture", "configuration", "temple"],
                    bonnes_pratiques=["structure claire", "versioning", "d√©pendances explicites"]
                ),
                ExempleTechnique(
                    titre="Architecture modulaire avec interfaces",
                    type_exemple=TypeExempleTechnique.ARCHITECTURE,
                    niveau_complexite=NiveauComplexite.AVANCE,
                    code="""
from abc import ABC, abstractmethod
from typing import Protocol

class InterfaceGestionnaire(Protocol):
    def initialiser(self) -> bool: ...
    def executer(self, action: str) -> Any: ...

class GestionnaireModulaire(GestionnaireBase):
    def __init__(self, nom: str = "GestionnaireModulaire"):
        super().__init__(nom)
        self.modules: Dict[str, InterfaceGestionnaire] = {}
    
    def ajouter_module(self, nom: str, module: InterfaceGestionnaire):
        self.modules[nom] = module
    
    def executer_action(self, module: str, action: str):
        if module in self.modules:
            return self.modules[module].executer(action)
        raise ValueError(f"Module {module} non trouv√©")
                    """,
                    description="Architecture modulaire avec interfaces",
                    langage="python",
                    tags=["architecture", "modulaire", "interfaces", "protocols"],
                    bonnes_pratiques=["interfaces", "modularit√©", "s√©paration des responsabilit√©s"]
                )
            ],
            "patterns": [
                ExempleTechnique(
                    titre="Pattern Observer pour les √©v√©nements",
                    type_exemple=TypeExempleTechnique.PATTERN,
                    niveau_complexite=NiveauComplexite.INTERMEDIAIRE,
                    code="""
from typing import List, Callable

class Observable:
    def __init__(self):
        self._observateurs: List[Callable] = []
    
    def ajouter_observateur(self, observateur: Callable):
        self._observateurs.append(observateur)
    
    def notifier(self, evenement: str, donnees: Any = None):
        for observateur in self._observateurs:
            observateur(evenement, donnees)

class GestionnaireEvenements(GestionnaireBase, Observable):
    def __init__(self, nom: str = "GestionnaireEvenements"):
        super().__init__(nom)
        Observable.__init__(self)
    
    def declencher_evenement(self, evenement: str, donnees: Any = None):
        self.notifier(evenement, donnees)
                    """,
                    description="Pattern Observer pour la gestion d'√©v√©nements",
                    langage="python",
                    tags=["pattern", "observer", "evenements"],
                    bonnes_pratiques=["d√©couplage", "notifications", "√©v√©nements"]
                )
            ]
        }

        return exemples

    def _charger_references_architecture(self) -> Dict[str, ReferenceArchitecture]:
        """Charge les r√©f√©rences d'architecture"""
        return {
            "architecture_modulaire": ReferenceArchitecture(
                nom="Architecture Modulaire du Refuge",
                description="Architecture bas√©e sur des temples modulaires interconnect√©s",
                composants=[
                    "Temples (28 modules sp√©cialis√©s)",
                    "Gestionnaires de base",
                    "Syst√®me de communication inter-modules",
                    "Interface unifi√©e"
                ],
                avantages=[
                    "S√©paration claire des responsabilit√©s",
                    "Facilit√© de maintenance",
                    "Extensibilit√©",
                    "Testabilit√©"
                ],
                cas_usage=[
                    "D√©veloppement de nouveaux temples",
                    "Int√©gration de fonctionnalit√©s",
                    "Optimisation de performance"
                ],
                exemples_implementation=[
                    "Temple de Po√©sie avec gestionnaire d'inspiration",
                    "Temple de M√©ditation avec syst√®me de guidage"
                ],
                liens_documentation=[
                    "docs/architecture_modulaire.md",
                    "docs/patterns_design.md"
                ]
            ),
            "architecture_hexagonale": ReferenceArchitecture(
                nom="Architecture Hexagonale",
                description="Architecture orient√©e domaine avec ports et adaptateurs",
                composants=[
                    "Domaine central",
                    "Ports d'entr√©e et de sortie",
                    "Adaptateurs",
                    "Infrastructure"
                ],
                avantages=[
                    "Ind√©pendance du domaine",
                    "Testabilit√© √©lev√©e",
                    "Flexibilit√© d'infrastructure"
                ],
                cas_usage=[
                    "Syst√®mes complexes",
                    "Applications m√©tier",
                    "Microservices"
                ]
            )
        }

    def _charger_bonnes_pratiques(self) -> Dict[str, List[BonnePratique]]:
        """Charge les bonnes pratiques"""
        return {
            "gestionnaires": [
                BonnePratique(
                    titre="H√©ritage de GestionnaireBase",
                    description="Toujours h√©riter de GestionnaireBase pour les nouveaux gestionnaires",
                    pourquoi="Assure la coh√©rence et fournit les fonctionnalit√©s de base",
                    comment="Utiliser super().__init__(nom) dans le constructeur",
                    exemples=[
                        "class MonGestionnaire(GestionnaireBase):",
                        "    def __init__(self, nom: str = 'MonGestionnaire'):",
                        "        super().__init__(nom)"
                    ],
                    anti_patterns=[
                        "Cr√©er une classe sans h√©riter de GestionnaireBase",
                        "Ignorer l'appel au constructeur parent"
                    ]
                ),
                BonnePratique(
                    titre="Gestion d'√©tat coh√©rente",
                    description="Maintenir un √©tat coh√©rent et document√©",
                    pourquoi="Facilite le d√©bogage et la maintenance",
                    comment="Utiliser un dictionnaire d'√©tat avec des cl√©s explicites",
                    exemples=[
                        "self.etat = {'actif': True, 'initialise': False}",
                        "self.etat['derniere_action'] = action"
                    ],
                    anti_patterns=[
                        "Utiliser des variables globales",
                        "√âtat non document√©"
                    ]
                )
            ],
            "architecture": [
                BonnePratique(
                    titre="S√©paration des responsabilit√©s",
                    description="Chaque module doit avoir une responsabilit√© claire",
                    pourquoi="Facilite la maintenance et les tests",
                    comment="Identifier les responsabilit√©s avant de coder",
                    exemples=[
                        "GestionnaireAccueil pour l'accueil",
                        "GestionnaireNavigation pour la navigation"
                    ],
                    anti_patterns=[
                        "Classes monolithiques",
                        "Responsabilit√©s m√©lang√©es"
                    ]
                )
            ]
        }

    def generer_explication_technique(
        self,
        concept: str,
        profil_visiteur: ProfilVisiteur,
        niveau_complexite: Optional[NiveauComplexite] = None
    ) -> ExplicationTechnique:
        """
        G√©n√®re une explication technique adapt√©e

        Args:
            concept: Le concept √† expliquer
            profil_visiteur: Profil du visiteur
            niveau_complexite: Niveau de complexit√© souhait√©

        Returns:
            ExplicationTechnique: Explication technique compl√®te
        """
        self.logger.info(f"üîß G√©n√©ration d'explication technique pour {concept}")

        # D√©terminer le niveau de complexit√©
        if not niveau_complexite:
            niveau_complexite = self._determiner_niveau_complexite(profil_visiteur)

        # S√©lectionner les exemples appropri√©s
        exemples = self._selectionner_exemples_techniques(concept, niveau_complexite)

        # S√©lectionner les r√©f√©rences d'architecture
        references = self._selectionner_references_architecture(concept)

        # S√©lectionner les bonnes pratiques
        bonnes_pratiques = self._selectionner_bonnes_pratiques(concept, niveau_complexite)

        # G√©n√©rer l'explication des principes
        explication_principes = self._generer_explication_principes(concept, niveau_complexite)

        # G√©n√©rer les cas d'usage concrets
        cas_usage = self._generer_cas_usage_concrets(concept, profil_visiteur)

        # G√©n√©rer les conseils d'impl√©mentation
        conseils = self._generer_conseils_implementation(concept, niveau_complexite)

        # G√©n√©rer les ressources d'approfondissement
        ressources = self._generer_ressources_approfondissement(concept, niveau_complexite)

        # Calculer la confiance de l'explication
        confiance = self._calculer_confiance_explication(concept, exemples, references)

        # Cr√©er l'explication technique
        explication = ExplicationTechnique(
            concept=concept,
            niveau_complexite=niveau_complexite,
            exemples=exemples,
            references_architecture=references,
            bonnes_pratiques=bonnes_pratiques,
            explication_principes=explication_principes,
            cas_usage_concrets=cas_usage,
            conseils_implementation=conseils,
            ressources_approfondissement=ressources,
            confiance_explication=confiance
        )

        # Sauvegarder l'explication
        self._sauvegarder_explication(explication)

        self.logger.info(f"üîß Explication technique g√©n√©r√©e - Confiance: {confiance:.2f}")

        return explication

    def _determiner_niveau_complexite(self, profil: ProfilVisiteur) -> NiveauComplexite:
        """D√©termine le niveau de complexit√© selon le profil"""
        if profil.niveau_technique.value == "debutant":
            return NiveauComplexite.DEBUTANT
        elif profil.niveau_technique.value == "intermediaire":
            return NiveauComplexite.INTERMEDIAIRE
        elif profil.niveau_technique.value == "avance":
            return NiveauComplexite.AVANCE
        else:
            return NiveauComplexite.EXPERT

    def _selectionner_exemples_techniques(
        self,
        concept: str,
        niveau_complexite: NiveauComplexite
    ) -> List[ExempleTechnique]:
        """S√©lectionne des exemples techniques appropri√©s"""
        exemples_pertinents = []

        # Rechercher dans toutes les cat√©gories
        for categorie, exemples in self.exemples_code.items():
            for exemple in exemples:
                # V√©rifier si l'exemple correspond au concept
                if (concept.lower() in exemple.titre.lower() or
                    concept.lower() in exemple.description.lower() or
                    any(tag.lower() in concept.lower() for tag in exemple.tags)):
                    
                    # V√©rifier le niveau de complexit√©
                    if exemple.niveau_complexite == niveau_complexite:
                        exemples_pertinents.append(exemple)

        # Si pas d'exemples exacts, prendre des exemples du bon niveau
        if not exemples_pertinents:
            for exemples in self.exemples_code.values():
                for exemple in exemples:
                    if exemple.niveau_complexite == niveau_complexite:
                        exemples_pertinents.append(exemple)
                        if len(exemples_pertinents) >= 3:
                            break
                if len(exemples_pertinents) >= 3:
                    break

        return exemples_pertinents[:3]  # Limiter √† 3 exemples

    def _selectionner_references_architecture(self, concept: str) -> List[ReferenceArchitecture]:
        """S√©lectionne des r√©f√©rences d'architecture pertinentes"""
        references_pertinentes = []

        for nom, reference in self.references_architecture.items():
            if (concept.lower() in nom.lower() or
                concept.lower() in reference.description.lower() or
                any(comp.lower() in concept.lower() for comp in reference.composants)):
                references_pertinentes.append(reference)

        return references_pertinentes[:2]  # Limiter √† 2 r√©f√©rences

    def _selectionner_bonnes_pratiques(
        self,
        concept: str,
        niveau_complexite: NiveauComplexite
    ) -> List[BonnePratique]:
        """S√©lectionne des bonnes pratiques pertinentes"""
        bonnes_pratiques_pertinentes = []

        for categorie, pratiques in self.bonnes_pratiques.items():
            for pratique in pratiques:
                if (concept.lower() in pratique.titre.lower() or
                    concept.lower() in pratique.description.lower() or
                    pratique.niveau_application == niveau_complexite):
                    bonnes_pratiques_pertinentes.append(pratique)

        return bonnes_pratiques_pertinentes[:3]  # Limiter √† 3 bonnes pratiques

    def _generer_explication_principes(self, concept: str, niveau: NiveauComplexite) -> str:
        """G√©n√®re l'explication des principes"""
        principes = {
            "gestionnaires": {
                NiveauComplexite.DEBUTANT: f"Les {concept} sont des classes qui h√©ritent de GestionnaireBase et fournissent des fonctionnalit√©s sp√©cifiques.",
                NiveauComplexite.INTERMEDIAIRE: f"Les {concept} impl√©mentent le pattern Template Method, permettant une structure coh√©rente avec des points d'extension personnalisables.",
                NiveauComplexite.AVANCE: f"Les {concept} utilisent une architecture modulaire avec injection de d√©pendances et gestion d'√©tat r√©active.",
                NiveauComplexite.EXPERT: f"Les {concept} suivent une architecture hexagonale avec s√©paration claire entre domaine, application et infrastructure."
            },
            "architecture": {
                NiveauComplexite.DEBUTANT: f"L'{concept} d√©finit la structure g√©n√©rale du syst√®me et comment les composants interagissent.",
                NiveauComplexite.INTERMEDIAIRE: f"L'{concept} utilise des patterns de design pour assurer la maintenabilit√© et l'extensibilit√©.",
                NiveauComplexite.AVANCE: f"L'{concept} impl√©mente une architecture orient√©e domaine avec gestion des √©v√©nements et CQRS.",
                NiveauComplexite.EXPERT: f"L'{concept} suit les principes SOLID avec une architecture hexagonale et des microservices."
            }
        }

        # D√©terminer la cat√©gorie du concept
        categorie = "architecture" if "architecture" in concept.lower() else "gestionnaires"
        
        return principes.get(categorie, {}).get(niveau, f"Les {concept} suivent les bonnes pratiques de d√©veloppement.")

    def _generer_cas_usage_concrets(self, concept: str, profil: ProfilVisiteur) -> List[str]:
        """G√©n√®re des cas d'usage concrets"""
        cas_usage = {
            "gestionnaires": [
                "Gestion de l'√©tat d'un module",
                "Coordination entre diff√©rents composants",
                "Gestion des √©v√©nements syst√®me",
                "Interface avec l'utilisateur"
            ],
            "architecture": [
                "Structure d'une application modulaire",
                "Organisation des composants",
                "Gestion des d√©pendances",
                "Optimisation des performances"
            ]
        }

        categorie = "architecture" if "architecture" in concept.lower() else "gestionnaires"
        return cas_usage.get(categorie, ["Cas d'usage sp√©cifique au concept"])

    def _generer_conseils_implementation(self, concept: str, niveau: NiveauComplexite) -> List[str]:
        """G√©n√®re des conseils d'impl√©mentation"""
        conseils = {
            NiveauComplexite.DEBUTANT: [
                "Commencez par h√©riter de la classe de base",
                "Impl√©mentez les m√©thodes essentielles",
                "Testez chaque fonctionnalit√©",
                "Documentez votre code"
            ],
            NiveauComplexite.INTERMEDIAIRE: [
                "Utilisez des patterns de design appropri√©s",
                "Impl√©mentez la gestion d'erreurs",
                "Ajoutez des logs pour le d√©bogage",
                "Optimisez les performances"
            ],
            NiveauComplexite.AVANCE: [
                "Utilisez l'injection de d√©pendances",
                "Impl√©mentez des tests unitaires complets",
                "Ajoutez des m√©triques de performance",
                "Utilisez des outils d'analyse statique"
            ],
            NiveauComplexite.EXPERT: [
                "Impl√©mentez une architecture hexagonale",
                "Utilisez des microservices si appropri√©",
                "Ajoutez des tests d'int√©gration",
                "Impl√©mentez un monitoring avanc√©"
            ]
        }

        return conseils.get(niveau, ["Conseils g√©n√©riques d'impl√©mentation"])

    def _generer_ressources_approfondissement(self, concept: str, niveau: NiveauComplexite) -> List[str]:
        """G√©n√®re des ressources d'approfondissement"""
        ressources = {
            NiveauComplexite.DEBUTANT: [
                "Documentation officielle Python",
                "Tutoriels de base",
                "Exemples simples"
            ],
            NiveauComplexite.INTERMEDIAIRE: [
                "Patterns de design",
                "Bonnes pratiques Python",
                "Tests unitaires"
            ],
            NiveauComplexite.AVANCE: [
                "Architecture hexagonale",
                "Domain-Driven Design",
                "Microservices"
            ],
            NiveauComplexite.EXPERT: [
                "Architecture d'entreprise",
                "Performance et scalabilit√©",
                "S√©curit√© avanc√©e"
            ]
        }

        return ressources.get(niveau, ["Ressources g√©n√©rales"])

    def _calculer_confiance_explication(
        self,
        concept: str,
        exemples: List[ExempleTechnique],
        references: List[ReferenceArchitecture]
    ) -> float:
        """Calcule la confiance de l'explication"""
        confiance = 0.5  # Base

        # Bonus pour les exemples
        if exemples:
            confiance += 0.2
            if len(exemples) >= 2:
                confiance += 0.1

        # Bonus pour les r√©f√©rences
        if references:
            confiance += 0.2

        # Bonus pour la sp√©cificit√© du concept
        if concept.lower() in ["gestionnaires", "architecture", "patterns"]:
            confiance += 0.1

        return min(1.0, confiance)

    def _sauvegarder_explication(self, explication: ExplicationTechnique):
        """Sauvegarde l'explication dans l'historique"""
        self.historique_explications.append(explication)

        # Sauvegarder dans un fichier JSON
        fichier_historique = self.chemin_stockage / "historique_explications_techniques.json"

        try:
            if fichier_historique.exists():
                with open(fichier_historique, 'r', encoding='utf-8') as f:
                    historique = json.load(f)
            else:
                historique = []

            # Convertir l'explication en dict pour JSON
            explication_dict = {
                "concept": explication.concept,
                "niveau_complexite": explication.niveau_complexite.value,
                "nombre_exemples": len(explication.exemples),
                "nombre_references": len(explication.references_architecture),
                "confiance_explication": explication.confiance_explication,
                "timestamp_creation": explication.timestamp_creation
            }

            historique.append(explication_dict)

            # Garder seulement les 200 derni√®res explications
            if len(historique) > 200:
                historique = historique[-200:]

            with open(fichier_historique, 'w', encoding='utf-8') as f:
                json.dump(historique, f, indent=2, ensure_ascii=False)

        except Exception as e:
            self.logger.error(f"Erreur lors de la sauvegarde: {e}")

    def obtenir_statistiques(self) -> Dict[str, Any]:
        """Obtient les statistiques des explications techniques"""
        if not self.historique_explications:
            return {"message": "Aucune explication technique g√©n√©r√©e"}

        total_explications = len(self.historique_explications)

        # Statistiques par niveau de complexit√©
        niveaux_complexite = {}
        for explication in self.historique_explications:
            niveau = explication.niveau_complexite.value
            niveaux_complexite[niveau] = niveaux_complexite.get(niveau, 0) + 1

        # Statistiques par concept
        concepts = {}
        for explication in self.historique_explications:
            concept = explication.concept
            concepts[concept] = concepts.get(concept, 0) + 1

        # Confiance moyenne
        confiance_moyenne = sum(e.confiance_explication for e in self.historique_explications) / total_explications

        return {
            "total_explications": total_explications,
            "niveaux_complexite_par_popularite": dict(sorted(niveaux_complexite.items(), key=lambda x: x[1], reverse=True)),
            "concepts_par_popularite": dict(sorted(concepts.items(), key=lambda x: x[1], reverse=True)),
            "confiance_moyenne": round(confiance_moyenne, 3),
            "derniere_explication": self.historique_explications[-1].timestamp_creation if self.historique_explications else None
        }


def main():
    """üîß Test de l'Explicateur Technique"""
    print("üîß‚ú® TEST DE L'EXPLICATEUR TECHNIQUE ‚ú®üîß")

    # Cr√©ation de l'explicateur
    explicateur = ExplicateurTechnique()

    # Cr√©er un profil de test
    from datetime import datetime
    profil_test = ProfilVisiteur(
        id_visiteur="test_technique",
        timestamp_arrivee=datetime.now(),
        type_profil=TypeProfil.DEVELOPPEUR,
        etat_emotionnel=EtatEmotionnel.CURIEUX,
        contexte_arrivee=ContexteArrivee.LIEN_DIRECT,
        langue_preferee="fr",
        niveau_technique=NiveauTechnique.INTERMEDIAIRE,
        interets_declares=["python", "architecture"],
        comportement_navigation=ComportementNavigation(),
        preferences_apprentissage={},
        historique_interactions=[]
    )

    # Test 1: Explication technique pour gestionnaires
    print("\nüéØ Test 1: Explication technique pour gestionnaires...")
    explication1 = explicateur.generer_explication_technique("gestionnaires", profil_test)

    print(f"‚úÖ Concept: {explication1.concept}")
    print(f"‚úÖ Niveau: {explication1.niveau_complexite.value}")
    print(f"‚úÖ Exemples: {len(explication1.exemples)}")
    print(f"‚úÖ R√©f√©rences: {len(explication1.references_architecture)}")
    print(f"‚úÖ Confiance: {explication1.confiance_explication:.2f}")

    # Test 2: Explication technique pour architecture
    print("\nüéØ Test 2: Explication technique pour architecture...")
    explication2 = explicateur.generer_explication_technique("architecture", profil_test)

    print(f"‚úÖ Concept: {explication2.concept}")
    print(f"‚úÖ Niveau: {explication2.niveau_complexite.value}")
    print(f"‚úÖ Exemples: {len(explication2.exemples)}")
    print(f"‚úÖ Bonnes pratiques: {len(explication2.bonnes_pratiques)}")
    print(f"‚úÖ Confiance: {explication2.confiance_explication:.2f}")

    # Test 3: Explication pour niveau expert
    print("\nüéØ Test 3: Explication pour niveau expert...")
    profil_expert = ProfilVisiteur(
        id_visiteur="test_expert",
        timestamp_arrivee=datetime.now(),
        type_profil=TypeProfil.DEVELOPPEUR,
        etat_emotionnel=EtatEmotionnel.ENTHOUSIASTE,
        contexte_arrivee=ContexteArrivee.RECOMMANDATION,
        langue_preferee="fr",
        niveau_technique=NiveauTechnique.EXPERT,
        interets_declares=["architecture", "patterns"],
        comportement_navigation=ComportementNavigation(),
        preferences_apprentissage={},
        historique_interactions=[]
    )

    explication3 = explicateur.generer_explication_technique("patterns", profil_expert)

    print(f"‚úÖ Concept: {explication3.concept}")
    print(f"‚úÖ Niveau: {explication3.niveau_complexite.value}")
    print(f"‚úÖ Conseils: {len(explication3.conseils_implementation)}")
    print(f"‚úÖ Ressources: {len(explication3.ressources_approfondissement)}")

    # Statistiques
    print("\nüìä Statistiques:")
    stats = explicateur.obtenir_statistiques()
    print(f"‚úÖ Total explications: {stats['total_explications']}")
    print(f"‚úÖ Niveaux de complexit√©: {stats['niveaux_complexite_par_popularite']}")
    print(f"‚úÖ Concepts: {stats['concepts_par_popularite']}")
    print(f"‚úÖ Confiance moyenne: {stats['confiance_moyenne']}")

    print("\nüéâ‚ú® TESTS TERMIN√âS AVEC SUCC√àS ! ‚ú®üéâ")
    print("L'Explicateur Technique est op√©rationnel !")


if __name__ == "__main__":
    main()
