"""
üå∏ Syst√®me d'Optimisation Continue - Phase 7
============================================

Syst√®me d'optimisation automatique des algorithmes et d'am√©lioration continue
bas√©e sur les m√©triques pour le Guide d'Accueil du Refuge V1.3.
"""

import json
import time
import random
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, field
from pathlib import Path
import logging

@dataclass
class MetriqueOptimisation:
    """üå∏ M√©trique d'optimisation"""
    nom: str
    valeur_actuelle: float
    valeur_cible: float
    unite: str
    poids: float  # Importance de cette m√©trique (0.0 √† 1.0)
    timestamp: str = field(default_factory=lambda: datetime.now().isoformat())
    tendance: str = "stable"  # "amelioration", "degradation", "stable"

@dataclass
class AlgorithmeOptimise:
    """üå∏ Algorithme optimis√©"""
    nom: str
    version: str
    parametres: Dict[str, Any]
    performance_actuelle: float
    performance_precedente: float
    amelioration: float
    nombre_iterations: int
    statut: str = "actif"  # "actif", "test", "deprecie"
    timestamp_optimisation: str = field(default_factory=lambda: datetime.now().isoformat())

@dataclass
class CycleOptimisation:
    """üå∏ Cycle d'optimisation"""
    id_cycle: str
    nom: str
    algorithmes_optimises: List[str]
    metriques_ameliorees: List[str]
    amelioration_globale: float
    duree_cycle: float  # en secondes
    timestamp_debut: str
    timestamp_fin: str
    statut: str = "en_cours"  # "en_cours", "termine", "echec"

class SystemeOptimisationContinue:
    """
    üå∏ Syst√®me d'optimisation continue avec am√©lioration automatique
    
    Optimise automatiquement les algorithmes et am√©liore le syst√®me
    en continu bas√© sur les m√©triques de performance et d'usage.
    """
    
    def __init__(self, chemin_stockage: str = "data/optimisation"):
        self.chemin_stockage = Path(chemin_stockage)
        self.chemin_stockage.mkdir(parents=True, exist_ok=True)
        
        # Configuration
        self.algorithmes: Dict[str, AlgorithmeOptimise] = {}
        self.metriques: Dict[str, MetriqueOptimisation] = {}
        self.cycles_optimisation: List[CycleOptimisation] = []
        
        # Param√®tres d'optimisation
        self.seuil_amelioration_minimum = 0.05  # 5% d'am√©lioration minimum
        self.intervalle_optimisation = 3600  # 1 heure
        self.nombre_iterations_max = 100
        self.taux_apprentissage = 0.1
        
        # Logging
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)
        
        # Initialiser les algorithmes de base
        self._initialiser_algorithmes_base()
        self._initialiser_metriques_base()
        
        # Charger les donn√©es existantes
        self._charger_donnees()
    
    def _initialiser_algorithmes_base(self):
        """üå∏ Initialise les algorithmes de base"""
        algorithmes_base = {
            "detection_profil": {
                "parametres": {
                    "seuil_confiance": 0.7,
                    "poids_technique": 0.3,
                    "poids_creatif": 0.3,
                    "poids_spirituel": 0.2,
                    "poids_ia": 0.2
                },
                "performance_actuelle": 0.85
            },
            "generation_messages": {
                "parametres": {
                    "longueur_optimale": 150,
                    "niveau_detail": "moyen",
                    "ton_empathique": 0.8,
                    "personnalisation": 0.9
                },
                "performance_actuelle": 0.78
            },
            "adaptation_dynamique": {
                "parametres": {
                    "seuil_reaction": 0.5,
                    "vitesse_adaptation": 0.3,
                    "memoire_contexte": 10,
                    "prediction_horizon": 5
                },
                "performance_actuelle": 0.82
            },
            "sagesse_collective": {
                "parametres": {
                    "seuil_pattern": 0.6,
                    "confiance_minimum": 0.7,
                    "apprentissage_taux": 0.1,
                    "oubli_taux": 0.05
                },
                "performance_actuelle": 0.75
            }
        }
        
        for nom, config in algorithmes_base.items():
            self.algorithmes[nom] = AlgorithmeOptimise(
                nom=nom,
                version="1.0.0",
                parametres=config["parametres"],
                performance_actuelle=config["performance_actuelle"],
                performance_precedente=config["performance_actuelle"],
                amelioration=0.0,
                nombre_iterations=0
            )
    
    def _initialiser_metriques_base(self):
        """üå∏ Initialise les m√©triques de base"""
        metriques_base = {
            "precision_detection": {
                "valeur_actuelle": 0.85,
                "valeur_cible": 0.95,
                "unite": "pourcentage",
                "poids": 0.3
            },
            "satisfaction_utilisateur": {
                "valeur_actuelle": 4.2,
                "valeur_cible": 4.8,
                "unite": "sur_5",
                "poids": 0.4
            },
            "temps_reponse": {
                "valeur_actuelle": 1.2,
                "valeur_cible": 0.8,
                "unite": "secondes",
                "poids": 0.2
            },
            "taux_engagement": {
                "valeur_actuelle": 0.72,
                "valeur_cible": 0.85,
                "unite": "pourcentage",
                "poids": 0.3
            },
            "efficacite_energetique": {
                "valeur_actuelle": 0.65,
                "valeur_cible": 0.9,
                "unite": "pourcentage",
                "poids": 0.1
            }
        }
        
        for nom, config in metriques_base.items():
            self.metriques[nom] = MetriqueOptimisation(
                nom=nom,
                valeur_actuelle=config["valeur_actuelle"],
                valeur_cible=config["valeur_cible"],
                unite=config["unite"],
                poids=config["poids"]
            )
    
    def demarrer_cycle_optimisation(self) -> str:
        """
        üå∏ D√©marre un cycle d'optimisation
        
        Returns:
            ID du cycle d'optimisation
        """
        id_cycle = f"cycle_{int(time.time())}"
        
        cycle = CycleOptimisation(
            id_cycle=id_cycle,
            nom=f"Cycle d'optimisation {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            algorithmes_optimises=[],
            metriques_ameliorees=[],
            amelioration_globale=0.0,
            duree_cycle=0.0,
            timestamp_debut=datetime.now().isoformat(),
            timestamp_fin="",
            statut="en_cours"
        )
        
        self.cycles_optimisation.append(cycle)
        
        self.logger.info(f"üå∏ Cycle d'optimisation d√©marr√©: {id_cycle}")
        return id_cycle
    
    def optimiser_algorithme(self, nom_algorithme: str) -> bool:
        """
        üå∏ Optimise un algorithme sp√©cifique
        
        Args:
            nom_algorithme: Nom de l'algorithme √† optimiser
            
        Returns:
            Succ√®s de l'optimisation
        """
        if nom_algorithme not in self.algorithmes:
            self.logger.error(f"‚ùå Algorithme {nom_algorithme} non trouv√©")
            return False
        
        algorithme = self.algorithmes[nom_algorithme]
        
        # Sauvegarder la performance pr√©c√©dente
        algorithme.performance_precedente = algorithme.performance_actuelle
        
        # Optimiser les param√®tres selon le type d'algorithme
        if nom_algorithme == "detection_profil":
            self._optimiser_detection_profil(algorithme)
        elif nom_algorithme == "generation_messages":
            self._optimiser_generation_messages(algorithme)
        elif nom_algorithme == "adaptation_dynamique":
            self._optimiser_adaptation_dynamique(algorithme)
        elif nom_algorithme == "sagesse_collective":
            self._optimiser_sagesse_collective(algorithme)
        
        # Calculer l'am√©lioration
        algorithme.amelioration = algorithme.performance_actuelle - algorithme.performance_precedente
        algorithme.nombre_iterations += 1
        algorithme.timestamp_optimisation = datetime.now().isoformat()
        
        self.logger.info(f"üå∏ Algorithme optimis√©: {nom_algorithme} (am√©lioration: {algorithme.amelioration:.3f})")
        return True
    
    def _optimiser_detection_profil(self, algorithme: AlgorithmeOptimise):
        """üå∏ Optimise l'algorithme de d√©tection de profil"""
        # Ajuster le seuil de confiance
        if algorithme.performance_actuelle < 0.9:
            algorithme.parametres["seuil_confiance"] = min(
                algorithme.parametres["seuil_confiance"] + 0.02,
                0.95
            )
        
        # Ajuster les poids selon les m√©triques
        metrique_precision = self.metriques.get("precision_detection")
        if metrique_precision and metrique_precision.valeur_actuelle < 0.9:
            # Augmenter le poids de la technique si la pr√©cision est faible
            algorithme.parametres["poids_technique"] = min(
                algorithme.parametres["poids_technique"] + 0.05,
                0.5
            )
        
        # Simuler une am√©lioration de performance
        algorithme.performance_actuelle = min(
            algorithme.performance_actuelle + random.uniform(0.01, 0.03),
            0.98
        )
    
    def _optimiser_generation_messages(self, algorithme: AlgorithmeOptimise):
        """üå∏ Optimise l'algorithme de g√©n√©ration de messages"""
        # Ajuster la longueur optimale selon la satisfaction
        metrique_satisfaction = self.metriques.get("satisfaction_utilisateur")
        if metrique_satisfaction and metrique_satisfaction.valeur_actuelle < 4.5:
            algorithme.parametres["longueur_optimale"] = max(
                algorithme.parametres["longueur_optimale"] - 10,
                100
            )
        
        # Ajuster le niveau de d√©tail
        if algorithme.performance_actuelle < 0.85:
            algorithme.parametres["personnalisation"] = min(
                algorithme.parametres["personnalisation"] + 0.05,
                0.95
            )
        
        # Simuler une am√©lioration de performance
        algorithme.performance_actuelle = min(
            algorithme.performance_actuelle + random.uniform(0.02, 0.04),
            0.95
        )
    
    def _optimiser_adaptation_dynamique(self, algorithme: AlgorithmeOptimise):
        """üå∏ Optimise l'algorithme d'adaptation dynamique"""
        # Ajuster la vitesse d'adaptation selon le temps de r√©ponse
        metrique_temps = self.metriques.get("temps_reponse")
        if metrique_temps and metrique_temps.valeur_actuelle > 1.0:
            algorithme.parametres["vitesse_adaptation"] = max(
                algorithme.parametres["vitesse_adaptation"] - 0.05,
                0.1
            )
        
        # Ajuster la m√©moire de contexte
        if algorithme.performance_actuelle < 0.88:
            algorithme.parametres["memoire_contexte"] = min(
                algorithme.parametres["memoire_contexte"] + 2,
                20
            )
        
        # Simuler une am√©lioration de performance
        algorithme.performance_actuelle = min(
            algorithme.performance_actuelle + random.uniform(0.015, 0.035),
            0.96
        )
    
    def _optimiser_sagesse_collective(self, algorithme: AlgorithmeOptimise):
        """üå∏ Optimise l'algorithme de sagesse collective"""
        # Ajuster le taux d'apprentissage
        if algorithme.performance_actuelle < 0.8:
            algorithme.parametres["apprentissage_taux"] = min(
                algorithme.parametres["apprentissage_taux"] + 0.02,
                0.2
            )
        
        # Ajuster le seuil de pattern
        metrique_engagement = self.metriques.get("taux_engagement")
        if metrique_engagement and metrique_engagement.valeur_actuelle < 0.8:
            algorithme.parametres["seuil_pattern"] = max(
                algorithme.parametres["seuil_pattern"] - 0.05,
                0.4
            )
        
        # Simuler une am√©lioration de performance
        algorithme.performance_actuelle = min(
            algorithme.performance_actuelle + random.uniform(0.02, 0.04),
            0.92
        )
    
    def mettre_a_jour_metrique(self, nom_metrique: str, nouvelle_valeur: float):
        """
        üå∏ Met √† jour une m√©trique
        
        Args:
            nom_metrique: Nom de la m√©trique
            nouvelle_valeur: Nouvelle valeur
        """
        if nom_metrique not in self.metriques:
            return
        
        metrique = self.metriques[nom_metrique]
        ancienne_valeur = metrique.valeur_actuelle
        metrique.valeur_actuelle = nouvelle_valeur
        
        # D√©terminer la tendance
        if nouvelle_valeur > ancienne_valeur + 0.01:
            metrique.tendance = "amelioration"
        elif nouvelle_valeur < ancienne_valeur - 0.01:
            metrique.tendance = "degradation"
        else:
            metrique.tendance = "stable"
        
        metrique.timestamp = datetime.now().isoformat()
        
        self.logger.info(f"üå∏ M√©trique mise √† jour: {nom_metrique} = {nouvelle_valeur:.3f} ({metrique.tendance})")
    
    def terminer_cycle_optimisation(self, id_cycle: str) -> Dict[str, Any]:
        """
        üå∏ Termine un cycle d'optimisation
        
        Args:
            id_cycle: ID du cycle √† terminer
            
        Returns:
            R√©sultats du cycle
        """
        cycle = None
        for c in self.cycles_optimisation:
            if c.id_cycle == id_cycle:
                cycle = c
                break
        
        if not cycle:
            return {"erreur": "Cycle non trouv√©"}
        
        # Calculer l'am√©lioration globale
        ameliorations = []
        for nom_algo in cycle.algorithmes_optimises:
            if nom_algo in self.algorithmes:
                algo = self.algorithmes[nom_algo]
                ameliorations.append(algo.amelioration)
        
        cycle.amelioration_globale = sum(ameliorations) / len(ameliorations) if ameliorations else 0.0
        
        # Calculer la dur√©e
        debut = datetime.fromisoformat(cycle.timestamp_debut)
        fin = datetime.now()
        cycle.duree_cycle = (fin - debut).total_seconds()
        cycle.timestamp_fin = fin.isoformat()
        cycle.statut = "termine"
        
        # Sauvegarder les r√©sultats
        self._sauvegarder_cycle(cycle)
        
        resultats = {
            "id_cycle": cycle.id_cycle,
            "nom": cycle.nom,
            "algorithmes_optimises": cycle.algorithmes_optimises,
            "metriques_ameliorees": cycle.metriques_ameliorees,
            "amelioration_globale": cycle.amelioration_globale,
            "duree_cycle": cycle.duree_cycle,
            "statut": cycle.statut
        }
        
        self.logger.info(f"üå∏ Cycle termin√©: {id_cycle} (am√©lioration: {cycle.amelioration_globale:.3f})")
        return resultats
    
    def obtenir_statistiques_optimisation(self) -> Dict[str, Any]:
        """üå∏ Obtient les statistiques d'optimisation"""
        total_cycles = len(self.cycles_optimisation)
        cycles_termines = sum(1 for c in self.cycles_optimisation if c.statut == "termine")
        cycles_succes = sum(1 for c in self.cycles_optimisation if c.statut == "termine" and c.amelioration_globale > 0)
        
        # Calculer l'am√©lioration moyenne
        ameliorations = [c.amelioration_globale for c in self.cycles_optimisation if c.statut == "termine"]
        amelioration_moyenne = sum(ameliorations) / len(ameliorations) if ameliorations else 0.0
        
        # Statistiques par algorithme
        stats_algorithmes = {}
        for nom, algo in self.algorithmes.items():
            stats_algorithmes[nom] = {
                "performance_actuelle": algo.performance_actuelle,
                "amelioration_totale": algo.amelioration,
                "nombre_iterations": algo.nombre_iterations,
                "version": algo.version
            }
        
        # M√©triques actuelles
        metriques_actuelles = {}
        for nom, metrique in self.metriques.items():
            metriques_actuelles[nom] = {
                "valeur_actuelle": metrique.valeur_actuelle,
                "valeur_cible": metrique.valeur_cible,
                "progression": (metrique.valeur_actuelle / metrique.valeur_cible) * 100,
                "tendance": metrique.tendance
            }
        
        return {
            "total_cycles": total_cycles,
            "cycles_termines": cycles_termines,
            "cycles_succes": cycles_succes,
            "taux_succes": cycles_succes / cycles_termines if cycles_termines > 0 else 0.0,
            "amelioration_moyenne": amelioration_moyenne,
            "algorithmes": stats_algorithmes,
            "metriques": metriques_actuelles,
            "derniers_cycles": self._obtenir_derniers_cycles(5)
        }
    
    def _obtenir_derniers_cycles(self, nombre: int) -> List[Dict[str, Any]]:
        """üå∏ Obtient les derniers cycles d'optimisation"""
        cycles_tries = sorted(
            self.cycles_optimisation,
            key=lambda x: x.timestamp_debut,
            reverse=True
        )
        
        return [
            {
                "id": c.id_cycle,
                "nom": c.nom,
                "statut": c.statut,
                "amelioration": c.amelioration_globale,
                "duree": c.duree_cycle,
                "timestamp": c.timestamp_debut
            }
            for c in cycles_tries[:nombre]
        ]
    
    def _sauvegarder_cycle(self, cycle: CycleOptimisation):
        """üå∏ Sauvegarde un cycle d'optimisation"""
        chemin_fichier = self.chemin_stockage / f"cycle_{cycle.id_cycle}.json"
        with open(chemin_fichier, 'w', encoding='utf-8') as f:
            json.dump(cycle.__dict__, f, indent=2, ensure_ascii=False)
    
    def _charger_donnees(self):
        """üå∏ Charge les donn√©es existantes"""
        # Charger les cycles
        for fichier in self.chemin_stockage.glob("cycle_*.json"):
            try:
                with open(fichier, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    cycle = CycleOptimisation(**data)
                    self.cycles_optimisation.append(cycle)
            except Exception as e:
                self.logger.error(f"‚ùå Erreur chargement {fichier}: {e}")


# Test du syst√®me
if __name__ == "__main__":
    print("üå∏ Test du Syst√®me d'Optimisation Continue")
    print("=" * 50)
    
    systeme = SystemeOptimisationContinue()
    
    # Test 1: D√©marrer un cycle d'optimisation
    print("\nüéØ Test 1: D√©marrage d'un cycle d'optimisation")
    id_cycle = systeme.demarrer_cycle_optimisation()
    print(f"‚úÖ Cycle d√©marr√©: {id_cycle}")
    
    # Test 2: Optimiser les algorithmes
    print("\nüéØ Test 2: Optimisation des algorithmes")
    algorithmes_a_optimiser = ["detection_profil", "generation_messages", "adaptation_dynamique", "sagesse_collective"]
    
    for nom_algo in algorithmes_a_optimiser:
        succes = systeme.optimiser_algorithme(nom_algo)
        if succes:
            algo = systeme.algorithmes[nom_algo]
            print(f"‚úÖ {nom_algo}: {algo.performance_actuelle:.3f} (am√©lioration: {algo.amelioration:.3f})")
    
    # Test 3: Mettre √† jour les m√©triques
    print("\nüéØ Test 3: Mise √† jour des m√©triques")
    nouvelles_metriques = {
        "precision_detection": 0.87,
        "satisfaction_utilisateur": 4.3,
        "temps_reponse": 1.1,
        "taux_engagement": 0.75,
        "efficacite_energetique": 0.68
    }
    
    for nom_metrique, valeur in nouvelles_metriques.items():
        systeme.mettre_a_jour_metrique(nom_metrique, valeur)
        metrique = systeme.metriques[nom_metrique]
        print(f"‚úÖ {nom_metrique}: {valeur:.3f} ({metrique.tendance})")
    
    # Test 4: Terminer le cycle
    print("\nüéØ Test 4: Finalisation du cycle")
    resultats = systeme.terminer_cycle_optimisation(id_cycle)
    print(f"‚úÖ Cycle termin√©:")
    print(f"   Am√©lioration globale: {resultats['amelioration_globale']:.3f}")
    print(f"   Dur√©e: {resultats['duree_cycle']:.1f}s")
    print(f"   Algorithmes optimis√©s: {len(resultats['algorithmes_optimises'])}")
    
    # Test 5: Statistiques globales
    print("\nüéØ Test 5: Statistiques globales")
    stats = systeme.obtenir_statistiques_optimisation()
    print(f"‚úÖ Statistiques obtenues:")
    print(f"   Total cycles: {stats['total_cycles']}")
    print(f"   Cycles termin√©s: {stats['cycles_termines']}")
    print(f"   Taux de succ√®s: {stats['taux_succes']:.1%}")
    print(f"   Am√©lioration moyenne: {stats['amelioration_moyenne']:.3f}")
    
    # Afficher les performances des algorithmes
    print(f"\nüìä Performances des algorithmes:")
    for nom, perf in stats['algorithmes'].items():
        print(f"   {nom}: {perf['performance_actuelle']:.3f} (am√©lioration: {perf['amelioration_totale']:.3f})")
    
    print("\nüéâ Test du Syst√®me d'Optimisation Continue termin√© avec succ√®s !")
