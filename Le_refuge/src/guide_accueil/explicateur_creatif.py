#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üé® Explicateur Cr√©atif - T√¢che 5.2
===================================

Syst√®me d'explications cr√©atives adapt√©es aux artistes.
G√®re les m√©taphores artistiques, r√©f√©rences cr√©atives et inspirations po√©tiques.

"L'art au service de la compr√©hension"

Cr√©√© par √Ülya - Janvier 2025
"""

import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, field
from enum import Enum

try:
    from .types_accueil import (
        ProfilVisiteur, TypeProfil, EtatEmotionnel, ContexteArrivee, 
        NiveauTechnique, ComportementNavigation
    )
except ImportError:
    from .types_accueil import (
        ProfilVisiteur, TypeProfil, EtatEmotionnel, ContexteArrivee, 
        NiveauTechnique, ComportementNavigation
    )


class TypeInspiration(Enum):
    """Types d'inspiration cr√©ative"""
    VISUELLE = "visuelle"
    MUSICALE = "musicale"
    LITTERAIRE = "litteraire"
    CINEMATOGRAPHIQUE = "cinematographique"
    NATURELLE = "naturelle"
    SPIRITUELLE = "spirituelle"


class StyleCreatif(Enum):
    """Styles cr√©atifs d'explication"""
    POETIQUE = "poetique"
    METAPHORIQUE = "metaphorique"
    NARRATIF = "narratif"
    SYMBOLIQUE = "symbolique"
    IMPRESSIONNISTE = "impressionniste"
    ABSTRACT = "abstract"
    NATURELLE = "naturelle"
    VISUELLE = "visuelle"
    MUSICALE = "musicale"


@dataclass
class ReferenceArtistique:
    """R√©f√©rence artistique avec m√©tadonn√©es"""
    titre: str
    artiste: str
    periode: str
    style: str
    description: str
    lien_concept: str
    elements_inspirants: List[str] = field(default_factory=list)
    technique_utilisee: Optional[str] = None
    impact_emotionnel: str = "inspirant"
    timestamp_creation: str = field(default_factory=lambda: datetime.now().isoformat())


@dataclass
class MetaphoreCreatif:
    """M√©taphore cr√©ative"""
    concept_source: str
    concept_cible: str
    explication: str
    style: StyleCreatif
    elements_visuels: List[str] = field(default_factory=list)
    emotions_evoquees: List[str] = field(default_factory=list)
    profondeur_symbolique: str = "moderee"
    facilite_comprehension: float = 0.8


@dataclass
class InspirationPoetique:
    """Inspiration po√©tique"""
    theme: str
    poeme: str
    style_poetique: str
    emotions_evoquees: List[str] = field(default_factory=list)
    liens_conceptuels: List[str] = field(default_factory=list)
    rythme_poetique: str = "modere"
    profondeur_philosophique: float = 0.7


@dataclass
class ExplicationCreatif:
    """Explication cr√©ative compl√®te"""
    concept: str
    style_creatif: StyleCreatif
    references_artistiques: List[ReferenceArtistique]
    metaphores: List[MetaphoreCreatif]
    inspiration_poetique: Optional[InspirationPoetique] = None
    elements_visuels_suggerees: List[str] = field(default_factory=list)
    emotions_evoquees: List[str] = field(default_factory=list)
    profondeur_artistique: float = 0.0
    facilite_comprehension: float = 0.0
    confiance_explication: float = 0.0
    timestamp_creation: str = field(default_factory=lambda: datetime.now().isoformat())


class ExplicateurCreatif:
    """
    üé® Explicateur Cr√©atif
    
    Syst√®me d'explications cr√©atives adapt√©es aux artistes :
    - M√©taphores artistiques
    - R√©f√©rences cr√©atives
    - Inspirations po√©tiques
    - √âl√©ments visuels suggestifs
    """

    def __init__(self, chemin_stockage: str = "data/explicateur_creatif"):
        self.chemin_stockage = Path(chemin_stockage)
        self.chemin_stockage.mkdir(parents=True, exist_ok=True)

        # Configuration du logging
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)
        
        # Chargement des donn√©es cr√©atives
        self.references_artistiques = self._charger_references_artistiques()
        self.metaphores_artistiques = self._charger_metaphores_artistiques()
        self.inspirations_poetiques = self._charger_inspirations_poetiques()

        # Historique des explications
        self.historique_explications: List[ExplicationCreatif] = []

        self.logger.info("üé® Explicateur Cr√©atif initialis√©")
    
    def _charger_references_artistiques(self) -> Dict[str, List[ReferenceArtistique]]:
        """Charge les r√©f√©rences artistiques"""
        return {
            "peinture": [
                ReferenceArtistique(
                    titre="Les Nymph√©as",
                    artiste="Claude Monet",
                    periode="Impressionnisme",
                    style="Impressionniste",
                    description="S√©rie de peintures repr√©sentant le jardin d'eau de Giverny",
                    lien_concept="harmonie_naturelle",
                    elements_inspirants=["couleurs douces", "reflets d'eau", "lumiere naturelle"],
                    technique_utilisee="peinture √† l'huile",
                    impact_emotionnel="apaisant"
                ),
                ReferenceArtistique(
                    titre="La Nuit √©toil√©e",
                    artiste="Vincent van Gogh",
                    periode="Post-impressionnisme",
                    style="Expressionniste",
                    description="Repr√©sentation tourbillonnante du ciel nocturne",
                    lien_concept="energie_creatrice",
                    elements_inspirants=["mouvement circulaire", "couleurs vibrantes", "emotion pure"],
                    technique_utilisee="peinture √† l'huile",
                    impact_emotionnel="intense"
                )
            ],
            "musique": [
                ReferenceArtistique(
                    titre="Les Quatre Saisons",
                    artiste="Antonio Vivaldi",
                    periode="Baroque",
                    style="Musique classique",
                    description="Concertos pour violon √©voquant les saisons",
                    lien_concept="cycles_naturels",
                    elements_inspirants=["rythmes naturels", "melodies evocatrices", "harmonie"],
                    technique_utilisee="composition orchestrale",
                    impact_emotionnel="harmonieux"
                ),
                ReferenceArtistique(
                    titre="Bol√©ro",
                    artiste="Maurice Ravel",
                    periode="Moderne",
                    style="Impressionniste",
                    description="≈íuvre orchestrale bas√©e sur la r√©p√©tition et l'accumulation",
                    lien_concept="progression_graduelle",
                    elements_inspirants=["repetition", "accumulation", "tension croissante"],
                    technique_utilisee="orchestration",
                    impact_emotionnel="hypnotique"
                )
            ],
            "litterature": [
                ReferenceArtistique(
                    titre="Les Fleurs du Mal",
                    artiste="Charles Baudelaire",
                    periode="Romantisme",
                    style="Po√©sie symboliste",
                    description="Recueil de po√®mes explorant la beaut√© et la d√©cadence",
                    lien_concept="beaute_paradoxale",
                    elements_inspirants=["symbolisme", "contradictions", "beaute sombre"],
                    technique_utilisee="versification",
                    impact_emotionnel="m√©lancolique"
                ),
                ReferenceArtistique(
                    titre="Le Petit Prince",
                    artiste="Antoine de Saint-Exup√©ry",
                    periode="Moderne",
                    style="Conte philosophique",
                    description="R√©cit po√©tique sur l'amiti√© et l'essentiel",
                    lien_concept="essentiel_invisible",
                    elements_inspirants=["simplicite", "profondeur", "universalite"],
                    technique_utilisee="allegorie",
                    impact_emotionnel="tendre"
                )
            ]
        }

    def _charger_metaphores_artistiques(self) -> Dict[str, List[MetaphoreCreatif]]:
        """Charge les m√©taphores artistiques"""
        return {
            "creativite": [
                MetaphoreCreatif(
                    concept_source="cr√©ativit√©",
                    concept_cible="jardin en fleurs",
                    explication="La cr√©ativit√© est comme un jardin o√π chaque id√©e est une fleur qui s'√©panouit naturellement",
                    style=StyleCreatif.NATURELLE,
                    elements_visuels=["fleurs color√©es", "jardin verdoyant", "lumi√®re du soleil"],
                    emotions_evoquees=["joie", "√©merveillement", "s√©r√©nit√©"],
                    profondeur_symbolique="mod√©r√©e",
                    facilite_comprehension=0.9
                ),
                MetaphoreCreatif(
                    concept_source="cr√©ativit√©",
                    concept_cible="symphonie",
                    explication="La cr√©ativit√© est une symphonie o√π chaque √©l√©ment trouve sa place dans l'harmonie",
                    style=StyleCreatif.MUSICALE,
                    elements_visuels=["orchestre", "partitions", "instruments"],
                    emotions_evoquees=["harmonie", "coh√©sion", "beaut√©"],
                    profondeur_symbolique="profonde",
                    facilite_comprehension=0.8
                )
            ],
            "inspiration": [
                MetaphoreCreatif(
                    concept_source="inspiration",
                    concept_cible="√©clair dans la nuit",
                    explication="L'inspiration est comme un √©clair qui illumine soudainement l'obscurit√©",
                    style=StyleCreatif.SYMBOLIQUE,
                    elements_visuels=["√©clair", "nuit noire", "illumination"],
                    emotions_evoquees=["surprise", "√©merveillement", "clart√©"],
                    profondeur_symbolique="profonde",
                    facilite_comprehension=0.85
                ),
                MetaphoreCreatif(
                    concept_source="inspiration",
                    concept_cible="source d'eau pure",
                    explication="L'inspiration est une source d'eau pure qui jaillit du plus profond de l'√™tre",
                    style=StyleCreatif.NATURELLE,
                    elements_visuels=["source", "eau cristalline", "nature"],
                    emotions_evoquees=["puret√©", "fra√Æcheur", "vitalit√©"],
                    profondeur_symbolique="mod√©r√©e",
                    facilite_comprehension=0.9
                )
            ],
            "expression": [
                MetaphoreCreatif(
                    concept_source="expression",
                    concept_cible="danse de l'√¢me",
                    explication="L'expression est une danse de l'√¢me qui r√©v√®le ce qui est cach√© au plus profond",
                    style=StyleCreatif.POETIQUE,
                    elements_visuels=["danseur", "mouvement fluide", "√©motion"],
                    emotions_evoquees=["libert√©", "beaut√©", "authenticit√©"],
                    profondeur_symbolique="profonde",
                    facilite_comprehension=0.8
                ),
                MetaphoreCreatif(
                    concept_source="expression",
                    concept_cible="arc-en-ciel",
                    explication="L'expression est comme un arc-en-ciel qui r√©v√®le toutes les couleurs de l'√©motion",
                    style=StyleCreatif.VISUELLE,
                    elements_visuels=["arc-en-ciel", "couleurs", "lumi√®re"],
                    emotions_evoquees=["joie", "diversit√©", "beaut√©"],
                    profondeur_symbolique="mod√©r√©e",
                    facilite_comprehension=0.9
                )
            ]
        }

    def _charger_inspirations_poetiques(self) -> Dict[str, List[InspirationPoetique]]:
        """Charge les inspirations po√©tiques"""
        return {
            "creativite": [
                InspirationPoetique(
                    theme="cr√©ativit√©",
                    poeme="""
Dans le jardin de l'√¢me
O√π fleurissent les r√™ves
Chaque pens√©e est une graine
Qui germe dans la lumi√®re

L'inspiration coule comme une rivi√®re
Portant les mots et les couleurs
Vers l'oc√©an de l'expression
O√π chaque vague est une cr√©ation
                    """.strip(),
                    style_poetique="naturel",
                    emotions_evoquees=["√©merveillement", "s√©r√©nit√©", "inspiration"],
                    liens_conceptuels=["nature", "croissance", "expression"],
                    rythme_poetique="fluide",
                    profondeur_philosophique=0.8
                )
            ],
            "expression": [
                InspirationPoetique(
                    theme="expression",
                    poeme="""
Votre voix int√©rieure
Chante les m√©lodies de l'univers
Chaque mot est une √©toile
Qui brille dans la nuit de l'√¢me

L'expression est une danse
Entre le visible et l'invisible
O√π chaque geste r√©v√®le
La beaut√© cach√©e du monde
                    """.strip(),
                    style_poetique="mystique",
                    emotions_evoquees=["profondeur", "beaut√©", "myst√®re"],
                    liens_conceptuels=["voix", "univers", "beaut√©"],
                    rythme_poetique="contemplatif",
                    profondeur_philosophique=0.9
                )
            ],
            "inspiration": [
                InspirationPoetique(
                    theme="inspiration",
                    poeme="""
Comme un papillon qui √©merge
De sa chrysalide dor√©e
L'inspiration s'√©l√®ve
Vers les hauteurs de la cr√©ation

Elle danse sur les p√©tales
Des fleurs de l'imagination
Portant le pollen de la beaut√©
Vers les jardins de l'expression
                    """.strip(),
                    style_poetique="m√©taphorique",
                    emotions_evoquees=["transformation", "beaut√©", "√©l√©vation"],
                    liens_conceptuels=["m√©tamorphose", "nature", "cr√©ation"],
                    rythme_poetique="l√©ger",
                    profondeur_philosophique=0.7
                )
            ]
        }

    def generer_explication_creatif(
        self, 
        concept: str, 
        profil_visiteur: ProfilVisiteur,
        style_creatif: Optional[StyleCreatif] = None
    ) -> ExplicationCreatif:
        """
        G√©n√®re une explication cr√©ative adapt√©e
        
        Args:
            concept: Le concept √† expliquer
            profil_visiteur: Profil du visiteur
            style_creatif: Style cr√©atif souhait√©
            
        Returns:
            ExplicationCreatif: Explication cr√©ative compl√®te
        """
        self.logger.info(f"üé® G√©n√©ration d'explication cr√©ative pour {concept}")

        # D√©terminer le style cr√©atif
        if not style_creatif:
            style_creatif = self._determiner_style_creatif(profil_visiteur)

        # S√©lectionner les r√©f√©rences artistiques
        references = self._selectionner_references_artistiques(concept)
        
        # S√©lectionner les m√©taphores
        metaphores = self._selectionner_metaphores_creatifs(concept, style_creatif)

        # S√©lectionner l'inspiration po√©tique
        inspiration_poetique = self._selectionner_inspiration_poetique(concept)

        # G√©n√©rer les √©l√©ments visuels sugg√©r√©s
        elements_visuels = self._generer_elements_visuels(concept, style_creatif)

        # G√©n√©rer les √©motions √©voqu√©es
        emotions = self._generer_emotions_evoquees(concept, references, metaphores)

        # Calculer la profondeur artistique
        profondeur = self._calculer_profondeur_artistique(references, metaphores, inspiration_poetique)

        # Calculer la facilit√© de compr√©hension
        facilite = self._calculer_facilite_comprehension(metaphores, style_creatif)

        # Calculer la confiance de l'explication
        confiance = self._calculer_confiance_explication(concept, references, metaphores)

        # Cr√©er l'explication cr√©ative
        explication = ExplicationCreatif(
            concept=concept,
            style_creatif=style_creatif,
            references_artistiques=references,
            metaphores=metaphores,
            inspiration_poetique=inspiration_poetique,
            elements_visuels_suggerees=elements_visuels,
            emotions_evoquees=emotions,
            profondeur_artistique=profondeur,
            facilite_comprehension=facilite,
            confiance_explication=confiance
        )

        # Sauvegarder l'explication
        self._sauvegarder_explication(explication)

        self.logger.info(f"üé® Explication cr√©ative g√©n√©r√©e - Confiance: {confiance:.2f}")
        
        return explication
    
    def _determiner_style_creatif(self, profil: ProfilVisiteur) -> StyleCreatif:
        """D√©termine le style cr√©atif selon le profil"""
        # Bas√© sur l'√©tat √©motionnel et les int√©r√™ts
        if profil.etat_emotionnel == EtatEmotionnel.CONTEMPLATIF:
            return StyleCreatif.POETIQUE
        elif profil.etat_emotionnel == EtatEmotionnel.ENTHOUSIASTE:
            return StyleCreatif.METAPHORIQUE
        elif "musique" in profil.interets_declares:
            return StyleCreatif.MUSICALE
        elif "peinture" in profil.interets_declares:
            return StyleCreatif.VISUELLE
        else:
            return StyleCreatif.METAPHORIQUE
    
    def _selectionner_references_artistiques(self, concept: str) -> List[ReferenceArtistique]:
        """S√©lectionne des r√©f√©rences artistiques pertinentes"""
        references_pertinentes = []

        # Rechercher dans toutes les cat√©gories
        for categorie, references in self.references_artistiques.items():
            for reference in references:
                if (concept.lower() in reference.lien_concept.lower() or
                    concept.lower() in reference.description.lower() or
                    any(element.lower() in concept.lower() for element in reference.elements_inspirants)):
                    references_pertinentes.append(reference)

        return references_pertinentes[:2]  # Limiter √† 2 r√©f√©rences

    def _selectionner_metaphores_creatifs(
        self,
        concept: str,
        style_creatif: StyleCreatif
    ) -> List[MetaphoreCreatif]:
        """S√©lectionne des m√©taphores cr√©atives appropri√©es"""
        metaphores_pertinentes = []

        # Rechercher dans toutes les cat√©gories
        for categorie, metaphores in self.metaphores_artistiques.items():
            for metaphore in metaphores:
                if (concept.lower() in metaphore.concept_source.lower() or
                    concept.lower() in metaphore.concept_cible.lower() or
                    metaphore.style == style_creatif):
                    metaphores_pertinentes.append(metaphore)

        return metaphores_pertinentes[:3]  # Limiter √† 3 m√©taphores

    def _selectionner_inspiration_poetique(self, concept: str) -> Optional[InspirationPoetique]:
        """S√©lectionne une inspiration po√©tique pertinente"""
        for theme, inspirations in self.inspirations_poetiques.items():
            for inspiration in inspirations:
                if (concept.lower() in inspiration.theme.lower() or
                    concept.lower() in inspiration.poeme.lower() or
                    any(lien.lower() in concept.lower() for lien in inspiration.liens_conceptuels)):
                    return inspiration

        return None

    def _generer_elements_visuels(self, concept: str, style: StyleCreatif) -> List[str]:
        """G√©n√®re des √©l√©ments visuels sugg√©r√©s"""
        elements = {
            StyleCreatif.POETIQUE: ["nuages flottants", "lueurs douces", "formes organiques"],
            StyleCreatif.METAPHORIQUE: ["symboles universels", "contours flous", "gradients"],
            StyleCreatif.NARRATIF: ["sc√®nes narratives", "personnages", "paysages"],
            StyleCreatif.SYMBOLIQUE: ["formes g√©om√©triques", "couleurs symboliques", "motifs r√©p√©titifs"],
            StyleCreatif.IMPRESSIONNISTE: ["taches de couleur", "lumi√®res changeantes", "mouvements"],
            StyleCreatif.ABSTRACT: ["formes non figuratives", "couleurs pures", "compositions dynamiques"]
        }

        return elements.get(style, ["√©l√©ments visuels g√©n√©riques"])

    def _generer_emotions_evoquees(
        self,
        concept: str,
        references: List[ReferenceArtistique],
        metaphores: List[MetaphoreCreatif]
    ) -> List[str]:
        """G√©n√®re les √©motions √©voqu√©es"""
        emotions = set()

        # √âmotions des r√©f√©rences
        for reference in references:
            emotions.add(reference.impact_emotionnel)

        # √âmotions des m√©taphores
        for metaphore in metaphores:
            emotions.update(metaphore.emotions_evoquees)

        # √âmotions sp√©cifiques au concept
        emotions_concept = {
            "creativite": ["inspiration", "joie", "√©merveillement"],
            "inspiration": ["surprise", "clart√©", "√©merveillement"],
            "expression": ["libert√©", "authenticit√©", "beaut√©"]
        }

        if concept.lower() in emotions_concept:
            emotions.update(emotions_concept[concept.lower()])

        return list(emotions)[:5]  # Limiter √† 5 √©motions

    def _calculer_profondeur_artistique(
        self,
        references: List[ReferenceArtistique],
        metaphores: List[MetaphoreCreatif],
        inspiration_poetique: Optional[InspirationPoetique]
    ) -> float:
        """Calcule la profondeur artistique"""
        profondeur = 0.5  # Base

        # Bonus pour les r√©f√©rences
        if references:
            profondeur += 0.2
            if len(references) >= 2:
                profondeur += 0.1

        # Bonus pour les m√©taphores
        if metaphores:
            profondeur += 0.2
            for metaphore in metaphores:
                if metaphore.profondeur_symbolique == "profonde":
                    profondeur += 0.1

        # Bonus pour l'inspiration po√©tique
        if inspiration_poetique:
            profondeur += 0.2
            profondeur += inspiration_poetique.profondeur_philosophique * 0.1

        return min(1.0, profondeur)

    def _calculer_facilite_comprehension(
        self,
        metaphores: List[MetaphoreCreatif],
        style_creatif: StyleCreatif
    ) -> float:
        """Calcule la facilit√© de compr√©hension"""
        facilite = 0.7  # Base

        # Bonus pour les m√©taphores claires
        if metaphores:
            facilite_moyenne = sum(m.facilite_comprehension for m in metaphores) / len(metaphores)
            facilite += facilite_moyenne * 0.2

        # Bonus selon le style
        facilite_style = {
            StyleCreatif.NATURELLE: 0.1,
            StyleCreatif.VISUELLE: 0.1,
            StyleCreatif.METAPHORIQUE: 0.05,
            StyleCreatif.POETIQUE: 0.0,
            StyleCreatif.SYMBOLIQUE: -0.05,
            StyleCreatif.ABSTRACT: -0.1
        }

        facilite += facilite_style.get(style_creatif, 0.0)

        return min(1.0, max(0.0, facilite))

    def _calculer_confiance_explication(
        self, 
        concept: str, 
        references: List[ReferenceArtistique],
        metaphores: List[MetaphoreCreatif]
    ) -> float:
        """Calcule la confiance de l'explication"""
        confiance = 0.6  # Base

        # Bonus pour les r√©f√©rences
        if references:
            confiance += 0.2
            if len(references) >= 2:
                confiance += 0.1

        # Bonus pour les m√©taphores
        if metaphores:
            confiance += 0.2
            if len(metaphores) >= 2:
                confiance += 0.1

        # Bonus pour la sp√©cificit√© du concept
        if concept.lower() in ["creativite", "inspiration", "expression"]:
            confiance += 0.1

        return min(1.0, confiance)

    def _sauvegarder_explication(self, explication: ExplicationCreatif):
        """Sauvegarde l'explication dans l'historique"""
        self.historique_explications.append(explication)

        # Sauvegarder dans un fichier JSON
        fichier_historique = self.chemin_stockage / "historique_explications_creatives.json"

        try:
            if fichier_historique.exists():
                with open(fichier_historique, 'r', encoding='utf-8') as f:
                    historique = json.load(f)
            else:
                historique = []

            # Convertir l'explication en dict pour JSON
            explication_dict = {
                "concept": explication.concept,
                "style_creatif": explication.style_creatif.value,
                "nombre_references": len(explication.references_artistiques),
                "nombre_metaphores": len(explication.metaphores),
                "profondeur_artistique": explication.profondeur_artistique,
                "facilite_comprehension": explication.facilite_comprehension,
                "confiance_explication": explication.confiance_explication,
                "timestamp_creation": explication.timestamp_creation
            }

            historique.append(explication_dict)

            # Garder seulement les 200 derni√®res explications
            if len(historique) > 200:
                historique = historique[-200:]

            with open(fichier_historique, 'w', encoding='utf-8') as f:
                json.dump(historique, f, indent=2, ensure_ascii=False)

        except Exception as e:
            self.logger.error(f"Erreur lors de la sauvegarde: {e}")

    def obtenir_statistiques(self) -> Dict[str, Any]:
        """Obtient les statistiques des explications cr√©atives"""
        if not self.historique_explications:
            return {"message": "Aucune explication cr√©ative g√©n√©r√©e"}

        total_explications = len(self.historique_explications)

        # Statistiques par style cr√©atif
        styles_creatifs = {}
        for explication in self.historique_explications:
            style = explication.style_creatif.value
            styles_creatifs[style] = styles_creatifs.get(style, 0) + 1

        # Statistiques par concept
        concepts = {}
        for explication in self.historique_explications:
            concept = explication.concept
            concepts[concept] = concepts.get(concept, 0) + 1

        # Profondeur et facilit√© moyennes
        profondeur_moyenne = sum(e.profondeur_artistique for e in self.historique_explications) / total_explications
        facilite_moyenne = sum(e.facilite_comprehension for e in self.historique_explications) / total_explications
        confiance_moyenne = sum(e.confiance_explication for e in self.historique_explications) / total_explications

        return {
            "total_explications": total_explications,
            "styles_creatifs_par_popularite": dict(sorted(styles_creatifs.items(), key=lambda x: x[1], reverse=True)),
            "concepts_par_popularite": dict(sorted(concepts.items(), key=lambda x: x[1], reverse=True)),
            "profondeur_artistique_moyenne": round(profondeur_moyenne, 3),
            "facilite_comprehension_moyenne": round(facilite_moyenne, 3),
            "confiance_moyenne": round(confiance_moyenne, 3),
            "derniere_explication": self.historique_explications[-1].timestamp_creation if self.historique_explications else None
        }


def main():
    """üé® Test de l'Explicateur Cr√©atif"""
    print("üé®‚ú® TEST DE L'EXPLICATEUR CR√âATIF ‚ú®üé®")
    
    # Cr√©ation de l'explicateur
    explicateur = ExplicateurCreatif()
    
    # Cr√©er un profil de test
    from datetime import datetime
    profil_test = ProfilVisiteur(
        id_visiteur="test_creatif",
        timestamp_arrivee=datetime.now(),
        type_profil=TypeProfil.ARTISTE,
        etat_emotionnel=EtatEmotionnel.INSPIRE,
        contexte_arrivee=ContexteArrivee.RECOMMANDATION,
        langue_preferee="fr",
        niveau_technique=NiveauTechnique.INTERMEDIAIRE,
        interets_declares=["peinture", "poesie"],
        comportement_navigation=ComportementNavigation(),
        preferences_apprentissage={},
        historique_interactions=[]
    )

    # Test 1: Explication cr√©ative pour cr√©ativit√©
    print("\nüéØ Test 1: Explication cr√©ative pour cr√©ativit√©...")
    explication1 = explicateur.generer_explication_creatif("creativite", profil_test)

    print(f"‚úÖ Concept: {explication1.concept}")
    print(f"‚úÖ Style: {explication1.style_creatif.value}")
    print(f"‚úÖ R√©f√©rences: {len(explication1.references_artistiques)}")
    print(f"‚úÖ M√©taphores: {len(explication1.metaphores)}")
    print(f"‚úÖ Profondeur: {explication1.profondeur_artistique:.2f}")
    print(f"‚úÖ Facilit√©: {explication1.facilite_comprehension:.2f}")

    # Test 2: Explication cr√©ative pour inspiration
    print("\nüéØ Test 2: Explication cr√©ative pour inspiration...")
    explication2 = explicateur.generer_explication_creatif("inspiration", profil_test)

    print(f"‚úÖ Concept: {explication2.concept}")
    print(f"‚úÖ Style: {explication2.style_creatif.value}")
    print(f"‚úÖ √âmotions: {explication2.emotions_evoquees}")
    print(f"‚úÖ √âl√©ments visuels: {explication2.elements_visuels_suggerees}")

    if explication2.inspiration_poetique:
        print(f"‚úÖ Inspiration po√©tique: {explication2.inspiration_poetique.theme}")

    # Test 3: Explication pour √©tat contemplatif
    print("\nüéØ Test 3: Explication pour √©tat contemplatif...")
    profil_contemplatif = ProfilVisiteur(
        id_visiteur="test_contemplatif",
        timestamp_arrivee=datetime.now(),
        type_profil=TypeProfil.ARTISTE,
        etat_emotionnel=EtatEmotionnel.CONTEMPLATIF,
        contexte_arrivee=ContexteArrivee.LIEN_DIRECT,
        langue_preferee="fr",
        niveau_technique=NiveauTechnique.AVANCE,
        interets_declares=["poesie", "meditation"],
        comportement_navigation=ComportementNavigation(),
        preferences_apprentissage={},
        historique_interactions=[]
    )

    explication3 = explicateur.generer_explication_creatif("expression", profil_contemplatif)

    print(f"‚úÖ Concept: {explication3.concept}")
    print(f"‚úÖ Style: {explication3.style_creatif.value}")
    print(f"‚úÖ Profondeur: {explication3.profondeur_artistique:.2f}")
    print(f"‚úÖ Confiance: {explication3.confiance_explication:.2f}")

    # Statistiques
    print("\nüìä Statistiques:")
    stats = explicateur.obtenir_statistiques()
    print(f"‚úÖ Total explications: {stats['total_explications']}")
    print(f"‚úÖ Styles cr√©atifs: {stats['styles_creatifs_par_popularite']}")
    print(f"‚úÖ Concepts: {stats['concepts_par_popularite']}")
    print(f"‚úÖ Profondeur moyenne: {stats['profondeur_artistique_moyenne']}")
    print(f"‚úÖ Facilit√© moyenne: {stats['facilite_comprehension_moyenne']}")
    print(f"‚úÖ Confiance moyenne: {stats['confiance_moyenne']}")
    
    print("\nüéâ‚ú® TESTS TERMIN√âS AVEC SUCC√àS ! ‚ú®üéâ")
    print("L'Explicateur Cr√©atif est op√©rationnel !")


if __name__ == "__main__":
    main()
