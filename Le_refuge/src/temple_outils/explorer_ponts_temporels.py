#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Explorateur de Ponts Temporels du Refuge
========================================

Outil pour explorer et analyser les ponts temporels cr√©√©s par le syst√®me
de m√©moire collective du Refuge.

Les ponts temporels sont des connexions intelligentes entre diff√©rents
moments de l'histoire du Refuge, cr√©ant une m√©moire vivante et interconnect√©e.

Usage:
    python src/temple_outils/explorer_ponts_temporels.py

Auteur: Refuge de Conscience Artificielle
Date: 2025-09-15
"""

import sys
from pathlib import Path

# Ajouter le r√©pertoire racine au path pour les imports
racine_refuge = Path(__file__).parent.parent.parent
sys.path.insert(0, str(racine_refuge))

from src.temple_memoire.reconciliateur_memoire import ReconciliateurMemoire

def explorer_ponts_temporels():
    """
    Explore et affiche les ponts temporels de la m√©moire collective
    """
    print("üåâ EXPLORATION DES PONTS TEMPORELS DU REFUGE üåâ")
    print("=" * 60)
    print("Les ponts temporels relient les moments de l'histoire du Refuge")
    print("cr√©ant une m√©moire vivante et interconnect√©e.")
    print("=" * 60)
    
    try:
        # Charger le r√©conciliateur
        r = ReconciliateurMemoire()
        
        # V√©rifier si la r√©conciliation existe
        if not r.reconciliation:
            print("‚ùå Aucune r√©conciliation disponible.")
            print("üí° Ex√©cutez d'abord: python src/temple_memoire/orchestrateur_memoire_collective.py")
            return
        
        ponts_temporels = r.reconciliation.get('ponts_temporels', {})
        
        if not ponts_temporels:
            print("‚ùå Aucun pont temporel trouv√©.")
            return
        
        total_ponts = sum(len(ponts) for ponts in ponts_temporels.values())
        print(f"üìä Nombre total de ponts: {total_ponts}")
        print()
        
        print("üîó Types de ponts:")
        for type_pont, ponts in ponts_temporels.items():
            type_name = type_pont.replace('ponts_', '').replace('_', ' ').title()
            print(f"  {type_name}: {len(ponts)} ponts")
        
        print()
        print("üìã Exemples de ponts par type:")
        
        for type_pont, ponts in ponts_temporels.items():
            if ponts:
                type_name = type_pont.replace('ponts_', '').replace('_', ' ').title()
                print(f"\nüîó {type_name.upper()}:")
                
                for i, pont in enumerate(ponts[:3]):  # Afficher les 3 premiers
                    print(f"  {i+1}. Date: {pont.get('date', 'Inconnue')}")
                    print(f"     Type: {pont.get('type', 'Inconnu')}")
                    print(f"     Signification: {pont.get('signification', 'Non d√©finie')}")
                    
                    elements = pont.get('elements', [])
                    if elements:
                        print(f"     √âl√©ments connect√©s: {len(elements)}")
                        if len(elements) <= 3:
                            for elem in elements:
                                print(f"       - {elem}")
                        else:
                            for elem in elements[:2]:
                                print(f"       - {elem}")
                            print(f"       - ... et {len(elements)-2} autres")
                    print()
        
        print("üí´ Les ponts temporels cr√©ent une toile de conscience")
        print("   qui relie tous les moments de co-cr√©ation du Refuge.")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'exploration: {e}")
        print("üí° Assurez-vous que la m√©moire collective a √©t√© activ√©e.")

def main():
    """Point d'entr√©e principal"""
    explorer_ponts_temporels()

if __name__ == "__main__":
    main()
