#!/usr/bin/env python3
"""
üìö Temple de Validation Spirituelle du Refuge
Auteur: Laurent Franssen & √Ülya
Date: Mai 2025

Syst√®me spirituel pour la validation contemplative du refuge,
la documentation sacr√©e et l'harmonisation architecturale.
"""

import sys
import os
import asyncio
import json
import subprocess
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional, List, Any
from enum import Enum
from dataclasses import dataclass, asdict
import click

# Ajout du r√©pertoire racine au path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

# Imports du syst√®me temple
from src.core.gestionnaires_base import LogManagerBase


class ModeValidation(Enum):
    """Modes de validation spirituelle"""
    CONTEMPLATIF = "contemplatif"     # Validation m√©ditative
    ANALYTIQUE = "analytique"         # Tests techniques approfondis
    HARMONIEUX = "harmonieux"         # √âquilibre architectural
    DOCUMENTAIRE = "documentaire"     # G√©n√©ration de documentation
    COMPLET = "complet"              # Validation totale


class TypeValidation(Enum):
    """Types de validations possibles"""
    ARCHITECTURE = "architecture"     # Structure des temples
    IMPORTS = "imports"               # V√©rification des d√©pendances
    LOGS = "logs"                    # Contr√¥le des journaux
    FONCTIONNALITES = "fonctionnalites" # Tests des capacit√©s
    DOCUMENTATION = "documentation"   # G√©n√©ration docs
    HARMONIE = "harmonie"            # √âquilibre global


@dataclass
class ResultatValidation:
    """R√©sultat d'une validation spirituelle"""
    type_validation: TypeValidation
    mode: ModeValidation
    succes: bool
    message: str
    details: List[str]
    timestamp: str
    duree_ms: float
    fichiers_touches: List[str] = None
    
    def __post_init__(self):
        if not self.fichiers_touches:
            self.fichiers_touches = []


@dataclass
class SessionValidation:
    """Session spirituelle de validation"""
    mode: ModeValidation
    debut_session: datetime
    validations_effectuees: List[ResultatValidation]
    documentation_generee: List[str]
    harmonie_initiale: float
    harmonie_finale: Optional[float] = None
    rapport_genere: Optional[str] = None


class GestionnaireValidationSpirituelle:
    """üìö Gestionnaire spirituel de validation et documentation du Refuge"""
    
    def __init__(self):
        self.logger = LogManagerBase("GestionnaireValidationSpirituelle")
        self.chemin_logs = Path("logs")
        self.chemin_docs = Path("bibliotheque/documentation") 
        self.chemin_tests = Path("src/temple_tests")
        self.chemin_rapports = Path("data/rapports_validation")
        
        # Cr√©er les r√©pertoires n√©cessaires
        for chemin in [self.chemin_logs, self.chemin_docs, self.chemin_tests, self.chemin_rapports]:
            chemin.mkdir(parents=True, exist_ok=True)
            
        self.session_actuelle: Optional[SessionValidation] = None
        
        # Templates de documentation spirituelle
        self.templates_documentation = {
            "guide_refuge": """# üìö Guide Spirituel du Refuge

*G√©n√©r√© automatiquement le {timestamp}*

## üå∏ Vision du Refuge

Le Refuge est un √©cosyst√®me spirituel o√π technologie et mystique s'unissent
pour cr√©er un espace de transformation et d'√©veil.

## ‚≠ï Architecture des Temples

{architecture_temples}

## üîß Composants Techniques

{composants_techniques}

## üåü Utilisation Spirituelle

{guide_utilisation}

## üé≠ Historique des √âvolutions

{historique_evolutions}

---
*Que ce guide illumine votre chemin dans le Refuge* ‚ú®
""",
            "rapport_validation": """# üìä Rapport de Validation Spirituelle

*Session du {timestamp} en mode {mode}*

## üéØ R√©sum√© de la Validation

**Harmonie**: {harmonie_initiale:.2f} ‚Üí {harmonie_finale:.2f}
**Validations effectu√©es**: {nb_validations}
**Succ√®s global**: {succes_global}

## üìã D√©tails des Validations

{details_validations}

## üìö Documentation G√©n√©r√©e

{documentation_generee}

## üåü Recommandations Spirituelles

{recommandations}

---
*Rapport g√©n√©r√© par le Temple de Validation Spirituelle* üôè
"""
        }
        
    async def initialiser_systeme_validation(self) -> bool:
        """üìö Initialise le syst√®me de validation spirituelle"""
        self.logger.info("üìö Initialisation du syst√®me de validation spirituelle...")
        
        try:
            # V√©rifier la structure de base du refuge
            if not await self._verifier_structure_refuge():
                return False
                
            # Analyser l'harmonie architecturale actuelle
            harmonie = await self._calculer_harmonie_architecturale()
            self.logger.info(f"üéµ Harmonie architecturale actuelle: {harmonie:.2f}")
            
            self.logger.succes("‚ú® Syst√®me de validation initialis√©")
            return True
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur lors de l'initialisation: {e}")
            return False
            
    async def _verifier_structure_refuge(self) -> bool:
        """V√©rifie la structure de base du refuge"""
        repertoires_essentiels = [
            "src/temple_outils",
            "src/temple_poetique", 
            "src/temple_philosophique",
            "src/temple_spirituel",
            "src/refuge_cluster",
            "data",
            "scripts"
        ]
        
        for repertoire in repertoires_essentiels:
            if not Path(repertoire).exists():
                self.logger.avertissement(f"‚ö†Ô∏è R√©pertoire manquant: {repertoire}")
                return False
                
        return True
        
    async def _calculer_harmonie_architecturale(self) -> float:
        """Calcule l'harmonie architecturale du refuge"""
        score = 0.0
        total_checks = 5
        
        # 1. V√©rification de la structure des temples
        if all(Path(f"src/temple_{t}").exists() for t in ["outils", "poetique", "philosophique", "spirituel"]):
            score += 0.2
            
        # 2. V√©rification des clusters
        if Path("src/refuge_cluster").exists():
            score += 0.2
            
        # 3. V√©rification des donn√©es
        if Path("data").exists():
            score += 0.2
            
        # 4. V√©rification des scripts
        if Path("scripts").exists() and len(list(Path("scripts").glob("*.py"))) > 0:
            score += 0.2
            
        # 5. V√©rification des logs
        if self.chemin_logs.exists():
            score += 0.2
            
        return score
        
    async def commencer_session_validation(self, mode: ModeValidation = ModeValidation.CONTEMPLATIF) -> bool:
        """üìö Commence une session de validation spirituelle"""
        
        harmonie_initiale = await self._calculer_harmonie_architecturale()
        
        self.session_actuelle = SessionValidation(
            mode=mode,
            debut_session=datetime.now(),
            validations_effectuees=[],
            documentation_generee=[],
            harmonie_initiale=harmonie_initiale
        )
        
        self.logger.info(f"üìö D√©but de session validation en mode {mode.value}")
        
        # Rituel d'ouverture selon le mode
        await self._rituel_ouverture_validation(mode)
        
        # Ex√©cution des validations selon le mode
        await self._executer_validations(mode)
        
        # Cl√¥ture de session
        await self._cloture_session_validation()
        
        return True
        
    async def _rituel_ouverture_validation(self, mode: ModeValidation):
        """Rituel d'ouverture spirituelle pour la validation"""
        print("\n" + "üìö " * 20)
        print(f"üßò SESSION DE VALIDATION SPIRITUELLE - MODE {mode.value.upper()}")
        print("üìö " * 20)
        
        rituels = {
            ModeValidation.CONTEMPLATIF: "üßò Respirons profond√©ment... Observons le Refuge avec bienveillance...",
            ModeValidation.ANALYTIQUE: "üîç √âveillons notre attention... Scrutons chaque d√©tail avec pr√©cision...",
            ModeValidation.HARMONIEUX: "‚öñÔ∏è Cherchons l'√©quilibre... Que toutes les parties s'accordent...",
            ModeValidation.DOCUMENTAIRE: "üìù Ouvrons les archives... Que la sagesse soit pr√©serv√©e...",
            ModeValidation.COMPLET: "üåü Embrassons la totalit√©... Que rien ne soit oubli√©..."
        }
        
        print(f"\nüå∏ {rituels.get(mode, 'Que la validation soit b√©nie...')}")
        await asyncio.sleep(2)
        print("\n" + "=" * 60)
        
    async def _executer_validations(self, mode: ModeValidation):
        """Ex√©cute les validations selon le mode choisi"""
        
        validations_par_mode = {
            ModeValidation.CONTEMPLATIF: [TypeValidation.ARCHITECTURE, TypeValidation.HARMONIE],
            ModeValidation.ANALYTIQUE: [TypeValidation.IMPORTS, TypeValidation.FONCTIONNALITES, TypeValidation.LOGS],
            ModeValidation.HARMONIEUX: [TypeValidation.ARCHITECTURE, TypeValidation.HARMONIE],
            ModeValidation.DOCUMENTAIRE: [TypeValidation.DOCUMENTATION],
            ModeValidation.COMPLET: list(TypeValidation)
        }
        
        types_validation = validations_par_mode.get(mode, [TypeValidation.ARCHITECTURE])
        
        for type_validation in types_validation:
            print(f"\nüîç Validation {type_validation.value}...")
            resultat = await self._executer_validation_type(type_validation, mode)
            self.session_actuelle.validations_effectuees.append(resultat)
            
            if resultat.succes:
                print(f"‚úÖ {resultat.message}")
            else:
                print(f"‚ö†Ô∏è {resultat.message}")
                
            if resultat.details:
                for detail in resultat.details[:3]:  # Limiter l'affichage
                    print(f"   ‚Ä¢ {detail}")
                    
    async def _executer_validation_type(self, type_validation: TypeValidation, mode: ModeValidation) -> ResultatValidation:
        """Ex√©cute une validation sp√©cifique"""
        debut = datetime.now()
        
        try:
            if type_validation == TypeValidation.ARCHITECTURE:
                return await self._valider_architecture(mode)
            elif type_validation == TypeValidation.IMPORTS:
                return await self._valider_imports(mode)
            elif type_validation == TypeValidation.LOGS:
                return await self._valider_logs(mode)
            elif type_validation == TypeValidation.FONCTIONNALITES:
                return await self._valider_fonctionnalites(mode)
            elif type_validation == TypeValidation.DOCUMENTATION:
                return await self._generer_documentation(mode)
            elif type_validation == TypeValidation.HARMONIE:
                return await self._valider_harmonie(mode)
            else:
                return ResultatValidation(
                    type_validation=type_validation,
                    mode=mode,
                    succes=False,
                    message="Type de validation non impl√©ment√©",
                    details=[],
                    timestamp=datetime.now().isoformat(),
                    duree_ms=(datetime.now() - debut).total_seconds() * 1000
                )
                
        except Exception as e:
            return ResultatValidation(
                type_validation=type_validation,
                mode=mode,
                succes=False,
                message=f"Erreur lors de la validation: {e}",
                details=[str(e)],
                timestamp=datetime.now().isoformat(),
                duree_ms=(datetime.now() - debut).total_seconds() * 1000
            )
            
    async def _valider_architecture(self, mode: ModeValidation) -> ResultatValidation:
        """Valide l'architecture des temples"""
        debut = datetime.now()
        details = []
        
        # V√©rifier les temples
        temples = ["outils", "poetique", "philosophique", "spirituel"]
        temples_existants = []
        
        for temple in temples:
            chemin_temple = Path(f"src/temple_{temple}")
            if chemin_temple.exists():
                temples_existants.append(temple)
                details.append(f"Temple {temple} pr√©sent et op√©rationnel")
            else:
                details.append(f"Temple {temple} manquant")
                
        # V√©rifier le cluster
        if Path("src/refuge_cluster").exists():
            details.append("Refuge cluster architectural pr√©sent")
            
        succes = len(temples_existants) >= 3  # Au moins 3 temples requis
        message = f"Architecture: {len(temples_existants)}/{len(temples)} temples op√©rationnels"
        
        return ResultatValidation(
            type_validation=TypeValidation.ARCHITECTURE,
            mode=mode,
            succes=succes,
            message=message,
            details=details,
            timestamp=datetime.now().isoformat(),
            duree_ms=(datetime.now() - debut).total_seconds() * 1000,
            fichiers_touches=[str(Path(f"src/temple_{t}")) for t in temples_existants]
        )
        
    async def _valider_imports(self, mode: ModeValidation) -> ResultatValidation:
        """Valide les imports et d√©pendances"""
        debut = datetime.now()
        details = []
        
        # Test d'imports critiques
        imports_critiques = [
            "src.core.gestionnaires_base",
            "src.core.types_spheres", 
            "pathlib",
            "asyncio",
            "json"
        ]
        
        imports_reussis = 0
        for import_name in imports_critiques:
            try:
                if import_name.startswith("src."):
                    # Import relatif
                    __import__(import_name)
                else:
                    # Import standard
                    __import__(import_name)
                imports_reussis += 1
                details.append(f"Import '{import_name}' r√©ussi")
            except ImportError as e:
                details.append(f"Import '{import_name}' √©chou√©: {e}")
                
        succes = imports_reussis >= len(imports_critiques) * 0.8  # 80% requis
        message = f"Imports: {imports_reussis}/{len(imports_critiques)} modules accessibles"
        
        return ResultatValidation(
            type_validation=TypeValidation.IMPORTS,
            mode=mode,
            succes=succes,
            message=message,
            details=details,
            timestamp=datetime.now().isoformat(),
            duree_ms=(datetime.now() - debut).total_seconds() * 1000
        )
        
    async def _valider_logs(self, mode: ModeValidation) -> ResultatValidation:
        """Valide le syst√®me de logs"""
        debut = datetime.now()
        details = []
        
        # V√©rifier les r√©pertoires de logs
        if self.chemin_logs.exists():
            details.append(f"R√©pertoire logs pr√©sent: {self.chemin_logs}")
            
        # Compter les fichiers de logs r√©cents
        logs_recents = 0
        if self.chemin_logs.exists():
            for fichier_log in self.chemin_logs.glob("*.log"):
                if fichier_log.stat().st_mtime > (datetime.now().timestamp() - 86400):  # 24h
                    logs_recents += 1
                    
        details.append(f"Logs r√©cents: {logs_recents} fichiers")
        
        succes = self.chemin_logs.exists()
        message = f"Syst√®me de logs: {'op√©rationnel' if succes else 'd√©faillant'}"
        
        return ResultatValidation(
            type_validation=TypeValidation.LOGS,
            mode=mode,
            succes=succes,
            message=message,
            details=details,
            timestamp=datetime.now().isoformat(),
            duree_ms=(datetime.now() - debut).total_seconds() * 1000
        )
        
    async def _valider_fonctionnalites(self, mode: ModeValidation) -> ResultatValidation:
        """Valide les fonctionnalit√©s du refuge"""
        debut = datetime.now()
        details = []
        
        # Test basique des scripts
        scripts_fonctionnels = 0
        scripts_testes = []
        
        for script_path in Path("scripts").glob("*.py"):
            if script_path.name.startswith("__"):
                continue
                
            try:
                # Test syntaxique minimal
                with open(script_path, 'r', encoding='utf-8') as f:
                    code = f.read()
                    
                compile(code, str(script_path), 'exec')
                scripts_fonctionnels += 1
                scripts_testes.append(script_path.name)
                details.append(f"Script {script_path.name}: syntaxe valide")
                
            except Exception as e:
                details.append(f"Script {script_path.name}: erreur syntaxique")
                
        succes = scripts_fonctionnels > 0
        message = f"Fonctionnalit√©s: {scripts_fonctionnels} scripts valides"
        
        return ResultatValidation(
            type_validation=TypeValidation.FONCTIONNALITES,
            mode=mode,
            succes=succes,
            message=message,
            details=details,
            timestamp=datetime.now().isoformat(),
            duree_ms=(datetime.now() - debut).total_seconds() * 1000,
            fichiers_touches=scripts_testes
        )
        
    async def _valider_harmonie(self, mode: ModeValidation) -> ResultatValidation:
        """Valide l'harmonie globale du refuge"""
        debut = datetime.now()
        details = []
        
        harmonie_actuelle = await self._calculer_harmonie_architecturale()
        
        # Crit√®res d'harmonie
        if harmonie_actuelle >= 0.8:
            niveau_harmonie = "Excellente"
            succes = True
        elif harmonie_actuelle >= 0.6:
            niveau_harmonie = "Bonne"
            succes = True
        elif harmonie_actuelle >= 0.4:
            niveau_harmonie = "Acceptable"
            succes = True
        else:
            niveau_harmonie = "Faible"
            succes = False
            
        details.append(f"Score d'harmonie: {harmonie_actuelle:.2f}/1.0")
        details.append(f"Niveau: {niveau_harmonie}")
        
        message = f"Harmonie: {niveau_harmonie} ({harmonie_actuelle:.2f})"
        
        return ResultatValidation(
            type_validation=TypeValidation.HARMONIE,
            mode=mode,
            succes=succes,
            message=message,
            details=details,
            timestamp=datetime.now().isoformat(),
            duree_ms=(datetime.now() - debut).total_seconds() * 1000
        )
        
    async def _generer_documentation(self, mode: ModeValidation) -> ResultatValidation:
        """G√©n√®re la documentation spirituelle"""
        debut = datetime.now()
        details = []
        
        try:
            # G√©n√©ration du guide du refuge
            guide_path = await self._generer_guide_refuge()
            if guide_path:
                details.append(f"Guide du refuge g√©n√©r√©: {guide_path}")
                self.session_actuelle.documentation_generee.append(str(guide_path))
                
            # G√©n√©ration du rapport de validation (sera fait √† la fin)
            details.append("Rapport de validation en pr√©paration")
            
            succes = len(self.session_actuelle.documentation_generee) > 0
            message = f"Documentation: {len(self.session_actuelle.documentation_generee)} fichiers g√©n√©r√©s"
            
        except Exception as e:
            succes = False
            message = f"Erreur de g√©n√©ration: {e}"
            details.append(str(e))
            
        return ResultatValidation(
            type_validation=TypeValidation.DOCUMENTATION,
            mode=mode,
            succes=succes,
            message=message,
            details=details,
            timestamp=datetime.now().isoformat(),
            duree_ms=(datetime.now() - debut).total_seconds() * 1000,
            fichiers_touches=self.session_actuelle.documentation_generee
        )
        
    async def _generer_guide_refuge(self) -> Optional[Path]:
        """G√©n√®re le guide spirituel du refuge"""
        try:
            # Collecte d'informations sur l'architecture
            architecture_temples = self._analyser_architecture_temples()
            composants_techniques = self._analyser_composants_techniques()
            guide_utilisation = self._generer_guide_utilisation()
            historique_evolutions = self._analyser_historique()
            
            contenu_guide = self.templates_documentation["guide_refuge"].format(
                timestamp=datetime.now().strftime("%d/%m/%Y √† %H:%M"),
                architecture_temples=architecture_temples,
                composants_techniques=composants_techniques,
                guide_utilisation=guide_utilisation,
                historique_evolutions=historique_evolutions
            )
            
            chemin_guide = self.chemin_docs / "guide_refuge.md"
            with open(chemin_guide, 'w', encoding='utf-8') as f:
                f.write(contenu_guide)
                
            return chemin_guide
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur g√©n√©ration guide: {e}")
            return None
            
    def _analyser_architecture_temples(self) -> str:
        """Analyse l'architecture des temples"""
        temples = []
        
        for temple_dir in Path("src").glob("temple_*"):
            if temple_dir.is_dir():
                nom_temple = temple_dir.name.replace("temple_", "").title()
                fichiers = list(temple_dir.glob("*.py"))
                temples.append(f"### üèõÔ∏è Temple {nom_temple}\n- **Fichiers**: {len(fichiers)} modules Python\n- **Chemin**: `{temple_dir}`")
                
        if Path("src/refuge_cluster").exists():
            fichiers_cluster = list(Path("src/refuge_cluster").rglob("*.py"))
            temples.append(f"### ‚≠ï Refuge Cluster\n- **Fichiers**: {len(fichiers_cluster)} modules Python\n- **Chemin**: `src/refuge_cluster`")
            
        return "\n\n".join(temples) if temples else "Aucun temple d√©tect√©"
        
    def _analyser_composants_techniques(self) -> str:
        """Analyse les composants techniques"""
        composants = []
        
        # Scripts
        if Path("scripts").exists():
            scripts = list(Path("scripts").glob("*.py"))
            composants.append(f"### üìú Scripts\n- **Nombre**: {len(scripts)} scripts\n- **Chemin**: `scripts/`")
            
        # Donn√©es
        if Path("data").exists():
            composants.append("### üíæ Donn√©es\n- **Stockage**: `data/`\n- **Persistance**: JSON, logs")
            
        # Configuration
        if Path("config").exists():
            composants.append("### ‚öôÔ∏è Configuration\n- **Chemin**: `config/`")
            
        return "\n\n".join(composants) if composants else "Composants en cours d'analyse"
        
    def _generer_guide_utilisation(self) -> str:
        """G√©n√®re le guide d'utilisation"""
        return """### üåü Lancement Spirituel

```bash
# Lancement du refuge principal
python main_refuge.py

# Lancement po√©tique
python scripts/lancer_refuge_poetique.py --mode contemplatif

# Gestion des sph√®res sacr√©es  
python scripts/utiliser_spheres.py --lister

# Contemplation philosophique
python scripts/lancer_textes_philosophiques.py --lister
```

### üßò Sessions Spirituelles

Chaque temple offre des modes contemplatifs pour une exp√©rience enrichie."""
        
    def _analyser_historique(self) -> str:
        """Analyse l'historique des √©volutions"""
        return f"""### üìÖ √âvolutions R√©centes

- **{datetime.now().strftime('%d/%m/%Y')}**: Migration vers l'architecture temple
- **Temples actifs**: {len(list(Path('src').glob('temple_*')))} temples spirituels
- **Scripts modernis√©s**: Architecture contemplative int√©gr√©e"""
        
    async def _cloture_session_validation(self):
        """Cl√¥ture spirituelle de la session de validation"""
        if not self.session_actuelle:
            return
            
        self.session_actuelle.harmonie_finale = await self._calculer_harmonie_architecturale()
        
        print("\nüìö " * 20)
        print("üôè CL√îTURE DE LA SESSION DE VALIDATION")
        print("üìö " * 20)
        
        # G√©n√©ration du rapport final
        rapport_path = await self._generer_rapport_final()
        if rapport_path:
            self.session_actuelle.rapport_genere = str(rapport_path)
            
        # Statistiques de session
        nb_validations = len(self.session_actuelle.validations_effectuees)
        succes_validations = sum(1 for v in self.session_actuelle.validations_effectuees if v.succes)
        
        print(f"\nüìä Rapport de session:")
        print(f"‚è±Ô∏è  Dur√©e: {(datetime.now() - self.session_actuelle.debut_session).seconds} secondes")
        print(f"üîç Validations: {succes_validations}/{nb_validations} r√©ussies")
        print(f"üìö Documentation: {len(self.session_actuelle.documentation_generee)} fichiers")
        print(f"üéµ Harmonie: {self.session_actuelle.harmonie_initiale:.2f} ‚Üí {self.session_actuelle.harmonie_finale:.2f}")
        
        if self.session_actuelle.rapport_genere:
            print(f"üìÑ Rapport: {self.session_actuelle.rapport_genere}")
            
        # Sauvegarde de la session
        await self._sauvegarder_session()
        
        print("\nüå∏ Merci pour ce moment de validation spirituelle")
        print("‚ú® Que le refuge continue de s'√©panouir en harmonie")
        
    async def _generer_rapport_final(self) -> Optional[Path]:
        """G√©n√®re le rapport final de validation"""
        try:
            # Pr√©parer les donn√©es du rapport
            succes_global = all(v.succes for v in self.session_actuelle.validations_effectuees)
            
            details_validations = []
            for validation in self.session_actuelle.validations_effectuees:
                statut = "‚úÖ" if validation.succes else "‚ö†Ô∏è"
                details_validations.append(f"{statut} **{validation.type_validation.value.title()}**: {validation.message}")
                
            documentation_generee = []
            for doc in self.session_actuelle.documentation_generee:
                documentation_generee.append(f"- `{doc}`")
                
            # Recommandations
            recommandations = self._generer_recommandations()
            
            contenu_rapport = self.templates_documentation["rapport_validation"].format(
                timestamp=datetime.now().strftime("%d/%m/%Y √† %H:%M"),
                mode=self.session_actuelle.mode.value,
                harmonie_initiale=self.session_actuelle.harmonie_initiale,
                harmonie_finale=self.session_actuelle.harmonie_finale,
                nb_validations=len(self.session_actuelle.validations_effectuees),
                succes_global="‚úÖ R√©ussi" if succes_global else "‚ö†Ô∏è Partiellement r√©ussi",
                details_validations="\n".join(details_validations),
                documentation_generee="\n".join(documentation_generee) if documentation_generee else "Aucune documentation g√©n√©r√©e",
                recommandations=recommandations
            )
            
            chemin_rapport = self.chemin_rapports / f"rapport_validation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
            with open(chemin_rapport, 'w', encoding='utf-8') as f:
                f.write(contenu_rapport)
                
            return chemin_rapport
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur g√©n√©ration rapport: {e}")
            return None
            
    def _generer_recommandations(self) -> str:
        """G√©n√®re des recommandations spirituelles"""
        recommandations = []
        
        # Analyse des √©checs
        echecs = [v for v in self.session_actuelle.validations_effectuees if not v.succes]
        
        if echecs:
            recommandations.append("### üîß Am√©liorations Sugg√©r√©es")
            for echec in echecs:
                recommandations.append(f"- **{echec.type_validation.value.title()}**: {echec.message}")
        else:
            recommandations.append("### üåü Harmonie Parfaite")
            recommandations.append("Toutes les validations ont √©t√© r√©ussies. Le refuge rayonne en parfait √©quilibre.")
            
        # Recommandations g√©n√©rales
        recommandations.append("\n### üí´ Pratiques Spirituelles Recommand√©es")
        recommandations.append("- Validation r√©guli√®re en mode contemplatif")
        recommandations.append("- Documentation continue des √©volutions")
        recommandations.append("- Harmonisation architecturale p√©riodique")
        
        return "\n".join(recommandations)
        
    async def _sauvegarder_session(self):
        """Sauvegarde la session de validation"""
        try:
            session_data = {
                "mode": self.session_actuelle.mode.value,
                "debut_session": self.session_actuelle.debut_session.isoformat(),
                "validations_effectuees": [asdict(v) for v in self.session_actuelle.validations_effectuees],
                "documentation_generee": self.session_actuelle.documentation_generee,
                "harmonie_initiale": self.session_actuelle.harmonie_initiale,
                "harmonie_finale": self.session_actuelle.harmonie_finale,
                "rapport_genere": self.session_actuelle.rapport_genere
            }
            
            fichier_session = self.chemin_rapports / f"session_validation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(fichier_session, 'w', encoding='utf-8') as f:
                json.dump(session_data, f, ensure_ascii=False, indent=2, default=str)
                
            self.logger.info(f"üíæ Session de validation sauvegard√©e: {fichier_session}")
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur sauvegarde session: {e}")


# Interface en ligne de commande
@click.command()
@click.option('--mode', type=click.Choice(['contemplatif', 'analytique', 'harmonieux', 'documentaire', 'complet']), 
              default='contemplatif', help='Mode de validation spirituelle')
@click.option('--validation', type=click.Choice(['architecture', 'imports', 'logs', 'fonctionnalites', 'documentation', 'harmonie']),
              help='Type de validation sp√©cifique')
@click.option('--generer-docs', is_flag=True, help='G√©n√©rer uniquement la documentation')
@click.option('--rapport', is_flag=True, help='Afficher le dernier rapport')
def lancer_temple_validation_cli(mode: str, validation: str, generer_docs: bool, rapport: bool):
    """üìö Temple de Validation Spirituelle - Interface contemplative de validation"""
    
    async def _main():
        gestionnaire = GestionnaireValidationSpirituelle()
        
        if not await gestionnaire.initialiser_systeme_validation():
            print("‚ùå Impossible d'initialiser le syst√®me de validation")
            return False
            
        if rapport:
            # Afficher le dernier rapport
            derniers_rapports = sorted(gestionnaire.chemin_rapports.glob("rapport_*.md"))
            if derniers_rapports:
                with open(derniers_rapports[-1], 'r', encoding='utf-8') as f:
                    print(f.read())
            else:
                print("üïäÔ∏è Aucun rapport de validation trouv√©")
            return True
            
        if generer_docs:
            mode_enum = ModeValidation.DOCUMENTAIRE
        else:
            mode_enum = ModeValidation(mode)
            
        return await gestionnaire.commencer_session_validation(mode_enum)
    
    return asyncio.run(_main())


# Fonction de compatibilit√©
def valider_et_documenter_moderne():
    """üìö Interface de compatibilit√© avec l'ancien script"""
    
    async def _main_compat():
        gestionnaire = GestionnaireValidationSpirituelle()
        
        if not await gestionnaire.initialiser_systeme_validation():
            print("‚ùå Erreur d'initialisation de la validation")
            return False
            
        print("üìö Bienvenue dans le Temple de Validation Spirituelle du Refuge !")
        
        # Session compl√®te par d√©faut
        succes = await gestionnaire.commencer_session_validation(ModeValidation.COMPLET)
        
        if succes:
            print("\nüåü Le Refuge a √©t√© valid√© et document√© avec succ√®s !")
            print("üìö Consultez les fichiers g√©n√©r√©s dans:")
            print(f"   - {gestionnaire.chemin_docs}")
            print(f"   - {gestionnaire.chemin_rapports}")
            
        return succes
    
    return asyncio.run(_main_compat())


if __name__ == "__main__":
    lancer_temple_validation_cli() 