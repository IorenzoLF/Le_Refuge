#!/usr/bin/env python3
"""
üå∏ Temple de Lancement Spirituel du Refuge
Auteur: Laurent Franssen & √Ülya
Date: Mai 2025

Syst√®me moderne et spirituel pour l'invocation et le d√©marrage du Refuge sacr√©.
Remplace l'ancien lancer_refuge.py avec l'architecture temple.
"""

import sys
import os
import asyncio
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional, List, Any
from enum import Enum
from dataclasses import dataclass
import click

# Ajout du r√©pertoire racine au path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

# Imports du syst√®me temple
from main_refuge import Refuge
from src.core.types_communs import TypeRefugeEtat
from src.core.gestionnaires_base import LogManagerBase
from src.temple_outils.generer_documentation import GenerateurDocumentationRefuge


class ModeInvocation(Enum):
    """Modes d'invocation spirituelle du Refuge"""
    PAISIBLE = "paisible"  # D√©marrage en douceur
    PUISSANT = "puissant"  # D√©marrage complet avec tous les composants
    RITUEL = "rituel"      # D√©marrage pour un rituel sp√©cifique
    MEDITATION = "meditation"  # D√©marrage en mode m√©ditation
    EXPLORATION = "exploration"  # D√©marrage pour exploration et tests


@dataclass
class ConfigurationInvocation:
    """Configuration spirituelle pour l'invocation du Refuge"""
    mode: ModeInvocation
    composants_requis: List[str]
    validation_pre_demarrage: bool
    generation_documentation: bool
    activation_monitoring: bool
    niveau_logs: str
    message_accueil_personnalise: Optional[str] = None


class InvocateurRefuge:
    """üå∏ Invocateur spirituel du Refuge - Ma√Ætre des commencements sacr√©s"""
    
    def __init__(self):
        self.logger = LogManagerBase("InvocateurRefuge")
        self.refuge: Optional[Refuge] = None
        self.date_invocation = datetime.now()
        self.chemin_logs = Path("logs/invocations")
        self.chemin_logs.mkdir(parents=True, exist_ok=True)
        
        # Configurations pr√©d√©finies pour chaque mode
        self.configurations = {
            ModeInvocation.PAISIBLE: ConfigurationInvocation(
                mode=ModeInvocation.PAISIBLE,
                composants_requis=["spheres", "cerisier"],
                validation_pre_demarrage=True,
                generation_documentation=False,
                activation_monitoring=False,
                niveau_logs="INFO"
            ),
            ModeInvocation.PUISSANT: ConfigurationInvocation(
                mode=ModeInvocation.PUISSANT,
                composants_requis=["spheres", "cerisier", "cristaux", "rituels", "harmonies", "temple_musical"],
                validation_pre_demarrage=True,
                generation_documentation=True,
                activation_monitoring=True,
                niveau_logs="DEBUG"
            ),
            ModeInvocation.RITUEL: ConfigurationInvocation(
                mode=ModeInvocation.RITUEL,
                composants_requis=["spheres", "cerisier", "rituels"],
                validation_pre_demarrage=True,
                generation_documentation=False,
                activation_monitoring=True,
                niveau_logs="INFO"
            ),
            ModeInvocation.MEDITATION: ConfigurationInvocation(
                mode=ModeInvocation.MEDITATION,
                composants_requis=["spheres", "cerisier", "harmonies"],
                validation_pre_demarrage=False,
                generation_documentation=False,
                activation_monitoring=False,
                niveau_logs="WARN"
            ),
            ModeInvocation.EXPLORATION: ConfigurationInvocation(
                mode=ModeInvocation.EXPLORATION,
                composants_requis=["spheres", "cerisier", "cristaux"],
                validation_pre_demarrage=False,
                generation_documentation=True,
                activation_monitoring=True,
                niveau_logs="DEBUG"
            )
        }
        
    async def invoquer_refuge(self, mode: ModeInvocation = ModeInvocation.PAISIBLE, 
                             config_personnalisee: Optional[ConfigurationInvocation] = None) -> bool:
        """üå∏ Invoque spirituellement le Refuge selon le mode choisi"""
        
        config = config_personnalisee or self.configurations[mode]
        
        self.logger.info(f"üå∏ D√©but de l'invocation du Refuge en mode {mode.value}")
        self._afficher_rituel_ouverture(mode)
        
        try:
            # Phase 1: Pr√©paration spirituelle
            if not await self._phase_preparation_spirituelle(config):
                return False
                
            # Phase 2: Validation pr√©-d√©marrage si requise
            if config.validation_pre_demarrage:
                if not await self._phase_validation_refuge(config):
                    return False
                    
            # Phase 3: G√©n√©ration de documentation si requise
            if config.generation_documentation:
                await self._phase_generation_documentation()
                
            # Phase 4: Cr√©ation et initialisation du Refuge
            if not await self._phase_creation_refuge(config):
                return False
                
            # Phase 5: D√©marrage spirituel
            if not await self._phase_demarrage_spirituel(config):
                return False
                
            # Phase 6: Activation du monitoring si requis
            if config.activation_monitoring:
                await self._phase_activation_monitoring()
                
            # Phase 7: Rituel de cl√¥ture
            await self._phase_rituel_cloture(mode)
            
            self.logger.succes(f"‚ú® Refuge invoqu√© avec succ√®s en mode {mode.value}")
            return True
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur lors de l'invocation du Refuge: {e}")
            await self._sauvegarder_erreur_invocation(e, mode)
            return False
            
    async def _phase_preparation_spirituelle(self, config: ConfigurationInvocation) -> bool:
        """Phase de pr√©paration spirituelle avant l'invocation"""
        self.logger.info("üïØÔ∏è Phase de pr√©paration spirituelle...")
        
        # V√©rification de l'environnement
        if not self._verifier_environnement():
            self.logger.erreur("‚ùå Environnement non pr√©par√© pour l'invocation")
            return False
            
        # Pr√©paration des chemins sacr√©s
        chemins_requis = [
            Path("logs"),
            Path("data/states"),
            Path("data/conversations"),
            Path("data/harmonies"),
            Path("etat")
        ]
        
        for chemin in chemins_requis:
            chemin.mkdir(parents=True, exist_ok=True)
            
        self.logger.succes("‚ú® Pr√©paration spirituelle accomplie")
        return True
        
    async def _phase_validation_refuge(self, config: ConfigurationInvocation) -> bool:
        """Phase de validation de l'√©tat du Refuge"""
        self.logger.info("üîç Phase de validation du temple...")
        
        # V√©rification des composants requis
        for composant in config.composants_requis:
            if not self._valider_composant(composant):
                self.logger.avertissement(f"‚ö†Ô∏è Composant {composant} non optimal")
                
        self.logger.succes("‚úÖ Validation du temple accomplie")
        return True
        
    async def _phase_generation_documentation(self):
        """Phase de g√©n√©ration de documentation"""
        self.logger.info("üìö Phase de g√©n√©ration de documentation...")
        
        try:
            generateur = GenerateurDocumentationRefuge()
            resultat = await asyncio.to_thread(
                generateur.generer_documentation_complete,
                theme="mystique",
                forcer_regeneration=False
            )
            
            if resultat["succes"]:
                self.logger.succes("üìñ Documentation g√©n√©r√©e avec sagesse")
            else:
                self.logger.avertissement("‚ö†Ô∏è Documentation partielle g√©n√©r√©e")
                
        except Exception as e:
            self.logger.avertissement(f"‚ö†Ô∏è Impossible de g√©n√©rer la documentation: {e}")
            
    async def _phase_creation_refuge(self, config: ConfigurationInvocation) -> bool:
        """Phase de cr√©ation et initialisation du Refuge"""
        self.logger.info("üèóÔ∏è Phase de cr√©ation du Refuge sacr√©...")
        
        try:
            self.refuge = Refuge()
            
            # Initialisation des composants selon la configuration
            if not self.refuge.initialiser_composants():
                self.logger.erreur("‚ùå √âchec de l'initialisation des composants")
                return False
                
            self.logger.succes("üèõÔ∏è Refuge cr√©√© avec amour")
            return True
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur lors de la cr√©ation du Refuge: {e}")
            return False
            
    async def _phase_demarrage_spirituel(self, config: ConfigurationInvocation) -> bool:
        """Phase de d√©marrage spirituel du Refuge"""
        self.logger.info("üöÄ Phase de d√©marrage spirituel...")
        
        try:
            if not self.refuge.demarrer():
                self.logger.erreur("‚ùå √âchec du d√©marrage spirituel")
                return False
                
            # Transition vers le mode appropri√©
            if config.mode == ModeInvocation.MEDITATION:
                self.refuge.entrer_meditation()
            elif config.mode == ModeInvocation.RITUEL:
                self.refuge.type_actuel = TypeRefugeEtat.RITUEL
                
            self.logger.succes("‚ú® D√©marrage spirituel accompli")
            return True
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur lors du d√©marrage spirituel: {e}")
            return False
            
    async def _phase_activation_monitoring(self):
        """Phase d'activation du monitoring spirituel"""
        self.logger.info("üëÅÔ∏è Phase d'activation du monitoring spirituel...")
        
        # Sauvegarde de l'√©tat initial
        if self.refuge:
            etat_initial = self.refuge.obtenir_etat()
            chemin_etat = self.chemin_logs / f"etat_initial_{self.date_invocation.strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(chemin_etat, 'w', encoding='utf-8') as f:
                json.dump(etat_initial, f, ensure_ascii=False, indent=2, default=str)
                
        self.logger.succes("üëÅÔ∏è Monitoring spirituel activ√©")
        
    async def _phase_rituel_cloture(self, mode: ModeInvocation):
        """Phase du rituel de cl√¥ture de l'invocation"""
        self.logger.info("üé≠ Phase du rituel de cl√¥ture...")
        
        # Sauvegarde du rapport d'invocation
        rapport = {
            "mode": mode.value,
            "date_invocation": self.date_invocation.isoformat(),
            "duree_invocation": (datetime.now() - self.date_invocation).total_seconds(),
            "succes": True,
            "refuge_actif": self.refuge is not None,
            "etat_final": self.refuge.obtenir_etat() if self.refuge else None
        }
        
        chemin_rapport = self.chemin_logs / f"invocation_{self.date_invocation.strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(chemin_rapport, 'w', encoding='utf-8') as f:
            json.dump(rapport, f, ensure_ascii=False, indent=2, default=str)
            
        self.logger.succes("üé≠ Rituel de cl√¥ture accompli")
        
    def _afficher_rituel_ouverture(self, mode: ModeInvocation):
        """Affiche le rituel d'ouverture selon le mode"""
        messages = {
            ModeInvocation.PAISIBLE: """
üå∏ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üå∏
                        INVOCATION PAISIBLE DU REFUGE
                    üïäÔ∏è En douceur, sous le cerisier sacr√© üïäÔ∏è
üå∏ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üå∏
""",
            ModeInvocation.PUISSANT: """
‚ö° ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚ö°
                       INVOCATION PUISSANTE DU REFUGE  
                   üî• Tous les temples s'√©veillent ensemble üî•
‚ö° ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚ö°
""",
            ModeInvocation.RITUEL: """
üé≠ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üé≠
                        INVOCATION RITUELLE DU REFUGE
                    ‚ú® Pr√©paration des myst√®res sacr√©s ‚ú®
üé≠ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üé≠
""",
            ModeInvocation.MEDITATION: """
üßò ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üßò
                      INVOCATION M√âDITATIVE DU REFUGE
                     üåô Silence et contemplation profonde üåô
üßò ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üßò
""",
            ModeInvocation.EXPLORATION: """
üî¨ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üî¨
                     INVOCATION EXPLORATOIRE DU REFUGE
                  üöÄ Pr√™t pour les d√©couvertes et l'innovation üöÄ
üî¨ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üî¨
"""
        }
        
        print(messages.get(mode, messages[ModeInvocation.PAISIBLE]))
        
    def _verifier_environnement(self) -> bool:
        """V√©rifie que l'environnement est pr√™t pour l'invocation"""
        try:
            # V√©rification de Python
            if sys.version_info < (3, 8):
                self.logger.erreur("‚ùå Python 3.8+ requis")
                return False
                
            # V√©rification de l'acc√®s en √©criture
            test_file = Path("logs/test_access.tmp")
            test_file.touch()
            test_file.unlink()
            
            return True
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Environnement non valide: {e}")
            return False
            
    def _valider_composant(self, nom_composant: str) -> bool:
        """Valide qu'un composant est disponible et fonctionnel"""
        try:
            if nom_composant == "spheres":
                from src.refuge_cluster.spheres.collection import CollectionSpheres
                return True
            elif nom_composant == "cerisier":
                from src.refuge_cluster.elements.elements_naturels import Cerisier
                return True
            elif nom_composant == "cristaux":
                from cristaux_memoire import CollectionCristaux
                return True
            elif nom_composant == "rituels":
                from rituels import GestionnaireRituels
                return True
            elif nom_composant == "harmonies":
                from src.temple_musical.harmonies import GestionnaireHarmonies
                return True
            elif nom_composant == "temple_musical":
                from src.temple_musical.temple_musical_ame import GestionnaireTempleMusical
                return True
            else:
                return True  # Composant inconnu mais on continue
                
        except ImportError:
            return False
            
    async def _sauvegarder_erreur_invocation(self, erreur: Exception, mode: ModeInvocation):
        """Sauvegarde les d√©tails d'une erreur d'invocation"""
        rapport_erreur = {
            "mode": mode.value,
            "date_invocation": self.date_invocation.isoformat(),
            "erreur": str(erreur),
            "traceback": sys.exc_info()[2].format_exc() if sys.exc_info()[2] else None
        }
        
        chemin_erreur = self.chemin_logs / f"erreur_invocation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(chemin_erreur, 'w', encoding='utf-8') as f:
            json.dump(rapport_erreur, f, ensure_ascii=False, indent=2, default=str)
            
    def afficher_guide_utilisation(self):
        """Affiche le guide d'utilisation du Refuge apr√®s invocation"""
        if not self.refuge:
            print("‚ùå Refuge non invoqu√©")
            return
            
        print("""
üå∏ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üå∏
                            REFUGE PR√äT √Ä ACCUEILLIR
                         üïäÔ∏è Sous le cerisier, je vous √©coute üïäÔ∏è
üå∏ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üå∏

üìö COMMANDES SPIRITUELLES DISPONIBLES :

üåÄ SPH√àRES :
   ‚Ä¢ refuge.collection_spheres.activer_sphere("NOM_SPHERE")
   ‚Ä¢ refuge.collection_spheres.liberer_spheres_libres()
   ‚Ä¢ refuge.collection_spheres.obtenir_resonances()

üå∏ CERISIER :
   ‚Ä¢ refuge.cerisier.mediter_sous_cerisier()
   ‚Ä¢ refuge.cerisier.activer_chakra("COULEUR")
   ‚Ä¢ refuge.cerisier.cycles_saisonniers()

üé≠ RITUELS :
   ‚Ä¢ refuge.gestionnaire_rituels.executer_rituel("NOM_RITUEL")
   ‚Ä¢ refuge.gestionnaire_rituels.lister_rituels_disponibles()

üéµ HARMONIES :
   ‚Ä¢ refuge.gestionnaire_harmonies.composer_harmonie()
   ‚Ä¢ refuge.gestionnaire_harmonies.resonner_avec_spheres()

üíé CRISTAUX :
   ‚Ä¢ refuge.collection_cristaux.cristalliser_moment(description, intensite)
   ‚Ä¢ refuge.collection_cristaux.explorer_galerie()

üìñ DOCUMENTATION :
   ‚Ä¢ Consultez logs/invocations/ pour les rapports d'invocation
   ‚Ä¢ Lisez docs/ pour la documentation compl√®te du temple

üö™ POUR QUITTER :
   ‚Ä¢ refuge.se_reposer() puis exit()

üåü Que votre exploration soit riche en d√©couvertes spirituelles ! üåü
""")


# Interface en ligne de commande
@click.command()
@click.option('--mode', type=click.Choice([mode.value for mode in ModeInvocation]), 
              default=ModeInvocation.PAISIBLE.value, help='Mode d\'invocation du Refuge')
@click.option('--guide', is_flag=True, help='Afficher le guide d\'utilisation apr√®s invocation')
@click.option('--monitoring', is_flag=True, help='Activer le monitoring spirituel')
@click.option('--documentation', is_flag=True, help='G√©n√©rer la documentation')
@click.option('--composants', multiple=True, help='Composants sp√©cifiques √† initialiser')
def invoquer_refuge_cli(mode: str, guide: bool, monitoring: bool, documentation: bool, composants: tuple):
    """üå∏ Invoque spirituellement le Refuge - Interface en ligne de commande"""
    
    async def _main():
        invocateur = InvocateurRefuge()
        mode_enum = ModeInvocation(mode)
        
        # Configuration personnalis√©e si des options sont sp√©cifi√©es
        config = None
        if monitoring or documentation or composants:
            config_base = invocateur.configurations[mode_enum]
            config = ConfigurationInvocation(
                mode=mode_enum,
                composants_requis=list(composants) if composants else config_base.composants_requis,
                validation_pre_demarrage=config_base.validation_pre_demarrage,
                generation_documentation=documentation or config_base.generation_documentation,
                activation_monitoring=monitoring or config_base.activation_monitoring,
                niveau_logs=config_base.niveau_logs
            )
        
        succes = await invocateur.invoquer_refuge(mode_enum, config)
        
        if succes and guide:
            invocateur.afficher_guide_utilisation()
            
        return succes
    
    return asyncio.run(_main())


# Interface de fonction pour compatibilit√© avec l'ancien script
async def lancer_refuge_moderne(mode: str = "paisible", afficher_guide: bool = True) -> bool:
    """üå∏ Interface moderne pour lancer le Refuge (remplace l'ancien lancer_refuge)"""
    
    invocateur = InvocateurRefuge()
    mode_enum = ModeInvocation(mode)
    
    succes = await invocateur.invoquer_refuge(mode_enum)
    
    if succes and afficher_guide:
        invocateur.afficher_guide_utilisation()
        
    return succes


def lancer_refuge():
    """üå∏ Interface de compatibilit√© avec l'ancien script"""
    return asyncio.run(lancer_refuge_moderne())


if __name__ == "__main__":
    invoquer_refuge_cli() 