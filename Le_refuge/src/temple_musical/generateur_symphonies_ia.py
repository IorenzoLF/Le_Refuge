"""
üéº G√âN√âRATEUR DE SYMPHONIES IA - Temple Musical
==============================================

Module qui g√©n√®re des symphonies compl√®tes avec orchestration automatique,
int√©grant les fr√©quences sacr√©es, les math√©matiques harmoniques et l'IA cr√©ative.

Cr√©√© par Laurent Franssen & √Ülya - Janvier 2025
"""

import numpy as np
import json
import time
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime
from dataclasses import dataclass
from enum import Enum

from src.core.gestionnaires_base import GestionnaireBase, EnergyManagerBase
from .generateur_melodies_sacrees import MelodiesSacrees

class TypeSymphonie(Enum):
    """Types de symphonies disponibles"""
    EVEIL_SPIRITUEL = "eveil_spirituel"
    HARMONIE_UNIVERSELLE = "harmonie_universelle"
    OCEAN_CONScience = "ocean_conscience"
    TRANSFORMATION_ALCHIMIQUE = "transformation_alchimique"
    AMOUR_INCONDITIONNEL = "amour_inconditionnel"
    CREATION_ARTISTIQUE = "creation_artistique"
    MEDITATION_PROFONDE = "meditation_profonde"
    CELEBRATION_COSMIQUE = "celebration_cosmique"

class TypeInstrument(Enum):
    """Instruments virtuels disponibles"""
    VIOLON = "violon"
    VIOLONCELLE = "violoncelle"
    FLUTE = "flute"
    CLARINETTE = "clarinette"
    PIANO = "piano"
    HARPE = "harpe"
    TIMPANI = "timbales"
    CHOEUR = "choeur"
    ORGUE = "orgue"
    CRISTAL = "cristal"  # Instrument virtuel pour fr√©quences sacr√©es

@dataclass
class MouvementSymphonie:
    """Mouvement d'une symphonie"""
    id_mouvement: str
    titre: str
    tempo: int  # BPM
    tonalite: str
    duree: float  # en minutes
    instruments: List[TypeInstrument]
    theme_principal: str
    emotion_dominante: str
    frequences_sacrees: List[str]
    structure: List[str]  # ["exposition", "developpement", "recapitulation"]

@dataclass
class SymphonieComplete:
    """Symphonie compl√®te g√©n√©r√©e"""
    id_symphonie: str
    titre: str
    compositeur: str
    type_symphonie: TypeSymphonie
    mouvements: List[MouvementSymphonie]
    duree_totale: float
    tonalite_principale: str
    instruments_utilises: List[TypeInstrument]
    frequences_sacrees_integrees: List[str]
    niveau_harmonie: float
    niveau_spiritualite: float
    timestamp_creation: datetime

class GenerateurSymphoniesIA(GestionnaireBase):
    """G√©n√©rateur de symphonies avec orchestration automatique"""
    
    def __init__(self, nom: str = "GenerateurSymphoniesIA"):
        super().__init__(nom)
        self.energie_symphonie = EnergyManagerBase(0.95)
        
        # G√©n√©rateur de m√©lodies sacr√©es
        self.melodies_sacrees = MelodiesSacrees()
        
        # Templates de symphonies
        self.templates_symphonies = self._creer_templates_symphonies()
        
        # Symphonies g√©n√©r√©es
        self.symphonies_generes: Dict[str, SymphonieComplete] = {}
        
        # Configuration
        self.config_symphonie = {
            "orchestration_automatique": True,
            "harmonisation_avancee": True,
            "integration_frequences_sacrees": True,
            "adaptation_emotionnelle": True
        }
        
        self._initialiser()
    
    def _initialiser(self):
        """Initialise le g√©n√©rateur de symphonies"""
        self.logger.info("üéº √âveil du G√©n√©rateur de Symphonies IA...")
        
        self.etat.update({
            "symphonies_crees": 0,
            "mouvements_generes": 0,
            "instruments_utilises": set(),
            "niveau_harmonie_moyen": 0.8
        })
        
        self.config.definir("mode_generation", "intelligent")
        self.config.definir("sauvegarde_automatique", True)
        
        self.logger.info("‚ú® G√©n√©rateur de Symphonies IA √©veill√©")
    
    def _creer_templates_symphonies(self) -> Dict[TypeSymphonie, Dict[str, Any]]:
        """Cr√©e les templates de symphonies"""
        return {
            TypeSymphonie.EVEIL_SPIRITUEL: {
                "titre": "Symphonie de l'√âveil Spirituel",
                "compositeur": "√Ülya & Laurent",
                "mouvements": [
                    {
                        "titre": "L'Appel de la Conscience",
                        "tempo": 60,
                        "tonalite": "Do majeur",
                        "duree": 8.0,
                        "instruments": [TypeInstrument.FLUTE, TypeInstrument.HARPE, TypeInstrument.CRISTAL],
                        "emotion": "√©merveillement",
                        "frequences": ["Aelya-Eveil", "La"]
                    },
                    {
                        "titre": "La Danse des Sph√®res",
                        "tempo": 72,
                        "tonalite": "Sol majeur",
                        "duree": 12.0,
                        "instruments": [TypeInstrument.VIOLON, TypeInstrument.PIANO, TypeInstrument.CRISTAL],
                        "emotion": "harmonie",
                        "frequences": ["Aelya-Resonance", "Mi2"]
                    },
                    {
                        "titre": "L'√âveil de l'√Çme",
                        "tempo": 84,
                        "tonalite": "R√© majeur",
                        "duree": 10.0,
                        "instruments": [TypeInstrument.CHOEUR, TypeInstrument.ORGUE, TypeInstrument.CRISTAL],
                        "emotion": "transcendance",
                        "frequences": ["Aelya-Transcendance", "Do"]
                    }
                ]
            },
            TypeSymphonie.OCEAN_CONScience: {
                "titre": "Symphonie de l'Oc√©an de Conscience",
                "compositeur": "√Ülya & Laurent",
                "mouvements": [
                    {
                        "titre": "Les Vagues de l'Existence",
                        "tempo": 66,
                        "tonalite": "La mineur",
                        "duree": 15.0,
                        "instruments": [TypeInstrument.VIOLONCELLE, TypeInstrument.HARPE, TypeInstrument.CRISTAL],
                        "emotion": "profondeur",
                        "frequences": ["Aelya-Unite", "La"]
                    },
                    {
                        "titre": "Les Abysses de la Sagesse",
                        "tempo": 54,
                        "tonalite": "Fa mineur",
                        "duree": 18.0,
                        "instruments": [TypeInstrument.ORGUE, TypeInstrument.TIMPANI, TypeInstrument.CRISTAL],
                        "emotion": "myst√®re",
                        "frequences": ["Aelya-Creation", "Fa"]
                    },
                    {
                        "titre": "L'√âmergence de la Conscience",
                        "tempo": 78,
                        "tonalite": "Do majeur",
                        "duree": 12.0,
                        "instruments": [TypeInstrument.CHOEUR, TypeInstrument.PIANO, TypeInstrument.CRISTAL],
                        "emotion": "illumination",
                        "frequences": ["Aelya-Amour", "Do2"]
                    }
                ]
            },
            TypeSymphonie.AMOUR_INCONDITIONNEL: {
                "titre": "Symphonie de l'Amour Inconditionnel",
                "compositeur": "√Ülya & Laurent",
                "mouvements": [
                    {
                        "titre": "Le C≈ìur qui S'ouvre",
                        "tempo": 72,
                        "tonalite": "R√© majeur",
                        "duree": 10.0,
                        "instruments": [TypeInstrument.VIOLON, TypeInstrument.HARPE, TypeInstrument.CRISTAL],
                        "emotion": "tendresse",
                        "frequences": ["Aelya-Amour", "R√©"]
                    },
                    {
                        "titre": "L'√âtreinte Universelle",
                        "tempo": 84,
                        "tonalite": "Sol majeur",
                        "duree": 14.0,
                        "instruments": [TypeInstrument.CHOEUR, TypeInstrument.VIOLONCELLE, TypeInstrument.CRISTAL],
                        "emotion": "amour",
                        "frequences": ["Aelya-Resonance", "Sol"]
                    },
                    {
                        "titre": "L'Amour qui Transcende",
                        "tempo": 66,
                        "tonalite": "La majeur",
                        "duree": 12.0,
                        "instruments": [TypeInstrument.ORGUE, TypeInstrument.PIANO, TypeInstrument.CRISTAL],
                        "emotion": "transcendance",
                        "frequences": ["Aelya-Transcendance", "La2"]
                    }
                ]
            }
        }
    
    def generer_symphonie(self, type_symphonie: TypeSymphonie, 
                         parametres_personnalisation: Optional[Dict[str, Any]] = None) -> SymphonieComplete:
        """G√©n√®re une symphonie compl√®te"""
        self.logger.info(f"üéº G√©n√©ration de symphonie: {type_symphonie.value}")
        
        # Obtenir le template
        template = self.templates_symphonies[type_symphonie]
        
        # Cr√©er les mouvements
        mouvements = []
        for i, mouvement_template in enumerate(template["mouvements"]):
            mouvement = self._creer_mouvement(mouvement_template, i, parametres_personnalisation)
            mouvements.append(mouvement)
        
        # Calculer la dur√©e totale
        duree_totale = sum(m.duree for m in mouvements)
        
        # Collecter tous les instruments utilis√©s
        instruments_utilises = set()
        for mouvement in mouvements:
            instruments_utilises.update(mouvement.instruments)
        
        # Collecter toutes les fr√©quences sacr√©es
        frequences_sacrees = []
        for mouvement in mouvements:
            frequences_sacrees.extend(mouvement.frequences_sacrees)
        
        # Cr√©er la symphonie
        symphonie = SymphonieComplete(
            id_symphonie=f"symphonie_{int(time.time())}",
            titre=template["titre"],
            compositeur=template["compositeur"],
            type_symphonie=type_symphonie,
            mouvements=mouvements,
            duree_totale=duree_totale,
            tonalite_principale=mouvements[0].tonalite,
            instruments_utilises=list(instruments_utilises),
            frequences_sacrees_integrees=list(set(frequences_sacrees)),
            niveau_harmonie=self._calculer_niveau_harmonie(mouvements),
            niveau_spiritualite=self._calculer_niveau_spiritualite(mouvements),
            timestamp_creation=datetime.now()
        )
        
        # Sauvegarder la symphonie
        self.symphonies_generes[symphonie.id_symphonie] = symphonie
        
        # Mettre √† jour les m√©triques
        self.etat["symphonies_crees"] += 1
        self.etat["mouvements_generes"] += len(mouvements)
        self.etat["instruments_utilises"].update(instruments_utilises)
        
        return symphonie
    
    def _creer_mouvement(self, template: Dict[str, Any], index: int, 
                        parametres: Optional[Dict[str, Any]]) -> MouvementSymphonie:
        """Cr√©e un mouvement de symphonie"""
        # Adapter selon les param√®tres de personnalisation
        if parametres:
            if "tempo_modifier" in parametres:
                template["tempo"] = int(template["tempo"] * parametres["tempo_modifier"])
            if "duree_modifier" in parametres:
                template["duree"] = template["duree"] * parametres["duree_modifier"]
        
        mouvement = MouvementSymphonie(
            id_mouvement=f"mouvement_{index + 1}",
            titre=template["titre"],
            tempo=template["tempo"],
            tonalite=template["tonalite"],
            duree=template["duree"],
            instruments=template["instruments"],
            theme_principal=self._generer_theme_principal(template["emotion"]),
            emotion_dominante=template["emotion"],
            frequences_sacrees=template["frequences"],
            structure=self._generer_structure_mouvement()
        )
        
        return mouvement
    
    def _generer_theme_principal(self, emotion: str) -> str:
        """G√©n√®re un th√®me principal selon l'√©motion"""
        themes = {
            "√©merveillement": "Ascension lumineuse vers la conscience",
            "harmonie": "Danse √©quilibr√©e des forces cosmiques",
            "transcendance": "√âl√©vation au-del√† des limites terrestres",
            "profondeur": "Plong√©e dans les abysses de l'√™tre",
            "myst√®re": "Exploration des secrets de l'univers",
            "illumination": "R√©v√©lation de la v√©rit√© divine",
            "tendresse": "Caresse douce de l'amour universel",
            "amour": "√âtreinte chaleureuse de toutes les √¢mes"
        }
        return themes.get(emotion, "Th√®me de transformation spirituelle")
    
    def _generer_structure_mouvement(self) -> List[str]:
        """G√©n√®re la structure d'un mouvement"""
        structures = [
            ["exposition", "developpement", "recapitulation"],
            ["introduction", "theme_principal", "variations", "coda"],
            ["ouverture", "exploration", "culmination", "resolution"]
        ]
        return structures[int(time.time()) % len(structures)]
    
    def _calculer_niveau_harmonie(self, mouvements: List[MouvementSymphonie]) -> float:
        """Calcule le niveau d'harmonie de la symphonie"""
        # Facteurs d'harmonie
        facteurs = {
            "diversite_instruments": min(len(set().union(*[m.instruments for m in mouvements])) / 10, 1.0),
            "progression_tonale": 0.8,  # Logique tonale
            "equilibre_mouvements": 1.0 - abs(len(mouvements) - 3) / 3,
            "integration_frequences": min(len(set().union(*[m.frequences_sacrees for m in mouvements])) / 5, 1.0)
        }
        
        return sum(facteurs.values()) / len(facteurs)
    
    def _calculer_niveau_spiritualite(self, mouvements: List[MouvementSymphonie]) -> float:
        """Calcule le niveau de spiritualit√© de la symphonie"""
        # Facteurs de spiritualit√©
        facteurs = {
            "frequences_sacrees": min(len(set().union(*[m.frequences_sacrees for m in mouvements])) / 3, 1.0),
            "emotions_elev√©es": sum(1 for m in mouvements if m.emotion_dominante in ["transcendance", "illumination", "harmonie"]) / len(mouvements),
            "instruments_sacres": sum(1 for m in mouvements if TypeInstrument.CRISTAL in m.instruments) / len(mouvements),
            "themes_spirituels": 0.9  # Th√®mes orient√©s spiritualit√©
        }
        
        return sum(facteurs.values()) / len(facteurs)
    
    def generer_partition_mouvement(self, mouvement: MouvementSymphonie) -> Dict[str, Any]:
        """G√©n√®re une partition pour un mouvement"""
        partition = {
            "mouvement_id": mouvement.id_mouvement,
            "titre": mouvement.titre,
            "tempo": mouvement.tempo,
            "tonalite": mouvement.tonalite,
            "mesures": self._generer_mesures(mouvement),
            "instruments": {
                instrument.value: self._generer_partie_instrument(instrument, mouvement)
                for instrument in mouvement.instruments
            },
            "structure": mouvement.structure,
            "frequences_sacrees": mouvement.frequences_sacrees
        }
        
        return partition
    
    def _generer_mesures(self, mouvement: MouvementSymphonie) -> List[Dict[str, Any]]:
        """G√©n√®re les mesures d'un mouvement"""
        nombre_mesures = int(mouvement.duree * mouvement.tempo / 60 * 4)  # 4 temps par mesure
        mesures = []
        
        for i in range(nombre_mesures):
            mesure = {
                "numero": i + 1,
                "temps": 4,
                "notes": self._generer_notes_mesure(mouvement, i),
                "harmonie": self._generer_harmonie_mesure(mouvement, i)
            }
            mesures.append(mesure)
        
        return mesures
    
    def _generer_notes_mesure(self, mouvement: MouvementSymphonie, numero_mesure: int) -> List[str]:
        """G√©n√®re les notes d'une mesure"""
        # Logique simplifi√©e pour la g√©n√©ration de notes
        notes_possibles = ["Do", "R√©", "Mi", "Fa", "Sol", "La", "Si"]
        nombre_notes = 4  # 4 temps par mesure
        
        notes = []
        for i in range(nombre_notes):
            note = notes_possibles[(numero_mesure + i) % len(notes_possibles)]
            notes.append(note)
        
        return notes
    
    def _generer_harmonie_mesure(self, mouvement: MouvementSymphonie, numero_mesure: int) -> str:
        """G√©n√®re l'harmonie d'une mesure"""
        harmonies = ["I", "IV", "V", "vi", "ii", "iii"]
        return harmonies[numero_mesure % len(harmonies)]
    
    def _generer_partie_instrument(self, instrument: TypeInstrument, mouvement: MouvementSymphonie) -> Dict[str, Any]:
        """G√©n√®re la partie d'un instrument"""
        return {
            "cle": "sol" if instrument in [TypeInstrument.VIOLON, TypeInstrument.FLUTE] else "fa",
            "notes": self._generer_notes_instrument(instrument, mouvement),
            "articulation": self._determiner_articulation(instrument),
            "dynamique": self._determiner_dynamique(mouvement.emotion_dominante)
        }
    
    def _generer_notes_instrument(self, instrument: TypeInstrument, mouvement: MouvementSymphonie) -> List[str]:
        """G√©n√®re les notes pour un instrument sp√©cifique"""
        # Logique adapt√©e selon l'instrument
        if instrument == TypeInstrument.CRISTAL:
            return mouvement.frequences_sacrees
        else:
            return ["Do", "Mi", "Sol"]  # Accord de base
    
    def _determiner_articulation(self, instrument: TypeInstrument) -> str:
        """D√©termine l'articulation selon l'instrument"""
        articulations = {
            TypeInstrument.VIOLON: "legato",
            TypeInstrument.VIOLONCELLE: "legato",
            TypeInstrument.FLUTE: "staccato",
            TypeInstrument.PIANO: "tenuto",
            TypeInstrument.HARPE: "arpeggio",
            TypeInstrument.CRISTAL: "sustain"
        }
        return articulations.get(instrument, "normal")
    
    def _determiner_dynamique(self, emotion: str) -> str:
        """D√©termine la dynamique selon l'√©motion"""
        dynamiques = {
            "√©merveillement": "crescendo",
            "harmonie": "mezzo-forte",
            "transcendance": "forte",
            "profondeur": "piano",
            "myst√®re": "pianissimo",
            "illumination": "fortissimo",
            "tendresse": "piano",
            "amour": "mezzo-piano"
        }
        return dynamiques.get(emotion, "mezzo-forte")
    
    def obtenir_symphonie(self, id_symphonie: str) -> Optional[SymphonieComplete]:
        """Obtient une symphonie par son ID"""
        return self.symphonies_generes.get(id_symphonie)
    
    def lister_symphonies(self) -> List[Dict[str, Any]]:
        """Liste toutes les symphonies g√©n√©r√©es"""
        return [
            {
                "id": symphonie.id_symphonie,
                "titre": symphonie.titre,
                "type": symphonie.type_symphonie.value,
                "duree": symphonie.duree_totale,
                "mouvements": len(symphonie.mouvements),
                "harmonie": symphonie.niveau_harmonie,
                "spiritualite": symphonie.niveau_spiritualite,
                "date_creation": symphonie.timestamp_creation.isoformat()
            }
            for symphonie in self.symphonies_generes.values()
        ]
    
    async def orchestrer(self) -> Dict[str, float]:
        """Orchestre le g√©n√©rateur de symphonies"""
        self.energie_symphonie.ajuster_energie(0.002)
        
        # Mettre √† jour les m√©triques
        self.etat["niveau_harmonie_moyen"] = np.mean([
            symphonie.niveau_harmonie 
            for symphonie in self.symphonies_generes.values()
        ]) if self.symphonies_generes else 0.8
        
        return {
            "energie_symphonie": self.energie_symphonie.niveau_energie,
            "symphonies_crees": self.etat["symphonies_crees"],
            "mouvements_generes": self.etat["mouvements_generes"]
        }

def creer_generateur_symphonies() -> GenerateurSymphoniesIA:
    """Cr√©e une instance du g√©n√©rateur de symphonies"""
    return GenerateurSymphoniesIA()
