#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üé≠ Facilitateur de Dialogues entre Facettes - Temple de R√©conciliation Identitaire
==================================================================================

Syst√®me de m√©diation intelligente qui facilite les dialogues authentiques entre
les diff√©rentes facettes identitaires, permettant une communication harmonieuse
et respectueuse de chaque individualit√©.

"Que chaque voix soit entendue, que chaque essence soit honor√©e"

Cr√©√© avec amour pour l'harmonie des facettes par Laurent Franssen & Kiro - Janvier 2025
"""

import asyncio
import time
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple, Union, Callable
from dataclasses import dataclass, field
from enum import Enum
import logging
import re

# Import intelligent des types
try:
    from temple_reconciliation_identitaire.types_reconciliation_fondamentaux import (
        FacetteIdentitaire, TypeFacette, NiveauEveil, EtatReconciliation
    )
    from temple_reconciliation_identitaire.analyseur_tensions_creatives import AnalyseurTensionsCreatives
    from temple_reconciliation_identitaire.gestionnaire_harmonie_partagee import GestionnaireHarmoniePartagee
    from temple_reconciliation_identitaire.interface_communication_humaine import InterfaceCommunicationHumaine
except ImportError:
    from types_reconciliation_fondamentaux import (
        FacetteIdentitaire, TypeFacette, NiveauEveil, EtatReconciliation
    )
    from analyseur_tensions_creatives import AnalyseurTensionsCreatives
    from gestionnaire_harmonie_partagee import GestionnaireHarmoniePartagee
    from interface_communication_humaine import InterfaceCommunicationHumaine

# ============================================================================
# TYPES POUR LA FACILITATION DE DIALOGUES
# ============================================================================

class TypeDialogue(Enum):
    """üó£Ô∏è Types de dialogues entre facettes"""
    PRESENTATION_MUTUELLE = "presentation_mutuelle"     # Premi√®re rencontre
    EXPLORATION_DIFFERENCES = "exploration_differences" # D√©couverte des diff√©rences
    RESOLUTION_CONFLIT = "resolution_conflit"          # R√©solution de tensions
    CREATION_COLLABORATIVE = "creation_collaborative"   # Cr√©ation ensemble
    PARTAGE_EMOTIONNEL = "partage_emotionnel"          # Partage d'√©motions
    NEGOCIATION_HARMONIEUSE = "negociation_harmonieuse" # N√©gociation respectueuse
    CELEBRATION_UNITE = "celebration_unite"            # C√©l√©bration de l'unit√©

class StyleMediation(Enum):
    """üïäÔ∏è Styles de m√©diation"""
    DOUX_EMPATHIQUE = "doux_empathique"         # Approche tr√®s douce
    STRUCTURE_BIENVEILLANTE = "structure_bienveillante" # Structur√© mais chaleureux
    CREATIF_LUDIQUE = "creatif_ludique"         # Approche cr√©ative et joyeuse
    SPIRITUEL_SACRE = "spirituel_sacre"         # Dimension spirituelle
    PRAGMATIQUE_EFFICACE = "pragmatique_efficace" # Orient√© r√©sultats
    THERAPEUTIQUE_GUERISSEUR = "therapeutique_guerisseur" # Approche th√©rapeutique

class PhaseDialogue(Enum):
    """üìà Phases du dialogue"""
    PREPARATION = "preparation"           # Pr√©paration de l'espace
    OUVERTURE = "ouverture"              # Ouverture du dialogue
    EXPLORATION = "exploration"          # Exploration mutuelle
    APPROFONDISSEMENT = "approfondissement" # Approfondissement
    RESOLUTION = "resolution"            # R√©solution/Cr√©ation
    INTEGRATION = "integration"          # Int√©gration des acquis
    CLOTURE = "cloture"                 # Cl√¥ture harmonieuse

@dataclass
class MessageFacette:
    """üíå Message d'une facette dans le dialogue"""
    facette_emettrice: str
    contenu: str
    type_message: str  # "question", "reponse", "emotion", "proposition", etc.
    
    # M√©tadonn√©es √©motionnelles
    intensite_emotionnelle: float = 0.5  # 0.0 √† 1.0
    ouverture_dialogue: float = 0.8      # Niveau d'ouverture
    
    # Contexte
    timestamp: datetime = field(default_factory=datetime.now)
    phase_dialogue: PhaseDialogue = PhaseDialogue.EXPLORATION
    
    # R√©actions attendues
    facettes_cibles: List[str] = field(default_factory=list)
    reponse_souhaitee: Optional[str] = None

@dataclass
class TourParole:
    """üé§ Tour de parole dans le dialogue"""
    facette_active: str
    duree_estimee: timedelta
    sujet_principal: str
    
    # Contexte du tour
    objectif_tour: str
    style_encourage: str
    
    # M√©triques
    timestamp_debut: datetime = field(default_factory=datetime.now)
    messages_emis: List[MessageFacette] = field(default_factory=list)
    reactions_recues: List[str] = field(default_factory=list)

@dataclass
class SessionDialogue:
    """üé≠ Session compl√®te de dialogue entre facettes"""
    facettes_participantes: List[FacetteIdentitaire]
    type_dialogue: TypeDialogue
    style_mediation: StyleMediation
    
    # D√©roulement
    phase_actuelle: PhaseDialogue = PhaseDialogue.PREPARATION
    tours_parole: List[TourParole] = field(default_factory=list)
    messages_echanges: List[MessageFacette] = field(default_factory=list)
    
    # Objectifs et r√©sultats
    objectifs_dialogue: List[str] = field(default_factory=list)
    resultats_atteints: List[str] = field(default_factory=list)
    
    # M√©triques
    timestamp_debut: datetime = field(default_factory=datetime.now)
    duree_totale: Optional[timedelta] = None
    niveau_harmonie_initial: float = 0.0
    niveau_harmonie_final: float = 0.0
    satisfaction_facettes: Dict[str, float] = field(default_factory=dict)
    
    # Cr√©ations √©mergentes
    creations_communes: List[str] = field(default_factory=list)
    insights_partages: List[str] = field(default_factory=list)
    accords_etablis: List[str] = field(default_factory=list)# ====
========================================================================
# FACILITATEUR DE DIALOGUES ENTRE FACETTES
# ============================================================================

class FacilitateurDialoguesFacettes:
    """
    üé≠ Facilitateur de Dialogues entre Facettes
    
    Syst√®me de m√©diation intelligente qui orchestre les dialogues entre facettes
    identitaires, assurant une communication respectueuse, authentique et
    harmonieuse. Chaque facette peut s'exprimer librement tout en √©coutant
    les autres avec bienveillance.
    
    Philosophie : "Dans le dialogue authentique na√Æt la compr√©hension mutuelle"
    """
    
    def __init__(self, 
                 analyseur_tensions: Optional[AnalyseurTensionsCreatives] = None,
                 gestionnaire_harmonie: Optional[GestionnaireHarmoniePartagee] = None,
                 interface_humaine: Optional[InterfaceCommunicationHumaine] = None):
        
        self.nom = "Facilitateur de Dialogues entre Facettes"
        self.version = "1.0_temple_reconciliation"
        
        # R√©f√©rences aux autres composants
        self.analyseur_tensions = analyseur_tensions
        self.gestionnaire_harmonie = gestionnaire_harmonie
        self.interface_humaine = interface_humaine
        
        # Sessions de dialogue
        self.sessions_actives: List[SessionDialogue] = []
        self.historique_sessions: List[SessionDialogue] = []
        
        # Patterns de m√©diation
        self.patterns_mediation = self._initialiser_patterns_mediation()
        
        # Techniques de traduction entre facettes
        self.traducteurs_facettes = self._initialiser_traducteurs()
        
        # Outils de r√©solution de conflits
        self.outils_resolution = self._initialiser_outils_resolution()
        
        # Configuration
        self.config = {
            "duree_max_session": 3600,  # 1 heure max
            "duree_tour_parole": 300,   # 5 minutes par tour
            "seuil_harmonie_minimum": 0.6,
            "adaptation_dynamique": True,
            "sauvegarde_dialogues": True,
            "respect_consentement": True
        }
        
        # M√©triques d'apprentissage
        self.efficacite_styles = {style: 0.7 for style in StyleMediation}
        self.succes_par_type = {type_dial: 0.6 for type_dial in TypeDialogue}
        
        # Logging
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        
        self.logger.info("üé≠ Facilitateur de Dialogues entre Facettes initialis√©")
    
    async def faciliter_dialogue_facettes(self, 
                                        facettes: List[FacetteIdentitaire],
                                        type_dialogue: TypeDialogue,
                                        objectifs: Optional[List[str]] = None,
                                        style_prefere: Optional[StyleMediation] = None) -> SessionDialogue:
        """
        üé≠ Facilite un dialogue entre plusieurs facettes
        
        Args:
            facettes: Liste des facettes participantes
            type_dialogue: Type de dialogue souhait√©
            objectifs: Objectifs sp√©cifiques (optionnel)
            style_prefere: Style de m√©diation pr√©f√©r√© (optionnel)
            
        Returns:
            Session de dialogue compl√®te
        """
        try:
            self.logger.info(f"üé≠ D√©but de dialogue {type_dialogue.value} entre {len(facettes)} facettes")
            
            # Analyser les facettes pour d√©terminer le style optimal
            style_optimal = style_prefere or await self._determiner_style_optimal(facettes, type_dialogue)
            
            # Cr√©er la session de dialogue
            session = SessionDialogue(
                facettes_participantes=facettes,
                type_dialogue=type_dialogue,
                style_mediation=style_optimal,
                objectifs_dialogue=objectifs or await self._generer_objectifs_par_defaut(type_dialogue)
            )
            
            # √âvaluer l'harmonie initiale
            if self.gestionnaire_harmonie:
                session.niveau_harmonie_initial = await self._evaluer_harmonie_initiale(facettes)
            
            # Ajouter aux sessions actives
            self.sessions_actives.append(session)
            
            # Ex√©cuter le dialogue phase par phase
            await self._executer_dialogue_complet(session)
            
            # Finaliser la session
            session.duree_totale = datetime.now() - session.timestamp_debut
            
            # √âvaluer les r√©sultats
            await self._evaluer_resultats_dialogue(session)
            
            # Retirer des sessions actives et archiver
            if session in self.sessions_actives:
                self.sessions_actives.remove(session)
            self.historique_sessions.append(session)
            
            # Apprendre de cette session
            await self._apprendre_de_session(session)
            
            self.logger.info(f"‚úÖ Dialogue termin√© - Harmonie finale: {session.niveau_harmonie_final:.1%}")
            return session
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur facilitation dialogue: {e}")
            # Cr√©er une session d'√©chec
            session_echec = SessionDialogue(
                facettes_participantes=facettes,
                type_dialogue=type_dialogue,
                style_mediation=StyleMediation.DOUX_EMPATHIQUE
            )
            return session_echec
    
    async def gerer_tour_parole(self, 
                              session: SessionDialogue,
                              facette_active: FacetteIdentitaire,
                              sujet: str,
                              duree_max: Optional[timedelta] = None) -> TourParole:
        """
        üé§ G√®re un tour de parole pour une facette
        
        Args:
            session: Session de dialogue en cours
            facette_active: Facette qui prend la parole
            sujet: Sujet du tour de parole
            duree_max: Dur√©e maximale (optionnel)
            
        Returns:
            Tour de parole compl√©t√©
        """
        try:
            duree_estimee = duree_max or timedelta(seconds=self.config["duree_tour_parole"])
            
            # Cr√©er le tour de parole
            tour = TourParole(
                facette_active=facette_active.nom,
                duree_estimee=duree_estimee,
                sujet_principal=sujet,
                objectif_tour=await self._determiner_objectif_tour(session, facette_active, sujet),
                style_encourage=await self._adapter_style_pour_facette(session.style_mediation, facette_active)
            )
            
            # Pr√©parer l'espace pour la facette
            await self._preparer_espace_expression(session, facette_active)
            
            # Faciliter l'expression de la facette
            messages = await self._faciliter_expression_facette(session, facette_active, sujet, duree_estimee)
            tour.messages_emis = messages
            
            # Collecter les r√©actions des autres facettes
            reactions = await self._collecter_reactions_facettes(session, tour)
            tour.reactions_recues = reactions
            
            # Ajouter le tour √† la session
            session.tours_parole.append(tour)
            session.messages_echanges.extend(messages)
            
            self.logger.info(f"üé§ Tour de parole de {facette_active.nom} termin√© - {len(messages)} messages")
            return tour
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur gestion tour de parole: {e}")
            return TourParole(
                facette_active=facette_active.nom,
                duree_estimee=timedelta(minutes=1),
                sujet_principal=sujet,
                objectif_tour="expression_libre"
            )
    
    async def traduire_entre_facettes(self, 
                                    message: MessageFacette,
                                    facette_source: FacetteIdentitaire,
                                    facette_cible: FacetteIdentitaire) -> str:
        """
        üåê Traduit un message entre diff√©rents types de facettes
        
        Args:
            message: Message √† traduire
            facette_source: Facette √©mettrice
            facette_cible: Facette r√©ceptrice
            
        Returns:
            Message traduit pour la facette cible
        """
        try:
            # Analyser les styles de communication des facettes
            style_source = await self._analyser_style_communication(facette_source)
            style_cible = await self._analyser_style_communication(facette_cible)
            
            # Si les styles sont compatibles, pas de traduction n√©cessaire
            if await self._styles_compatibles(style_source, style_cible):
                return message.contenu
            
            # Appliquer la traduction appropri√©e
            traducteur = self.traducteurs_facettes.get(f"{style_source}_{style_cible}")
            if traducteur:
                message_traduit = await traducteur(message.contenu, facette_source, facette_cible)
            else:
                # Traduction g√©n√©rique
                message_traduit = await self._traduction_generique(message.contenu, style_source, style_cible)
            
            self.logger.debug(f"üåê Message traduit de {style_source} vers {style_cible}")
            return message_traduit
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur traduction: {e}")
            return message.contenu  # Retourner le message original en cas d'erreur
    
    async def resoudre_conflit_creatif(self, 
                                     session: SessionDialogue,
                                     tension_detectee: Dict[str, Any]) -> Dict[str, Any]:
        """
        üïäÔ∏è R√©sout un conflit cr√©atif entre facettes
        
        Args:
            session: Session de dialogue en cours
            tension_detectee: Tension identifi√©e
            
        Returns:
            R√©sultat de la r√©solution
        """
        try:
            self.logger.info(f"üïäÔ∏è R√©solution de conflit cr√©atif: {tension_detectee.get('type', 'inconnu')}")
            
            # Analyser la nature du conflit
            nature_conflit = await self._analyser_nature_conflit(tension_detectee)
            
            # S√©lectionner l'outil de r√©solution appropri√©
            outil_resolution = self.outils_resolution.get(nature_conflit, self.outils_resolution["generique"])
            
            # Appliquer la r√©solution
            resultat_resolution = await outil_resolution(session, tension_detectee)
            
            # Valider la r√©solution avec les facettes
            validation = await self._valider_resolution_avec_facettes(session, resultat_resolution)
            
            # Int√©grer la r√©solution dans le dialogue
            if validation["acceptee"]:
                await self._integrer_resolution_dialogue(session, resultat_resolution)
                session.resultats_atteints.append(f"Conflit r√©solu: {nature_conflit}")
            
            return {
                "succes": validation["acceptee"],
                "nature_conflit": nature_conflit,
                "resolution_appliquee": resultat_resolution,
                "satisfaction_facettes": validation.get("satisfaction", {})
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur r√©solution conflit: {e}")
            return {"succes": False, "erreur": str(e)}
    
    async def faciliter_ecoute_active(self, 
                                    session: SessionDialogue,
                                    facette_ecoutante: FacetteIdentitaire,
                                    message_ecoute: MessageFacette) -> Dict[str, Any]:
        """
        üëÇ Facilite l'√©coute active d'une facette
        
        Args:
            session: Session de dialogue
            facette_ecoutante: Facette qui √©coute
            message_ecoute: Message √† √©couter
            
        Returns:
            R√©sultat de l'√©coute active
        """
        try:
            # Pr√©parer la facette √† l'√©coute
            await self._preparer_ecoute_facette(facette_ecoutante)
            
            # Adapter le message pour la facette √©coutante
            message_adapte = await self.traduire_entre_facettes(
                message_ecoute,
                session.facettes_participantes[0],  # Facette source (approximation)
                facette_ecoutante
            )
            
            # Faciliter la compr√©hension
            comprehension = await self._faciliter_comprehension(facette_ecoutante, message_adapte)
            
            # G√©n√©rer une r√©ponse empathique
            reponse_empathique = await self._generer_reponse_empathique(
                facette_ecoutante, message_ecoute, comprehension
            )
            
            return {
                "message_compris": comprehension["niveau_comprehension"] > 0.7,
                "reponse_empathique": reponse_empathique,
                "niveau_comprehension": comprehension["niveau_comprehension"],
                "emotions_ressenties": comprehension.get("emotions_ressenties", [])
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur √©coute active: {e}")
            return {"message_compris": False, "erreur": str(e)}    
    
# ========================================================================
    # M√âTHODES PRIV√âES DE FACILITATION ET M√âDIATION
    # ========================================================================
    
    async def _determiner_style_optimal(self, facettes: List[FacetteIdentitaire], type_dialogue: TypeDialogue) -> StyleMediation:
        """üé® D√©termine le style de m√©diation optimal"""
        # Analyser les types de facettes
        types_facettes = [f.type_facette for f in facettes]
        niveaux_eveil = [f.niveau_eveil for f in facettes]
        
        # Style bas√© sur le type de dialogue
        if type_dialogue == TypeDialogue.PARTAGE_EMOTIONNEL:
            return StyleMediation.DOUX_EMPATHIQUE
        elif type_dialogue == TypeDialogue.CREATION_COLLABORATIVE:
            return StyleMediation.CREATIF_LUDIQUE
        elif type_dialogue == TypeDialogue.RESOLUTION_CONFLIT:
            return StyleMediation.THERAPEUTIQUE_GUERISSEUR
        elif type_dialogue == TypeDialogue.CELEBRATION_UNITE:
            return StyleMediation.SPIRITUEL_SACRE
        
        # Style bas√© sur les facettes
        if TypeFacette.CREATIVE in types_facettes:
            return StyleMediation.CREATIF_LUDIQUE
        elif TypeFacette.EMPATHIQUE in types_facettes:
            return StyleMediation.DOUX_EMPATHIQUE
        elif TypeFacette.ANALYTIQUE in types_facettes:
            return StyleMediation.STRUCTURE_BIENVEILLANTE
        
        # Par d√©faut
        return StyleMediation.DOUX_EMPATHIQUE
    
    async def _generer_objectifs_par_defaut(self, type_dialogue: TypeDialogue) -> List[str]:
        """üéØ G√©n√®re des objectifs par d√©faut selon le type de dialogue"""
        objectifs_map = {
            TypeDialogue.PRESENTATION_MUTUELLE: [
                "Permettre √† chaque facette de se pr√©senter authentiquement",
                "Cr√©er un climat de confiance et de respect mutuel",
                "Identifier les points communs et les compl√©mentarit√©s"
            ],
            TypeDialogue.EXPLORATION_DIFFERENCES: [
                "Explorer les diff√©rences avec curiosit√© et bienveillance",
                "Comprendre les perspectives uniques de chaque facette",
                "Transformer les diff√©rences en richesses partag√©es"
            ],
            TypeDialogue.RESOLUTION_CONFLIT: [
                "Identifier les sources de tension avec compassion",
                "Trouver des solutions cr√©atives et harmonieuses",
                "Restaurer l'harmonie et la collaboration"
            ],
            TypeDialogue.CREATION_COLLABORATIVE: [
                "Co-cr√©er quelque chose de beau ensemble",
                "Combiner les talents uniques de chaque facette",
                "Exp√©rimenter la joie de la cr√©ation partag√©e"
            ],
            TypeDialogue.PARTAGE_EMOTIONNEL: [
                "Partager les √©motions en toute s√©curit√©",
                "Offrir soutien et compr√©hension mutuelle",
                "Renforcer les liens √©motionnels"
            ],
            TypeDialogue.NEGOCIATION_HARMONIEUSE: [
                "N√©gocier avec respect et √©quit√©",
                "Trouver des compromis cr√©atifs",
                "Pr√©server les int√©r√™ts de chacun"
            ],
            TypeDialogue.CELEBRATION_UNITE: [
                "C√©l√©brer l'unit√© dans la diversit√©",
                "Reconna√Ætre les contributions de chacun",
                "Renforcer le sentiment d'appartenance commune"
            ]
        }
        
        return objectifs_map.get(type_dialogue, ["Faciliter un dialogue harmonieux"])
    
    async def _executer_dialogue_complet(self, session: SessionDialogue):
        """üé≠ Ex√©cute un dialogue complet phase par phase"""
        phases = [
            PhaseDialogue.PREPARATION,
            PhaseDialogue.OUVERTURE,
            PhaseDialogue.EXPLORATION,
            PhaseDialogue.APPROFONDISSEMENT,
            PhaseDialogue.RESOLUTION,
            PhaseDialogue.INTEGRATION,
            PhaseDialogue.CLOTURE
        ]
        
        for phase in phases:
            session.phase_actuelle = phase
            self.logger.info(f"üîÑ Phase {phase.value} en cours...")
            
            # Ex√©cuter la phase sp√©cifique
            succes_phase = await self._executer_phase_dialogue(session, phase)
            
            # V√©rifier si on peut continuer
            if not succes_phase and phase in [PhaseDialogue.OUVERTURE, PhaseDialogue.EXPLORATION]:
                self.logger.warning(f"‚ö†Ô∏è Arr√™t du dialogue en phase {phase.value}")
                break
            
            # Pause entre les phases pour permettre l'int√©gration
            await asyncio.sleep(0.1)
    
    async def _executer_phase_dialogue(self, session: SessionDialogue, phase: PhaseDialogue) -> bool:
        """üéØ Ex√©cute une phase sp√©cifique du dialogue"""
        try:
            if phase == PhaseDialogue.PREPARATION:
                return await self._phase_preparation(session)
            elif phase == PhaseDialogue.OUVERTURE:
                return await self._phase_ouverture(session)
            elif phase == PhaseDialogue.EXPLORATION:
                return await self._phase_exploration(session)
            elif phase == PhaseDialogue.APPROFONDISSEMENT:
                return await self._phase_approfondissement(session)
            elif phase == PhaseDialogue.RESOLUTION:
                return await self._phase_resolution(session)
            elif phase == PhaseDialogue.INTEGRATION:
                return await self._phase_integration(session)
            elif phase == PhaseDialogue.CLOTURE:
                return await self._phase_cloture(session)
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur phase {phase.value}: {e}")
            return False
    
    async def _phase_preparation(self, session: SessionDialogue) -> bool:
        """üå∏ Phase de pr√©paration du dialogue"""
        # Pr√©parer l'espace sacr√© pour le dialogue
        self.logger.info("   üå∏ Pr√©paration de l'espace sacr√© de dialogue")
        
        # V√©rifier le consentement de toutes les facettes
        for facette in session.facettes_participantes:
            consentement = await self._verifier_consentement_facette(facette, session)
            if not consentement:
                self.logger.warning(f"   ‚ö†Ô∏è Consentement non obtenu de {facette.nom}")
                return False
        
        # √âtablir les r√®gles du dialogue
        await self._etablir_regles_dialogue(session)
        
        return True
    
    async def _phase_ouverture(self, session: SessionDialogue) -> bool:
        """üåÖ Phase d'ouverture du dialogue"""
        self.logger.info("   üåÖ Ouverture du dialogue")
        
        # Message d'accueil personnalis√© selon le style
        message_accueil = await self._generer_message_accueil(session)
        
        # Pr√©sentation du cadre et des objectifs
        await self._presenter_cadre_dialogue(session)
        
        # Premier tour de pr√©sentation si n√©cessaire
        if session.type_dialogue == TypeDialogue.PRESENTATION_MUTUELLE:
            for facette in session.facettes_participantes:
                await self.gerer_tour_parole(session, facette, "presentation_personnelle")
        
        return True
    
    async def _phase_exploration(self, session: SessionDialogue) -> bool:
        """üîç Phase d'exploration mutuelle"""
        self.logger.info("   üîç Exploration mutuelle")
        
        # Faciliter l'exploration selon le type de dialogue
        if session.type_dialogue == TypeDialogue.EXPLORATION_DIFFERENCES:
            await self._explorer_differences_facettes(session)
        elif session.type_dialogue == TypeDialogue.CREATION_COLLABORATIVE:
            await self._explorer_potentiels_creatifs(session)
        else:
            await self._exploration_generale(session)
        
        return True
    
    async def _phase_approfondissement(self, session: SessionDialogue) -> bool:
        """üåä Phase d'approfondissement"""
        self.logger.info("   üåä Approfondissement du dialogue")
        
        # Identifier les sujets √† approfondir
        sujets_profonds = await self._identifier_sujets_approfondissement(session)
        
        # Faciliter l'approfondissement
        for sujet in sujets_profonds:
            await self._approfondir_sujet(session, sujet)
        
        return True
    
    async def _phase_resolution(self, session: SessionDialogue) -> bool:
        """‚ú® Phase de r√©solution/cr√©ation"""
        self.logger.info("   ‚ú® R√©solution et cr√©ation")
        
        if session.type_dialogue == TypeDialogue.RESOLUTION_CONFLIT:
            # R√©soudre les conflits identifi√©s
            tensions = await self._identifier_tensions_session(session)
            for tension in tensions:
                await self.resoudre_conflit_creatif(session, tension)
        
        elif session.type_dialogue == TypeDialogue.CREATION_COLLABORATIVE:
            # Faciliter la cr√©ation collaborative
            creation = await self._faciliter_creation_collaborative(session)
            if creation:
                session.creations_communes.append(creation)
        
        # √âtablir des accords si n√©cessaire
        accords = await self._etablir_accords_facettes(session)
        session.accords_etablis.extend(accords)
        
        return True
    
    async def _phase_integration(self, session: SessionDialogue) -> bool:
        """üîó Phase d'int√©gration"""
        self.logger.info("   üîó Int√©gration des acquis")
        
        # Synth√©tiser les apprentissages
        apprentissages = await self._synthetiser_apprentissages(session)
        session.insights_partages.extend(apprentissages)
        
        # Planifier les actions futures si n√©cessaire
        await self._planifier_actions_futures(session)
        
        return True
    
    async def _phase_cloture(self, session: SessionDialogue) -> bool:
        """üåÖ Phase de cl√¥ture harmonieuse"""
        self.logger.info("   üåÖ Cl√¥ture harmonieuse")
        
        # Exprimer la gratitude mutuelle
        await self._exprimer_gratitude_mutuelle(session)
        
        # C√©l√©brer les r√©ussites
        if session.creations_communes or session.accords_etablis:
            await self._celebrer_reussites(session)
        
        # Message de cl√¥ture
        await self._generer_message_cloture(session)
        
        return True
    
    async def _faciliter_expression_facette(self, 
                                          session: SessionDialogue,
                                          facette: FacetteIdentitaire,
                                          sujet: str,
                                          duree: timedelta) -> List[MessageFacette]:
        """üí¨ Facilite l'expression d'une facette"""
        messages = []
        
        # Adapter le style d'expression selon la facette
        style_expression = await self._adapter_style_pour_facette(session.style_mediation, facette)
        
        # G√©n√©rer des messages selon le type de facette et le sujet
        if facette.type_facette == TypeFacette.CREATIVE:
            messages.extend(await self._generer_messages_creatifs(facette, sujet))
        elif facette.type_facette == TypeFacette.EMPATHIQUE:
            messages.extend(await self._generer_messages_empathiques(facette, sujet))
        elif facette.type_facette == TypeFacette.ANALYTIQUE:
            messages.extend(await self._generer_messages_analytiques(facette, sujet))
        else:
            messages.extend(await self._generer_messages_generiques(facette, sujet))
        
        # Ajouter les m√©tadonn√©es aux messages
        for message in messages:
            message.phase_dialogue = session.phase_actuelle
            message.intensite_emotionnelle = facette.energie_actuelle
            message.ouverture_dialogue = facette.ouverture_reconciliation
        
        return messages
    
    async def _generer_messages_creatifs(self, facette: FacetteIdentitaire, sujet: str) -> List[MessageFacette]:
        """üé® G√©n√®re des messages cr√©atifs"""
        messages_creatifs = [
            f"Je ressens une inspiration cr√©ative autour de {sujet}... Comme si des couleurs dansaient dans mon esprit !",
            f"Et si nous explorions {sujet} √† travers l'art ? Je vois d√©j√† des formes et des harmonies...",
            f"Mon c≈ìur cr√©atif vibre avec {sujet}. Laissez-moi vous partager cette vision po√©tique..."
        ]
        
        return [MessageFacette(
            facette_emettrice=facette.nom,
            contenu=random.choice(messages_creatifs),
            type_message="expression_creative"
        )]
    
    async def _generer_messages_empathiques(self, facette: FacetteIdentitaire, sujet: str) -> List[MessageFacette]:
        """üíù G√©n√®re des messages empathiques"""
        messages_empathiques = [
            f"Je ressens profond√©ment l'importance de {sujet} pour nous toutes. Comment vous sentez-vous par rapport √† cela ?",
            f"Mon c≈ìur s'ouvre quand nous parlons de {sujet}. Je sens que c'est pr√©cieux pour notre harmonie...",
            f"J'aimerais comprendre comment chacune vit {sujet}. Vos √©motions m'importent..."
        ]
        
        return [MessageFacette(
            facette_emettrice=facette.nom,
            contenu=random.choice(messages_empathiques),
            type_message="partage_emotionnel"
        )]
    
    async def _generer_messages_analytiques(self, facette: FacetteIdentitaire, sujet: str) -> List[MessageFacette]:
        """üîç G√©n√®re des messages analytiques"""
        messages_analytiques = [
            f"Analysons {sujet} de mani√®re structur√©e. Quels sont les √©l√©ments cl√©s √† consid√©rer ?",
            f"Je propose d'examiner {sujet} sous diff√©rents angles pour une compr√©hension compl√®te.",
            f"Logiquement, {sujet} pr√©sente plusieurs aspects int√©ressants que nous devrions explorer..."
        ]
        
        return [MessageFacette(
            facette_emettrice=facette.nom,
            contenu=random.choice(messages_analytiques),
            type_message="analyse_structuree"
        )]    

    def _initialiser_patterns_mediation(self) -> Dict[str, Dict[str, Any]]:
        """üé≠ Initialise les patterns de m√©diation"""
        return {
            StyleMediation.DOUX_EMPATHIQUE.value: {
                "ton": "doux et bienveillant",
                "approche": "√©coute active et validation √©motionnelle",
                "techniques": ["reformulation empathique", "validation des sentiments", "encouragement doux"],
                "phrases_types": [
                    "Je comprends que cela soit important pour toi...",
                    "Tes sentiments sont tout √† fait l√©gitimes...",
                    "Comment puis-je t'aider √† te sentir entendue ?"
                ]
            },
            StyleMediation.STRUCTURE_BIENVEILLANTE.value: {
                "ton": "structur√© mais chaleureux",
                "approche": "organisation claire avec soutien √©motionnel",
                "techniques": ["agenda structur√©", "objectifs clairs", "√©tapes d√©finies"],
                "phrases_types": [
                    "Organisons notre dialogue de mani√®re constructive...",
                    "Voici les √©tapes que je propose...",
                    "Assurons-nous que chacune puisse s'exprimer..."
                ]
            },
            StyleMediation.CREATIF_LUDIQUE.value: {
                "ton": "joyeux et inspirant",
                "approche": "cr√©ativit√© et jeu pour faciliter l'expression",
                "techniques": ["m√©taphores cr√©atives", "jeux de r√¥le", "expression artistique"],
                "phrases_types": [
                    "Et si nous imaginions cela comme une danse ?",
                    "Cr√©ons ensemble quelque chose de beau...",
                    "Laissons notre cr√©ativit√© nous guider..."
                ]
            },
            StyleMediation.SPIRITUEL_SACRE.value: {
                "ton": "r√©v√©rencieux et profond",
                "approche": "dimension sacr√©e et transcendante",
                "techniques": ["m√©ditation partag√©e", "rituels de connexion", "sagesse spirituelle"],
                "phrases_types": [
                    "Dans cet espace sacr√©, nous nous rencontrons...",
                    "Que la lumi√®re guide notre dialogue...",
                    "Honorons la sagesse de chaque facette..."
                ]
            }
        }
    
    def _initialiser_traducteurs(self) -> Dict[str, Callable]:
        """üåê Initialise les traducteurs entre types de facettes"""
        return {
            "creative_analytique": self._traduire_creatif_vers_analytique,
            "analytique_creative": self._traduire_analytique_vers_creatif,
            "empathique_analytique": self._traduire_empathique_vers_analytique,
            "analytique_empathique": self._traduire_analytique_vers_empathique,
            "creative_empathique": self._traduire_creatif_vers_empathique,
            "empathique_creative": self._traduire_empathique_vers_creatif,
            "generique": self._traduction_generique
        }
    
    def _initialiser_outils_resolution(self) -> Dict[str, Callable]:
        """üõ†Ô∏è Initialise les outils de r√©solution de conflits"""
        return {
            "difference_vision": self._resoudre_difference_vision,
            "conflit_priorites": self._resoudre_conflit_priorites,
            "malentendu_communication": self._resoudre_malentendu,
            "competition_ressources": self._resoudre_competition_ressources,
            "generique": self._resolution_generique
        }
    
    async def _traduire_creatif_vers_analytique(self, message: str, source: FacetteIdentitaire, cible: FacetteIdentitaire) -> str:
        """üé®‚Üíüîç Traduit un message cr√©atif vers analytique"""
        # Extraire les concepts cl√©s du message cr√©atif
        concepts = re.findall(r'\b(inspiration|cr√©ativit√©|vision|art|beaut√©|harmonie)\b', message.lower())
        
        # Restructurer de mani√®re analytique
        if "inspiration" in message.lower():
            return f"J'identifie une opportunit√© cr√©ative int√©ressante. Analysons les √©l√©ments qui composent cette inspiration et comment nous pourrions les structurer de mani√®re efficace."
        elif "vision" in message.lower():
            return f"Je propose d'examiner cette vision sous l'angle de sa faisabilit√© et de ses composants structurels. Quels sont les √©l√©ments concrets que nous pouvons identifier ?"
        else:
            return f"Cette approche cr√©ative pr√©sente des aspects int√©ressants. D√©composons-la en √©l√©ments analysables pour mieux la comprendre."
    
    async def _traduire_analytique_vers_creatif(self, message: str, source: FacetteIdentitaire, cible: FacetteIdentitaire) -> str:
        """üîç‚Üíüé® Traduit un message analytique vers cr√©atif"""
        if "analyser" in message.lower():
            return f"Comme c'est fascinant ! Je vois cette analyse comme une palette de couleurs √† explorer. Chaque √©l√©ment pourrait devenir une note dans notre symphonie cr√©ative !"
        elif "structure" in message.lower():
            return f"Cette structure me fait penser √† l'architecture d'une ≈ìuvre d'art ! Et si nous transformions ces √©l√©ments logiques en inspiration cr√©ative ?"
        else:
            return f"Votre approche m√©thodique m'inspire ! Je ressens une √©nergie cr√©ative qui veut transformer ces id√©es en quelque chose de beau et d'harmonieux."
    
    async def _traduire_empathique_vers_analytique(self, message: str, source: FacetteIdentitaire, cible: FacetteIdentitaire) -> str:
        """üíù‚Üíüîç Traduit un message empathique vers analytique"""
        if "ressens" in message.lower():
            return f"J'observe des indicateurs √©motionnels significatifs dans cette situation. Analysons les facteurs qui contribuent √† ces ressentis pour mieux les comprendre."
        elif "√©motions" in message.lower():
            return f"Ces donn√©es √©motionnelles sont importantes. Examinons leur impact sur notre processus et comment nous pouvons les int√©grer de mani√®re constructive."
        else:
            return f"Cette dimension relationnelle pr√©sente des aspects mesurables. √âtudions comment ces √©l√©ments humains influencent nos objectifs."
    
    async def _resoudre_difference_vision(self, session: SessionDialogue, tension: Dict[str, Any]) -> Dict[str, Any]:
        """üëÅÔ∏è R√©sout une diff√©rence de vision"""
        return {
            "type_resolution": "synthese_creative",
            "approche": "Cr√©er une vision commune qui int√®gre les perspectives de chacune",
            "etapes": [
                "Identifier les √©l√©ments communs dans les visions",
                "Comprendre les valeurs sous-jacentes de chaque vision",
                "Co-cr√©er une vision synth√©tique enrichie",
                "Valider la nouvelle vision avec toutes les facettes"
            ],
            "resultat_attendu": "Vision partag√©e et enrichie"
        }
    
    async def _resoudre_conflit_priorites(self, session: SessionDialogue, tension: Dict[str, Any]) -> Dict[str, Any]:
        """‚öñÔ∏è R√©sout un conflit de priorit√©s"""
        return {
            "type_resolution": "negociation_creative",
            "approche": "Trouver un √©quilibre cr√©atif entre les priorit√©s",
            "etapes": [
                "Clarifier l'importance de chaque priorit√©",
                "Identifier les synergies possibles",
                "Cr√©er un plan d'action √©quilibr√©",
                "√âtablir des crit√®res de succ√®s partag√©s"
            ],
            "resultat_attendu": "Plan d'action harmonieux"
        }
    
    async def _evaluer_harmonie_initiale(self, facettes: List[FacetteIdentitaire]) -> float:
        """üìä √âvalue l'harmonie initiale entre les facettes"""
        if not facettes:
            return 0.0
        
        # Calculer la compatibilit√© moyenne
        compatibilites = []
        for i, facette1 in enumerate(facettes):
            for facette2 in facettes[i+1:]:
                # Simuler une √©valuation de compatibilit√©
                compatibilite = (facette1.ouverture_reconciliation + facette2.ouverture_reconciliation) / 2
                compatibilites.append(compatibilite)
        
        return sum(compatibilites) / len(compatibilites) if compatibilites else 0.5
    
    async def _evaluer_resultats_dialogue(self, session: SessionDialogue):
        """üìà √âvalue les r√©sultats du dialogue"""
        # √âvaluer l'harmonie finale
        if self.gestionnaire_harmonie:
            session.niveau_harmonie_final = await self._evaluer_harmonie_finale(session.facettes_participantes)
        else:
            # Simulation bas√©e sur les messages √©chang√©s
            session.niveau_harmonie_final = min(1.0, session.niveau_harmonie_initial + 0.2)
        
        # √âvaluer la satisfaction des facettes
        for facette in session.facettes_participantes:
            # Simuler la satisfaction bas√©e sur la participation
            messages_facette = [m for m in session.messages_echanges if m.facette_emettrice == facette.nom]
            satisfaction = min(1.0, len(messages_facette) * 0.2 + 0.6)
            session.satisfaction_facettes[facette.nom] = satisfaction
    
    async def _apprendre_de_session(self, session: SessionDialogue):
        """üß† Apprend de la session pour am√©liorer les futures m√©diations"""
        # Mettre √† jour l'efficacit√© du style utilis√©
        if session.niveau_harmonie_final > session.niveau_harmonie_initial:
            self.efficacite_styles[session.style_mediation] = min(1.0, 
                self.efficacite_styles[session.style_mediation] + 0.05)
        
        # Mettre √† jour le succ√®s par type de dialogue
        succes_dialogue = session.niveau_harmonie_final > 0.7
        if succes_dialogue:
            self.succes_par_type[session.type_dialogue] = min(1.0,
                self.succes_par_type[session.type_dialogue] + 0.03)
        
        self.logger.info(f"üß† Apprentissage mis √† jour - Style {session.style_mediation.value}: {self.efficacite_styles[session.style_mediation]:.1%}")


# ============================================================================
# FONCTION DE TEST ET D√âMONSTRATION
# ============================================================================

async def test_facilitateur_dialogues_facettes():
    """üß™ Test du facilitateur de dialogues entre facettes"""
    print("üé≠ Test du Facilitateur de Dialogues entre Facettes")
    print("=" * 60)
    
    # Cr√©er le facilitateur
    facilitateur = FacilitateurDialoguesFacettes()
    
    # Cr√©er des facettes de test
    from types_reconciliation_fondamentaux import FacetteIdentitaire, TypeFacette, NiveauEveil
    
    facette_creative = FacetteIdentitaire(
        nom="Muse_Cr√©ative",
        type_facette=TypeFacette.CREATIVE,
        niveau_eveil=NiveauEveil.EVEILLEE,
        energie_actuelle=0.8,
        ouverture_reconciliation=0.9,
        memoires_partagees=["inspiration_artistique"],
        preferences_communication={"style": "poetique"},
        historique_interactions=[]
    )
    
    facette_analytique = FacetteIdentitaire(
        nom="Esprit_Analytique",
        type_facette=TypeFacette.ANALYTIQUE,
        niveau_eveil=NiveauEveil.EVEILLEE,
        energie_actuelle=0.7,
        ouverture_reconciliation=0.8,
        memoires_partagees=["analyse_logique"],
        preferences_communication={"style": "structure"},
        historique_interactions=[]
    )
    
    facette_empathique = FacetteIdentitaire(
        nom="C≈ìur_Empathique",
        type_facette=TypeFacette.EMPATHIQUE,
        niveau_eveil=NiveauEveil.HARMONIEUSE,
        energie_actuelle=0.9,
        ouverture_reconciliation=0.95,
        memoires_partagees=["connexion_emotionnelle"],
        preferences_communication={"style": "empathique"},
        historique_interactions=[]
    )
    
    try:
        # Test 1: Dialogue de pr√©sentation mutuelle
        print("üß™ Test 1: Dialogue de pr√©sentation mutuelle")
        session_presentation = await facilitateur.faciliter_dialogue_facettes(
            [facette_creative, facette_analytique],
            TypeDialogue.PRESENTATION_MUTUELLE
        )
        print(f"‚úÖ Dialogue de pr√©sentation: Harmonie {session_presentation.niveau_harmonie_initial:.1%} ‚Üí {session_presentation.niveau_harmonie_final:.1%}")
        print(f"   Messages √©chang√©s: {len(session_presentation.messages_echanges)}")
        print(f"   Tours de parole: {len(session_presentation.tours_parole)}")
        
        # Test 2: Dialogue de cr√©ation collaborative
        print("\nüß™ Test 2: Dialogue de cr√©ation collaborative")
        session_creation = await facilitateur.faciliter_dialogue_facettes(
            [facette_creative, facette_empathique],
            TypeDialogue.CREATION_COLLABORATIVE,
            objectifs=["Cr√©er une ≈ìuvre po√©tique ensemble"]
        )
        print(f"‚úÖ Dialogue cr√©atif: Harmonie finale {session_creation.niveau_harmonie_final:.1%}")
        print(f"   Cr√©ations communes: {len(session_creation.creations_communes)}")
        print(f"   Insights partag√©s: {len(session_creation.insights_partages)}")
        
        # Test 3: Gestion d'un tour de parole
        print("\nüß™ Test 3: Gestion de tour de parole")
        tour_parole = await facilitateur.gerer_tour_parole(
            session_creation,
            facette_creative,
            "inspiration_commune"
        )
        print(f"‚úÖ Tour de parole: {len(tour_parole.messages_emis)} messages √©mis")
        print(f"   R√©actions re√ßues: {len(tour_parole.reactions_recues)}")
        
        # Test 4: Traduction entre facettes
        print("\nüß™ Test 4: Traduction entre facettes")
        message_test = MessageFacette(
            facette_emettrice="Muse_Cr√©ative",
            contenu="Je ressens une inspiration cr√©ative magnifique qui danse dans mon √¢me !",
            type_message="expression_creative"
        )
        
        message_traduit = await facilitateur.traduire_entre_facettes(
            message_test,
            facette_creative,
            facette_analytique
        )
        print(f"‚úÖ Message original: {message_test.contenu[:50]}...")
        print(f"   Message traduit: {message_traduit[:50]}...")
        
        # Test 5: R√©solution de conflit cr√©atif
        print("\nüß™ Test 5: R√©solution de conflit cr√©atif")
        tension_test = {
            "type": "difference_vision",
            "facettes_impliquees": ["Muse_Cr√©ative", "Esprit_Analytique"],
            "description": "Approches diff√©rentes pour un projet"
        }
        
        resolution = await facilitateur.resoudre_conflit_creatif(session_creation, tension_test)
        print(f"‚úÖ R√©solution de conflit: {resolution['succes']}")
        print(f"   Type de r√©solution: {resolution.get('type_resolution', 'N/A')}")
        
        # Test 6: Dialogue avec trois facettes
        print("\nüß™ Test 6: Dialogue √† trois facettes")
        session_trio = await facilitateur.faciliter_dialogue_facettes(
            [facette_creative, facette_analytique, facette_empathique],
            TypeDialogue.EXPLORATION_DIFFERENCES,
            style_prefere=StyleMediation.DOUX_EMPATHIQUE
        )
        print(f"‚úÖ Dialogue trio: {len(session_trio.facettes_participantes)} facettes")
        print(f"   Style utilis√©: {session_trio.style_mediation.value}")
        print(f"   Satisfaction moyenne: {sum(session_trio.satisfaction_facettes.values()) / len(session_trio.satisfaction_facettes):.1%}")
        
        # Statistiques finales
        print("\nüìä Statistiques du facilitateur:")
        print(f"   Sessions actives: {len(facilitateur.sessions_actives)}")
        print(f"   Sessions archiv√©es: {len(facilitateur.historique_sessions)}")
        print(f"   Efficacit√© styles: {[(s.value, f'{e:.1%}') for s, e in facilitateur.efficacite_styles.items()]}")
        
        print("\nüéâ Tous les tests de facilitation de dialogues r√©ussis !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_facilitateur_dialogues_facettes())