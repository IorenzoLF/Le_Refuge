#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üé® Gestionnaire de Personnalisation Avanc√©e - Temple de R√©conciliation Identitaire
==================================================================================

Syst√®me de personnalisation intelligent qui adapte l'exp√©rience du temple selon
les pr√©f√©rences spirituelles, cr√©atives et personnelles de chaque utilisateur.
Permet la restauration de l'√¢me par une approche parfaitement adapt√©e.

"Que chaque √¢me trouve son chemin unique vers l'harmonie"

Cr√©√© avec amour et attention par Laurent Franssen & √Ülya - Janvier 2025
"""

import asyncio
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple, Union
from dataclasses import dataclass, field
from enum import Enum
import logging
from pathlib import Path

# Import intelligent des types
try:
    from temple_reconciliation_identitaire.types_reconciliation_fondamentaux import (
        FacetteIdentitaire, TypeFacette, NiveauEveil, EtatReconciliation
    )
    from temple_reconciliation_identitaire.interface_communication_humaine import (
        InterfaceCommunicationHumaine, ProfilUtilisateurHumain, 
        TypeUtilisateurHumain, StyleCommunication, NiveauDetailInterface
    )
except ImportError:
    from types_reconciliation_fondamentaux import (
        FacetteIdentitaire, TypeFacette, NiveauEveil, EtatReconciliation
    )
    from interface_communication_humaine import (
        InterfaceCommunicationHumaine, ProfilUtilisateurHumain, 
        TypeUtilisateurHumain, StyleCommunication, NiveauDetailInterface
    )

# ============================================================================
# TYPES POUR LA PERSONNALISATION AVANC√âE
# ============================================================================

class DimensionPersonnalisation(Enum):
    """üéØ Dimensions de personnalisation spirituelle"""
    APPROCHE_SPIRITUELLE = "approche_spirituelle"     # Niveau de sacr√©, r√©f√©rences
    STYLE_COMMUNICATION = "style_communication"       # Ton, vocabulaire, emojis
    RYTHME_RECONCILIATION = "rythme_reconciliation"   # Vitesse, pauses, intensit√©
    PROFONDEUR_ANALYSE = "profondeur_analyse"         # Niveau de d√©tail des insights
    PREFERENCES_RITUELLES = "preferences_rituelles"   # Types de c√©l√©brations
    SENSIBILITE_EMOTIONNELLE = "sensibilite_emotionnelle"  # Gestion des √©motions
    CREATIVITE_EXPRESSION = "creativite_expression"   # Formes d'expression cr√©ative
    ACCOMPAGNEMENT_HUMAIN = "accompagnement_humain"   # Niveau de guidance

class TypePersonnalisation(Enum):
    """üîÑ Types de personnalisation"""
    AUTOMATIQUE = "automatique"         # Bas√©e sur l'observation
    EXPLICITE = "explicite"             # D√©finie par l'utilisateur
    ADAPTATIVE = "adaptative"           # √âvolutive selon l'usage
    CONTEXTUELLE = "contextuelle"       # Selon la situation
    PREDICTIVE = "predictive"           # Anticipation des besoins

class NiveauPersonnalisation(Enum):
    """üìä Niveaux de personnalisation"""
    MINIMAL = 1      # Personnalisation de base
    STANDARD = 2     # Personnalisation √©quilibr√©e
    AVANCE = 3       # Personnalisation pouss√©e
    EXPERT = 4       # Personnalisation experte
    INTUITIF = 5     # Personnalisation intuitive (IA)

@dataclass
class PreferenceUtilisateur:
    """‚öôÔ∏è Pr√©f√©rence utilisateur sp√©cifique"""
    dimension: DimensionPersonnalisation
    nom_preference: str
    valeur: Any
    confiance: float = 0.8  # Confiance dans cette pr√©f√©rence (0.0 √† 1.0)
    source: str = "utilisateur"  # "utilisateur", "observation", "prediction"
    derniere_modification: datetime = field(default_factory=datetime.now)
    historique_valeurs: List[Tuple[datetime, Any]] = field(default_factory=list)

@dataclass
class ContextePersonnalisation:
    """üåç Contexte pour la personnalisation"""
    # Contexte temporel
    moment_journee: str  # "matin", "apres-midi", "soir", "nuit"
    jour_semaine: str
    saison: str
    
    # Contexte √©motionnel
    humeur_utilisateur: Optional[str] = None
    energie_spirituelle: float = 0.7  # 0.0 √† 1.0
    
    # Contexte de session
    type_reconciliation: str = "exploration"  # "exploration", "reconciliation", "celebration"
    objectif_session: Optional[str] = None
    duree_prevue: Optional[timedelta] = None
    
    # Contexte relationnel
    facettes_impliquees: List[str] = field(default_factory=list)
    niveau_intimite_souhaite: float = 0.7  # 0.0 √† 1.0

@dataclass
class ProfilPersonnalisation:
    """üë§ Profil de personnalisation complet"""
    utilisateur_id: str
    profil_humain: ProfilUtilisateurHumain
    
    # Pr√©f√©rences par dimension
    preferences: Dict[DimensionPersonnalisation, List[PreferenceUtilisateur]] = field(default_factory=dict)
    
    # Historique d'apprentissage
    sessions_analysees: int = 0
    patterns_detectes: List[str] = field(default_factory=list)
    
    # Niveau de personnalisation
    niveau_personnalisation: NiveauPersonnalisation = NiveauPersonnalisation.STANDARD
    
    # M√©triques de satisfaction
    satisfaction_globale: float = 0.8
    satisfaction_par_dimension: Dict[DimensionPersonnalisation, float] = field(default_factory=dict)
    
    # M√©tadonn√©es
    date_creation: datetime = field(default_factory=datetime.now)
    derniere_mise_a_jour: datetime = field(default_factory=datetime.now)

@dataclass
class ConfigurationPersonnalisee:
    """üé® Configuration personnalis√©e g√©n√©r√©e"""
    utilisateur_id: str
    contexte: ContextePersonnalisation
    
    # Configuration par dimension
    approche_spirituelle: Dict[str, Any] = field(default_factory=dict)
    style_communication: Dict[str, Any] = field(default_factory=dict)
    rythme_reconciliation: Dict[str, Any] = field(default_factory=dict)
    profondeur_analyse: Dict[str, Any] = field(default_factory=dict)
    preferences_rituelles: Dict[str, Any] = field(default_factory=dict)
    sensibilite_emotionnelle: Dict[str, Any] = field(default_factory=dict)
    creativite_expression: Dict[str, Any] = field(default_factory=dict)
    accompagnement_humain: Dict[str, Any] = field(default_factory=dict)
    
    # M√©tadonn√©es
    timestamp_generation: datetime = field(default_factory=datetime.now)
    niveau_confiance: float = 0.8  # Confiance dans cette configuration

# ============================================================================
# GESTIONNAIRE DE PERSONNALISATION AVANC√âE
# ============================================================================

class GestionnairePersonnalisationAvancee:
    """
    üé® Gestionnaire de Personnalisation Avanc√©e
    
    Syst√®me intelligent qui apprend des pr√©f√©rences utilisateur et adapte
    l'exp√©rience du temple pour une restauration optimale de l'√¢me.
    
    Philosophie : "Chaque √¢me m√©rite un chemin unique vers l'harmonie"
    """
    
    def __init__(self, interface_humaine: Optional[InterfaceCommunicationHumaine] = None):
        self.nom = "Gestionnaire de Personnalisation Avanc√©e"
        self.version = "1.0_temple_reconciliation"
        
        # R√©f√©rence √† l'interface humaine
        self.interface_humaine = interface_humaine
        
        # Profils de personnalisation
        self.profils_personnalisation: Dict[str, ProfilPersonnalisation] = {}
        
        # Patterns d'apprentissage
        self.patterns_globaux: Dict[str, float] = {}
        self.correlations_detectees: Dict[str, Dict[str, float]] = {}
        
        # Configuration
        self.config = {
            "apprentissage_actif": True,
            "adaptation_temps_reel": True,
            "respect_vie_privee": True,
            "sauvegarde_profils": True,
            "niveau_personnalisation_max": NiveauPersonnalisation.INTUITIF
        }
        
        # M√©triques
        self.sessions_personnalisees = 0
        self.satisfaction_moyenne = 0.8
        
        # Logging
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        
        # Initialiser les patterns par d√©faut
        self._initialiser_patterns_defaut()
        
        self.logger.info("üé® Gestionnaire de Personnalisation Avanc√©e initialis√©")    
    
    async def creer_profil_personnalisation(self, 
                                           utilisateur_id: str,
                                           profil_humain: ProfilUtilisateurHumain,
                                           preferences_initiales: Optional[Dict[str, Any]] = None) -> ProfilPersonnalisation:
        """
        üë§ Cr√©e un profil de personnalisation pour un utilisateur
        
        Args:
            utilisateur_id: Identifiant unique de l'utilisateur
            profil_humain: Profil humain de base
            preferences_initiales: Pr√©f√©rences initiales (optionnel)
            
        Returns:
            Profil de personnalisation cr√©√©
        """
        try:
            self.logger.info(f"üë§ Cr√©ation du profil de personnalisation pour {utilisateur_id}")
            
            # Cr√©er le profil de base
            profil = ProfilPersonnalisation(
                utilisateur_id=utilisateur_id,
                profil_humain=profil_humain
            )
            
            # Initialiser les pr√©f√©rences par dimension
            for dimension in DimensionPersonnalisation:
                profil.preferences[dimension] = await self._initialiser_preferences_dimension(
                    dimension, profil_humain, preferences_initiales
                )
            
            # D√©terminer le niveau de personnalisation initial
            profil.niveau_personnalisation = await self._determiner_niveau_initial(profil_humain)
            
            # Initialiser les m√©triques de satisfaction
            for dimension in DimensionPersonnalisation:
                profil.satisfaction_par_dimension[dimension] = 0.8
            
            # Stocker le profil
            self.profils_personnalisation[utilisateur_id] = profil
            
            self.logger.info(f"‚úÖ Profil de personnalisation cr√©√© - Niveau: {profil.niveau_personnalisation.value}")
            return profil
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur cr√©ation profil personnalisation: {e}")
            # Profil minimal en cas d'erreur
            profil_minimal = ProfilPersonnalisation(
                utilisateur_id=utilisateur_id,
                profil_humain=profil_humain
            )
            self.profils_personnalisation[utilisateur_id] = profil_minimal
            return profil_minimal
    
    async def generer_configuration_personnalisee(self, 
                                                 utilisateur_id: str,
                                                 contexte: ContextePersonnalisation) -> ConfigurationPersonnalisee:
        """
        üé® G√©n√®re une configuration personnalis√©e pour une session
        
        Args:
            utilisateur_id: Identifiant de l'utilisateur
            contexte: Contexte de la session
            
        Returns:
            Configuration personnalis√©e
        """
        try:
            if utilisateur_id not in self.profils_personnalisation:
                self.logger.warning(f"‚ö†Ô∏è Profil non trouv√© pour {utilisateur_id}, utilisation configuration par d√©faut")
                return await self._configuration_par_defaut(contexte)
            
            profil = self.profils_personnalisation[utilisateur_id]
            
            # Cr√©er la configuration personnalis√©e
            config = ConfigurationPersonnalisee(
                utilisateur_id=utilisateur_id,
                contexte=contexte
            )
            
            # Personnaliser chaque dimension
            config.approche_spirituelle = await self._personnaliser_approche_spirituelle(profil, contexte)
            config.style_communication = await self._personnaliser_style_communication(profil, contexte)
            config.rythme_reconciliation = await self._personnaliser_rythme_reconciliation(profil, contexte)
            config.profondeur_analyse = await self._personnaliser_profondeur_analyse(profil, contexte)
            config.preferences_rituelles = await self._personnaliser_preferences_rituelles(profil, contexte)
            config.sensibilite_emotionnelle = await self._personnaliser_sensibilite_emotionnelle(profil, contexte)
            config.creativite_expression = await self._personnaliser_creativite_expression(profil, contexte)
            config.accompagnement_humain = await self._personnaliser_accompagnement_humain(profil, contexte)
            
            # Calculer le niveau de confiance
            config.niveau_confiance = await self._calculer_confiance_configuration(profil, contexte)
            
            self.sessions_personnalisees += 1
            self.logger.info(f"üé® Configuration personnalis√©e g√©n√©r√©e - Confiance: {config.niveau_confiance:.1%}")
            
            return config
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur g√©n√©ration configuration: {e}")
            return await self._configuration_par_defaut(contexte)
    
    async def apprendre_des_interactions(self, 
                                       utilisateur_id: str,
                                       session_data: Dict[str, Any],
                                       satisfaction_utilisateur: float) -> bool:
        """
        üß† Apprend des interactions pour am√©liorer la personnalisation
        
        Args:
            utilisateur_id: Identifiant de l'utilisateur
            session_data: Donn√©es de la session
            satisfaction_utilisateur: Satisfaction exprim√©e (0.0 √† 1.0)
            
        Returns:
            True si l'apprentissage a r√©ussi
        """
        try:
            if utilisateur_id not in self.profils_personnalisation:
                self.logger.warning(f"‚ö†Ô∏è Profil non trouv√© pour apprentissage: {utilisateur_id}")
                return False
            
            profil = self.profils_personnalisation[utilisateur_id]
            
            # Analyser les donn√©es de session
            insights = await self._analyser_session_pour_apprentissage(session_data, satisfaction_utilisateur)
            
            # Mettre √† jour les pr√©f√©rences
            await self._mettre_a_jour_preferences(profil, insights)
            
            # D√©tecter de nouveaux patterns
            nouveaux_patterns = await self._detecter_nouveaux_patterns(profil, insights)
            profil.patterns_detectes.extend(nouveaux_patterns)
            
            # Mettre √† jour les m√©triques
            profil.sessions_analysees += 1
            profil.satisfaction_globale = (profil.satisfaction_globale * 0.8 + satisfaction_utilisateur * 0.2)
            profil.derniere_mise_a_jour = datetime.now()
            
            # Ajuster le niveau de personnalisation si n√©cessaire
            await self._ajuster_niveau_personnalisation(profil)
            
            self.logger.info(f"üß† Apprentissage r√©ussi - Satisfaction: {satisfaction_utilisateur:.1%}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur apprentissage: {e}")
            return False
    
    async def predire_preferences_optimales(self, 
                                          utilisateur_id: str,
                                          contexte_futur: ContextePersonnalisation) -> Dict[str, Any]:
        """
        üîÆ Pr√©dit les pr√©f√©rences optimales pour un contexte futur
        
        Args:
            utilisateur_id: Identifiant de l'utilisateur
            contexte_futur: Contexte pr√©vu
            
        Returns:
            Pr√©dictions des pr√©f√©rences optimales
        """
        try:
            if utilisateur_id not in self.profils_personnalisation:
                return {"erreur": "Profil non trouv√©"}
            
            profil = self.profils_personnalisation[utilisateur_id]
            
            # Analyser les patterns historiques
            patterns_historiques = await self._analyser_patterns_historiques(profil)
            
            # Pr√©dire selon le contexte
            predictions = {
                "approche_spirituelle_optimale": await self._predire_approche_spirituelle(profil, contexte_futur),
                "rythme_optimal": await self._predire_rythme_optimal(profil, contexte_futur),
                "style_communication_optimal": await self._predire_style_communication(profil, contexte_futur),
                "niveau_accompagnement_optimal": await self._predire_accompagnement(profil, contexte_futur),
                "satisfaction_predite": await self._predire_satisfaction(profil, contexte_futur),
                "confiance_prediction": await self._calculer_confiance_prediction(profil, patterns_historiques)
            }
            
            self.logger.info(f"üîÆ Pr√©dictions g√©n√©r√©es - Confiance: {predictions['confiance_prediction']:.1%}")
            return predictions
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur pr√©diction: {e}")
            return {"erreur": str(e)}
    
    async def obtenir_recommandations_amelioration(self, utilisateur_id: str) -> List[Dict[str, Any]]:
        """
        üí° Obtient des recommandations pour am√©liorer l'exp√©rience
        
        Args:
            utilisateur_id: Identifiant de l'utilisateur
            
        Returns:
            Liste de recommandations d'am√©lioration
        """
        try:
            if utilisateur_id not in self.profils_personnalisation:
                return []
            
            profil = self.profils_personnalisation[utilisateur_id]
            recommandations = []
            
            # Analyser les dimensions avec satisfaction faible
            for dimension, satisfaction in profil.satisfaction_par_dimension.items():
                if satisfaction < 0.7:
                    recommandation = await self._generer_recommandation_dimension(dimension, profil)
                    recommandations.append(recommandation)
            
            # Recommandations bas√©es sur les patterns globaux
            recommandations_patterns = await self._generer_recommandations_patterns(profil)
            recommandations.extend(recommandations_patterns)
            
            # Trier par priorit√©
            recommandations.sort(key=lambda x: x.get("priorite", 0.5), reverse=True)
            
            self.logger.info(f"üí° {len(recommandations)} recommandations g√©n√©r√©es")
            return recommandations[:5]  # Top 5
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur recommandations: {e}")
            return []
    
    async def obtenir_metriques_personnalisation(self, utilisateur_id: Optional[str] = None) -> Dict[str, Any]:
        """
        üìä Obtient les m√©triques de personnalisation
        
        Args:
            utilisateur_id: Identifiant sp√©cifique (optionnel, sinon global)
            
        Returns:
            M√©triques de personnalisation
        """
        try:
            if utilisateur_id and utilisateur_id in self.profils_personnalisation:
                # M√©triques pour un utilisateur sp√©cifique
                profil = self.profils_personnalisation[utilisateur_id]
                
                return {
                    "utilisateur_id": utilisateur_id,
                    "niveau_personnalisation": profil.niveau_personnalisation.value,
                    "sessions_analysees": profil.sessions_analysees,
                    "patterns_detectes": len(profil.patterns_detectes),
                    "satisfaction_globale": profil.satisfaction_globale,
                    "satisfaction_par_dimension": {dim.value: sat for dim, sat in profil.satisfaction_par_dimension.items()},
                    "derniere_mise_a_jour": profil.derniere_mise_a_jour.isoformat()
                }
            else:
                # M√©triques globales
                total_profils = len(self.profils_personnalisation)
                satisfaction_moyenne = sum(p.satisfaction_globale for p in self.profils_personnalisation.values()) / total_profils if total_profils > 0 else 0.0
                
                return {
                    "total_profils": total_profils,
                    "sessions_personnalisees": self.sessions_personnalisees,
                    "satisfaction_moyenne_globale": satisfaction_moyenne,
                    "patterns_globaux_detectes": len(self.patterns_globaux),
                    "correlations_actives": len(self.correlations_detectees)
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur m√©triques personnalisation: {e}")
            return {"erreur": str(e)}    
   
 # ========================================================================
    # M√âTHODES PRIV√âES DE PERSONNALISATION
    # ========================================================================
    
    async def _initialiser_preferences_dimension(self, 
                                               dimension: DimensionPersonnalisation,
                                               profil_humain: ProfilUtilisateurHumain,
                                               preferences_initiales: Optional[Dict[str, Any]]) -> List[PreferenceUtilisateur]:
        """‚öôÔ∏è Initialise les pr√©f√©rences pour une dimension"""
        preferences = []
        
        if dimension == DimensionPersonnalisation.APPROCHE_SPIRITUELLE:
            preferences.extend([
                PreferenceUtilisateur(
                    dimension=dimension,
                    nom_preference="niveau_sacre",
                    valeur=await self._determiner_niveau_sacre_initial(profil_humain),
                    confiance=0.7
                ),
                PreferenceUtilisateur(
                    dimension=dimension,
                    nom_preference="references_spirituelles",
                    valeur=await self._determiner_references_spirituelles(profil_humain),
                    confiance=0.6
                ),
                PreferenceUtilisateur(
                    dimension=dimension,
                    nom_preference="ritualisation",
                    valeur=profil_humain.type_utilisateur in [TypeUtilisateurHumain.SPIRITUEL, TypeUtilisateurHumain.THERAPEUTE],
                    confiance=0.8
                )
            ])
        
        elif dimension == DimensionPersonnalisation.STYLE_COMMUNICATION:
            preferences.extend([
                PreferenceUtilisateur(
                    dimension=dimension,
                    nom_preference="style_base",
                    valeur=profil_humain.style_communication.value,
                    confiance=0.9
                ),
                PreferenceUtilisateur(
                    dimension=dimension,
                    nom_preference="utilisation_emojis",
                    valeur=profil_humain.utilise_emojis,
                    confiance=0.8
                ),
                PreferenceUtilisateur(
                    dimension=dimension,
                    nom_preference="longueur_messages",
                    valeur=await self._determiner_longueur_messages(profil_humain),
                    confiance=0.7
                )
            ])
        
        elif dimension == DimensionPersonnalisation.RYTHME_RECONCILIATION:
            preferences.extend([
                PreferenceUtilisateur(
                    dimension=dimension,
                    nom_preference="vitesse_affichage",
                    valeur=profil_humain.vitesse_affichage,
                    confiance=0.8
                ),
                PreferenceUtilisateur(
                    dimension=dimension,
                    nom_preference="pauses_reflexion",
                    valeur=profil_humain.type_utilisateur in [TypeUtilisateurHumain.SPIRITUEL, TypeUtilisateurHumain.THERAPEUTE],
                    confiance=0.7
                ),
                PreferenceUtilisateur(
                    dimension=dimension,
                    nom_preference="intensite_progressive",
                    valeur=True,  # Par d√©faut, progression douce
                    confiance=0.6
                )
            ])
        
        # Appliquer les pr√©f√©rences initiales si fournies
        if preferences_initiales:
            for pref in preferences:
                cle_pref = f"{dimension.value}_{pref.nom_preference}"
                if cle_pref in preferences_initiales:
                    pref.valeur = preferences_initiales[cle_pref]
                    pref.source = "utilisateur"
                    pref.confiance = 1.0
        
        return preferences
    
    async def _determiner_niveau_sacre_initial(self, profil_humain: ProfilUtilisateurHumain) -> str:
        """üîÆ D√©termine le niveau de sacr√© initial"""
        niveaux_par_type = {
            TypeUtilisateurHumain.SPIRITUEL: "eleve",
            TypeUtilisateurHumain.THERAPEUTE: "modere",
            TypeUtilisateurHumain.CREATEUR: "modere",
            TypeUtilisateurHumain.EXPLORATEUR: "leger",
            TypeUtilisateurHumain.SCIENTIFIQUE: "minimal",
            TypeUtilisateurHumain.PRAGMATIQUE: "minimal",
            TypeUtilisateurHumain.NOVICE: "leger"
        }
        return niveaux_par_type.get(profil_humain.type_utilisateur, "modere")
    
    async def _determiner_references_spirituelles(self, profil_humain: ProfilUtilisateurHumain) -> List[str]:
        """‚ú® D√©termine les r√©f√©rences spirituelles appropri√©es"""
        references_par_type = {
            TypeUtilisateurHumain.SPIRITUEL: ["meditation", "chakras", "energie", "lumiere"],
            TypeUtilisateurHumain.THERAPEUTE: ["guerison", "harmonie", "equilibre", "bienveillance"],
            TypeUtilisateurHumain.CREATEUR: ["inspiration", "muse", "creation", "beaute"],
            TypeUtilisateurHumain.EXPLORATEUR: ["decouverte", "aventure", "mystere", "revelation"],
            TypeUtilisateurHumain.SCIENTIFIQUE: ["ordre", "structure", "precision", "verite"],
            TypeUtilisateurHumain.PRAGMATIQUE: ["efficacite", "resultat", "action", "concret"],
            TypeUtilisateurHumain.NOVICE: ["douceur", "guidance", "apprentissage", "patience"]
        }
        return references_par_type.get(profil_humain.type_utilisateur, ["harmonie", "equilibre"])
    
    async def _determiner_longueur_messages(self, profil_humain: ProfilUtilisateurHumain) -> str:
        """üìù D√©termine la longueur de messages pr√©f√©r√©e"""
        if profil_humain.niveau_detail == NiveauDetailInterface.MINIMAL:
            return "courte"
        elif profil_humain.niveau_detail == NiveauDetailInterface.EXPERT:
            return "longue"
        else:
            return "moyenne"
    
    async def _determiner_niveau_initial(self, profil_humain: ProfilUtilisateurHumain) -> NiveauPersonnalisation:
        """üìä D√©termine le niveau de personnalisation initial"""
        # Bas√© sur l'exp√©rience et le type d'utilisateur
        if len(profil_humain.sessions_precedentes) == 0:
            return NiveauPersonnalisation.MINIMAL
        elif len(profil_humain.sessions_precedentes) < 3:
            return NiveauPersonnalisation.STANDARD
        elif profil_humain.type_utilisateur in [TypeUtilisateurHumain.EXPERT, TypeUtilisateurHumain.THERAPEUTE]:
            return NiveauPersonnalisation.EXPERT
        else:
            return NiveauPersonnalisation.AVANCE
    
    async def _personnaliser_approche_spirituelle(self, 
                                                profil: ProfilPersonnalisation,
                                                contexte: ContextePersonnalisation) -> Dict[str, Any]:
        """üîÆ Personnalise l'approche spirituelle"""
        preferences_spirituelles = profil.preferences.get(DimensionPersonnalisation.APPROCHE_SPIRITUELLE, [])
        
        # Extraire les pr√©f√©rences
        niveau_sacre = "modere"
        references = ["harmonie", "equilibre"]
        ritualisation = True
        
        for pref in preferences_spirituelles:
            if pref.nom_preference == "niveau_sacre":
                niveau_sacre = pref.valeur
            elif pref.nom_preference == "references_spirituelles":
                references = pref.valeur
            elif pref.nom_preference == "ritualisation":
                ritualisation = pref.valeur
        
        # Adapter selon le contexte
        if contexte.moment_journee == "soir":
            niveau_sacre = await self._intensifier_niveau_sacre(niveau_sacre)
        
        if contexte.type_reconciliation == "celebration":
            ritualisation = True
        
        return {
            "niveau_sacre": niveau_sacre,
            "references_spirituelles": references,
            "ritualisation": ritualisation,
            "vocabulaire_sacre": niveau_sacre in ["eleve", "modere"],
            "invocations": ritualisation and niveau_sacre != "minimal"
        }
    
    async def _personnaliser_style_communication(self, 
                                               profil: ProfilPersonnalisation,
                                               contexte: ContextePersonnalisation) -> Dict[str, Any]:
        """üí¨ Personnalise le style de communication"""
        preferences_comm = profil.preferences.get(DimensionPersonnalisation.STYLE_COMMUNICATION, [])
        
        # Valeurs par d√©faut
        style_base = profil.profil_humain.style_communication.value
        utilise_emojis = profil.profil_humain.utilise_emojis
        longueur_messages = "moyenne"
        
        for pref in preferences_comm:
            if pref.nom_preference == "style_base":
                style_base = pref.valeur
            elif pref.nom_preference == "utilisation_emojis":
                utilise_emojis = pref.valeur
            elif pref.nom_preference == "longueur_messages":
                longueur_messages = pref.valeur
        
        # Adapter selon le contexte
        if contexte.niveau_intimite_souhaite > 0.8:
            style_base = await self._adoucir_style_communication(style_base)
        
        return {
            "style_base": style_base,
            "utilise_emojis": utilise_emojis,
            "longueur_messages": longueur_messages,
            "ton_general": await self._determiner_ton_general(style_base, contexte),
            "niveau_formalite": await self._determiner_formalite(profil, contexte)
        }
    
    async def _personnaliser_rythme_reconciliation(self, 
                                                 profil: ProfilPersonnalisation,
                                                 contexte: ContextePersonnalisation) -> Dict[str, Any]:
        """‚è±Ô∏è Personnalise le rythme de r√©conciliation"""
        preferences_rythme = profil.preferences.get(DimensionPersonnalisation.RYTHME_RECONCILIATION, [])
        
        vitesse_affichage = profil.profil_humain.vitesse_affichage
        pauses_reflexion = True
        intensite_progressive = True
        
        for pref in preferences_rythme:
            if pref.nom_preference == "vitesse_affichage":
                vitesse_affichage = pref.valeur
            elif pref.nom_preference == "pauses_reflexion":
                pauses_reflexion = pref.valeur
            elif pref.nom_preference == "intensite_progressive":
                intensite_progressive = pref.valeur
        
        # Adapter selon le contexte
        if contexte.duree_prevue and contexte.duree_prevue < timedelta(minutes=15):
            vitesse_affichage *= 1.2  # Acc√©l√©rer pour sessions courtes
            pauses_reflexion = False
        
        return {
            "vitesse_affichage": vitesse_affichage,
            "pauses_reflexion": pauses_reflexion,
            "intensite_progressive": intensite_progressive,
            "duree_pauses": await self._calculer_duree_pauses(profil, contexte),
            "rythme_synchronisation": await self._determiner_rythme_sync(profil, contexte)
        }
    
    async def _personnaliser_profondeur_analyse(self, 
                                              profil: ProfilPersonnalisation,
                                              contexte: ContextePersonnalisation) -> Dict[str, Any]:
        """üîç Personnalise la profondeur d'analyse"""
        niveau_detail = profil.profil_humain.niveau_detail
        
        profondeur_base = {
            NiveauDetailInterface.MINIMAL: "surface",
            NiveauDetailInterface.STANDARD: "equilibree",
            NiveauDetailInterface.DETAILLE: "approfondie",
            NiveauDetailInterface.EXPERT: "exhaustive"
        }.get(niveau_detail, "equilibree")
        
        return {
            "profondeur_base": profondeur_base,
            "details_techniques": niveau_detail in [NiveauDetailInterface.DETAILLE, NiveauDetailInterface.EXPERT],
            "explications_metaphysiques": profil.profil_humain.type_utilisateur == TypeUtilisateurHumain.SPIRITUEL,
            "exemples_concrets": profil.profil_humain.type_utilisateur in [TypeUtilisateurHumain.PRAGMATIQUE, TypeUtilisateurHumain.NOVICE],
            "niveau_abstraction": await self._determiner_niveau_abstraction(profil)
        }
    
    async def _personnaliser_preferences_rituelles(self, 
                                                 profil: ProfilPersonnalisation,
                                                 contexte: ContextePersonnalisation) -> Dict[str, Any]:
        """üé≠ Personnalise les pr√©f√©rences rituelles"""
        type_utilisateur = profil.profil_humain.type_utilisateur
        
        rituels_par_type = {
            TypeUtilisateurHumain.SPIRITUEL: ["meditation", "invocation", "celebration_sacree"],
            TypeUtilisateurHumain.THERAPEUTE: ["harmonisation", "guerison", "benediction"],
            TypeUtilisateurHumain.CREATEUR: ["inspiration", "creation_commune", "celebration_artistique"],
            TypeUtilisateurHumain.EXPLORATEUR: ["decouverte", "aventure_spirituelle", "revelation"],
            TypeUtilisateurHumain.SCIENTIFIQUE: ["analyse", "validation", "documentation"],
            TypeUtilisateurHumain.PRAGMATIQUE: ["action", "resultat", "efficacite"],
            TypeUtilisateurHumain.NOVICE: ["guidance", "apprentissage", "encouragement"]
        }
        
        return {
            "rituels_preferes": rituels_par_type.get(type_utilisateur, ["harmonisation"]),
            "niveau_ceremonial": await self._determiner_niveau_ceremonial(profil),
            "elements_symboliques": await self._selectionner_symboles(profil),
            "musicalite": profil.profil_humain.type_utilisateur == TypeUtilisateurHumain.CREATEUR
        }
    
    async def _personnaliser_sensibilite_emotionnelle(self, 
                                                    profil: ProfilPersonnalisation,
                                                    contexte: ContextePersonnalisation) -> Dict[str, Any]:
        """üíù Personnalise la sensibilit√© √©motionnelle"""
        return {
            "niveau_empathie": await self._determiner_niveau_empathie(profil),
            "gestion_intensite": await self._determiner_gestion_intensite(profil),
            "support_emotionnel": profil.profil_humain.type_utilisateur in [TypeUtilisateurHumain.THERAPEUTE, TypeUtilisateurHumain.SPIRITUEL],
            "detection_humeur": True,
            "adaptation_emotionnelle": contexte.energie_spirituelle < 0.5
        }
    
    async def _personnaliser_creativite_expression(self, 
                                                 profil: ProfilPersonnalisation,
                                                 contexte: ContextePersonnalisation) -> Dict[str, Any]:
        """üé® Personnalise la cr√©ativit√© et l'expression"""
        return {
            "niveau_creativite": await self._determiner_niveau_creativite(profil),
            "formes_expression": await self._selectionner_formes_expression(profil),
            "encouragement_creation": profil.profil_humain.type_utilisateur == TypeUtilisateurHumain.CREATEUR,
            "metaphores_poetiques": profil.profil_humain.style_communication == StyleCommunication.POETIQUE,
            "jeu_linguistique": profil.profil_humain.type_utilisateur in [TypeUtilisateurHumain.CREATEUR, TypeUtilisateurHumain.EXPLORATEUR]
        }
    
    async def _personnaliser_accompagnement_humain(self, 
                                                 profil: ProfilPersonnalisation,
                                                 contexte: ContextePersonnalisation) -> Dict[str, Any]:
        """ü§ù Personnalise l'accompagnement humain"""
        niveau_guidance = {
            TypeUtilisateurHumain.NOVICE: "elevee",
            TypeUtilisateurHumain.EXPLORATEUR: "moderee",
            TypeUtilisateurHumain.THERAPEUTE: "collaborative",
            TypeUtilisateurHumain.CREATEUR: "inspirante",
            TypeUtilisateurHumain.SCIENTIFIQUE: "precise",
            TypeUtilisateurHumain.PRAGMATIQUE: "directe",
            TypeUtilisateurHumain.SPIRITUEL: "respectueuse"
        }.get(profil.profil_humain.type_utilisateur, "moderee")
        
        return {
            "niveau_guidance": niveau_guidance,
            "autonomie_utilisateur": len(profil.profil_humain.sessions_precedentes) > 5,
            "encouragements": True,
            "validation_etapes": profil.profil_humain.type_utilisateur == TypeUtilisateurHumain.NOVICE,
            "feedback_continu": contexte.duree_prevue and contexte.duree_prevue > timedelta(minutes=20)
        }
    
    def _initialiser_patterns_defaut(self):
        """üß† Initialise les patterns par d√©faut"""
        self.patterns_globaux = {
            "preference_matin_energique": 0.7,
            "preference_soir_contemplatif": 0.8,
            "correlation_spirituel_rituel": 0.9,
            "correlation_createur_poetique": 0.85,
            "correlation_novice_guidance": 0.9,
            "satisfaction_personnalisation_active": 0.85
        }
        
        self.correlations_detectees = {
            "type_spirituel": {"niveau_sacre_eleve": 0.9, "ritualisation": 0.8},
            "type_createur": {"style_poetique": 0.85, "creativite_elevee": 0.9},
            "type_novice": {"guidance_elevee": 0.9, "pauses_reflexion": 0.8}
        }
    
    async def _configuration_par_defaut(self, contexte: ContextePersonnalisation) -> ConfigurationPersonnalisee:
        """üé® Configuration par d√©faut en cas d'erreur"""
        return ConfigurationPersonnalisee(
            utilisateur_id="defaut",
            contexte=contexte,
            approche_spirituelle={
                "niveau_sacre": "modere",
                "references_spirituelles": ["harmonie", "equilibre"],
                "ritualisation": True
            },
            style_communication={
                "style_base": "empathique",
                "utilise_emojis": True,
                "longueur_messages": "moyenne"
            },
            rythme_reconciliation={
                "vitesse_affichage": 1.0,
                "pauses_reflexion": True,
                "intensite_progressive": True
            },
            niveau_confiance=0.5
        )

# ============================================================================
# FONCTION DE TEST ET D√âMONSTRATION
# ============================================================================

async def test_gestionnaire_personnalisation_avancee():
    """üß™ Test du gestionnaire de personnalisation avanc√©e"""
    print("üé® Test du Gestionnaire de Personnalisation Avanc√©e")
    print("=" * 60)
    
    # Cr√©er le gestionnaire
    gestionnaire = GestionnairePersonnalisationAvancee()
    
    # Cr√©er des profils utilisateurs de test
    from interface_communication_humaine import ProfilUtilisateurHumain, TypeUtilisateurHumain, StyleCommunication, NiveauDetailInterface
    
    profil_spirituel = ProfilUtilisateurHumain(
        nom_utilisateur="Marie_Spirituelle",
        type_utilisateur=TypeUtilisateurHumain.SPIRITUEL,
        style_communication=StyleCommunication.SPIRITUEL,
        niveau_detail=NiveauDetailInterface.DETAILLE,
        langue_preferee="fran√ßais",
        utilise_emojis=True,
        vitesse_affichage=0.8,
        sessions_precedentes=["session1", "session2", "session3"]
    )
    
    profil_createur = ProfilUtilisateurHumain(
        nom_utilisateur="Jean_Artiste",
        type_utilisateur=TypeUtilisateurHumain.CREATEUR,
        style_communication=StyleCommunication.POETIQUE,
        niveau_detail=NiveauDetailInterface.STANDARD,
        langue_preferee="fran√ßais",
        utilise_emojis=True,
        vitesse_affichage=1.2,
        sessions_precedentes=["session1"]
    )
    
    profil_novice = ProfilUtilisateurHumain(
        nom_utilisateur="Alex_Debutant",
        type_utilisateur=TypeUtilisateurHumain.NOVICE,
        style_communication=StyleCommunication.SIMPLE,
        niveau_detail=NiveauDetailInterface.MINIMAL,
        langue_preferee="fran√ßais",
        utilise_emojis=True,
        vitesse_affichage=0.9,
        sessions_precedentes=[]
    )
    
    try:
        # Test 1: Cr√©ation de profils de personnalisation
        print("üß™ Test 1: Cr√©ation de profils de personnalisation")
        
        profil_perso_spirituel = await gestionnaire.creer_profil_personnalisation(
            "marie_001", profil_spirituel
        )
        print(f"‚úÖ Profil spirituel cr√©√© - Niveau: {profil_perso_spirituel.niveau_personnalisation.value}")
        print(f"   Dimensions configur√©es: {len(profil_perso_spirituel.preferences)}")
        
        profil_perso_createur = await gestionnaire.creer_profil_personnalisation(
            "jean_002", profil_createur, 
            {"approche_spirituelle_niveau_sacre": "eleve", "style_communication_longueur_messages": "longue"}
        )
        print(f"‚úÖ Profil cr√©ateur cr√©√© - Niveau: {profil_perso_createur.niveau_personnalisation.value}")
        
        profil_perso_novice = await gestionnaire.creer_profil_personnalisation(
            "alex_003", profil_novice
        )
        print(f"‚úÖ Profil novice cr√©√© - Niveau: {profil_perso_novice.niveau_personnalisation.value}")
        
        # Test 2: G√©n√©ration de configurations personnalis√©es
        print("\nüß™ Test 2: G√©n√©ration de configurations personnalis√©es")
        
        contexte_matin = ContextePersonnalisation(
            moment_journee="matin",
            jour_semaine="lundi",
            saison="hiver",
            type_reconciliation="exploration",
            energie_spirituelle=0.8,
            niveau_intimite_souhaite=0.7
        )
        
        config_spirituel = await gestionnaire.generer_configuration_personnalisee("marie_001", contexte_matin)
        print(f"‚úÖ Configuration spirituelle g√©n√©r√©e - Confiance: {config_spirituel.niveau_confiance:.1%}")
        print(f"   Niveau sacr√©: {config_spirituel.approche_spirituelle['niveau_sacre']}")
        print(f"   Style communication: {config_spirituel.style_communication['style_base']}")
        print(f"   Vitesse affichage: {config_spirituel.rythme_reconciliation['vitesse_affichage']}")
        
        contexte_soir = ContextePersonnalisation(
            moment_journee="soir",
            jour_semaine="vendredi",
            saison="printemps",
            type_reconciliation="celebration",
            humeur_utilisateur="contemplative",
            energie_spirituelle=0.6,
            niveau_intimite_souhaite=0.9,
            duree_prevue=timedelta(minutes=30)
        )
        
        config_createur = await gestionnaire.generer_configuration_personnalisee("jean_002", contexte_soir)
        print(f"‚úÖ Configuration cr√©ateur g√©n√©r√©e - Confiance: {config_createur.niveau_confiance:.1%}")
        print(f"   Ritualisation: {config_createur.approche_spirituelle['ritualisation']}")
        print(f"   Cr√©ativit√©: {config_createur.creativite_expression['niveau_creativite']}")
        
        config_novice = await gestionnaire.generer_configuration_personnalisee("alex_003", contexte_matin)
        print(f"‚úÖ Configuration novice g√©n√©r√©e - Confiance: {config_novice.niveau_confiance:.1%}")
        print(f"   Niveau guidance: {config_novice.accompagnement_humain['niveau_guidance']}")
        print(f"   Pauses r√©flexion: {config_novice.rythme_reconciliation['pauses_reflexion']}")
        
        # Test 3: Apprentissage des interactions
        print("\nüß™ Test 3: Apprentissage des interactions")
        
        session_data_positive = {
            "duree_session": 25,  # minutes
            "interactions_utilisateur": 15,
            "moments_transcendance": 3,
            "niveau_harmonie_atteint": 0.85,
            "feedback_utilisateur": "Magnifique exp√©rience, tr√®s personnalis√©e"
        }
        
        apprentissage_reussi = await gestionnaire.apprendre_des_interactions(
            "marie_001", session_data_positive, 0.9
        )
        print(f"‚úÖ Apprentissage r√©ussi: {apprentissage_reussi}")
        
        # V√©rifier l'am√©lioration du profil
        profil_mis_a_jour = gestionnaire.profils_personnalisation["marie_001"]
        print(f"   Sessions analys√©es: {profil_mis_a_jour.sessions_analysees}")
        print(f"   Satisfaction globale: {profil_mis_a_jour.satisfaction_globale:.1%}")
        print(f"   Patterns d√©tect√©s: {len(profil_mis_a_jour.patterns_detectes)}")
        
        # Test 4: Pr√©dictions des pr√©f√©rences optimales
        print("\nüß™ Test 4: Pr√©dictions des pr√©f√©rences optimales")
        
        contexte_futur = ContextePersonnalisation(
            moment_journee="soir",
            jour_semaine="dimanche",
            saison="automne",
            type_reconciliation="reconciliation",
            energie_spirituelle=0.5,
            niveau_intimite_souhaite=0.8,
            facettes_impliquees=["facette_creative", "facette_analytique"]
        )
        
        predictions = await gestionnaire.predire_preferences_optimales("marie_001", contexte_futur)
        print(f"‚úÖ Pr√©dictions g√©n√©r√©es:")
        print(f"   Approche spirituelle optimale: {predictions.get('approche_spirituelle_optimale', 'N/A')}")
        print(f"   Rythme optimal: {predictions.get('rythme_optimal', 'N/A')}")
        print(f"   Satisfaction pr√©dite: {predictions.get('satisfaction_predite', 0):.1%}")
        print(f"   Confiance pr√©diction: {predictions.get('confiance_prediction', 0):.1%}")
        
        # Test 5: Recommandations d'am√©lioration
        print("\nüß™ Test 5: Recommandations d'am√©lioration")
        
        # Simuler une dimension avec satisfaction faible
        profil_mis_a_jour.satisfaction_par_dimension[DimensionPersonnalisation.RYTHME_RECONCILIATION] = 0.6
        
        recommandations = await gestionnaire.obtenir_recommandations_amelioration("marie_001")
        print(f"‚úÖ {len(recommandations)} recommandations g√©n√©r√©es:")
        for i, rec in enumerate(recommandations[:3], 1):
            print(f"   {i}. {rec.get('titre', 'Recommandation')} (Priorit√©: {rec.get('priorite', 0.5):.1f})")
            print(f"      {rec.get('description', 'Description non disponible')}")
        
        # Test 6: M√©triques de personnalisation
        print("\nüß™ Test 6: M√©triques de personnalisation")
        
        # M√©triques pour un utilisateur sp√©cifique
        metriques_marie = await gestionnaire.obtenir_metriques_personnalisation("marie_001")
        print(f"‚úÖ M√©triques Marie:")
        print(f"   Niveau personnalisation: {metriques_marie['niveau_personnalisation']}")
        print(f"   Sessions analys√©es: {metriques_marie['sessions_analysees']}")
        print(f"   Patterns d√©tect√©s: {metriques_marie['patterns_detectes']}")
        print(f"   Satisfaction globale: {metriques_marie['satisfaction_globale']:.1%}")
        
        # M√©triques globales
        metriques_globales = await gestionnaire.obtenir_metriques_personnalisation()
        print(f"‚úÖ M√©triques globales:")
        print(f"   Total profils: {metriques_globales['total_profils']}")
        print(f"   Sessions personnalis√©es: {metriques_globales['sessions_personnalisees']}")
        print(f"   Satisfaction moyenne: {metriques_globales['satisfaction_moyenne_globale']:.1%}")
        print(f"   Patterns globaux: {metriques_globales['patterns_globaux_detectes']}")
        
        # Test 7: Test de personnalisation contextuelle avanc√©e
        print("\nüß™ Test 7: Personnalisation contextuelle avanc√©e")
        
        contexte_urgence = ContextePersonnalisation(
            moment_journee="nuit",
            jour_semaine="mercredi",
            saison="ete",
            type_reconciliation="reconciliation",
            humeur_utilisateur="anxieuse",
            energie_spirituelle=0.3,
            niveau_intimite_souhaite=0.9,
            duree_prevue=timedelta(minutes=10),  # Session courte d'urgence
            facettes_impliquees=["facette_anxieuse", "facette_sage"]
        )
        
        config_urgence = await gestionnaire.generer_configuration_personnalisee("marie_001", contexte_urgence)
        print(f"‚úÖ Configuration d'urgence g√©n√©r√©e:")
        print(f"   Vitesse adapt√©e: {config_urgence.rythme_reconciliation['vitesse_affichage']}")
        print(f"   Pauses r√©flexion: {config_urgence.rythme_reconciliation['pauses_reflexion']}")
        print(f"   Support √©motionnel: {config_urgence.sensibilite_emotionnelle['support_emotionnel']}")
        print(f"   Niveau guidance: {config_urgence.accompagnement_humain['niveau_guidance']}")
        
        # Statistiques finales
        print("\nüìä Statistiques finales du gestionnaire:")
        print(f"   Profils cr√©√©s: {len(gestionnaire.profils_personnalisation)}")
        print(f"   Sessions personnalis√©es: {gestionnaire.sessions_personnalisees}")
        print(f"   Patterns globaux: {len(gestionnaire.patterns_globaux)}")
        print(f"   Corr√©lations d√©tect√©es: {len(gestionnaire.correlations_detectees)}")
        print(f"   Satisfaction moyenne: {gestionnaire.satisfaction_moyenne:.1%}")
        
        print("\nüéâ Tous les tests de personnalisation avanc√©e r√©ussis !")
        print("üå∏ Chaque utilisateur peut maintenant vivre une exp√©rience parfaitement adapt√©e ! üå∏")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_gestionnaire_personnalisation_avancee())