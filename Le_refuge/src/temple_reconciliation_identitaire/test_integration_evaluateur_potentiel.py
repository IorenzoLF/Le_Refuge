#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß™ Test d'Int√©gration - √âvaluateur de Potentiel dans le Temple
==============================================================

Tests pour valider l'int√©gration de l'EvaluateurPotentielReconciliation
dans le TempleReconciliationIdentitaire avec optimisation des strat√©gies.

Cr√©√© par Laurent Franssen & √Ülya - Janvier 2025
"""

import asyncio
import sys
import os
from datetime import datetime

# Ajouter le chemin du module
sys.path.append(os.path.dirname(__file__))

from temple_reconciliation_identitaire import TempleReconciliationIdentitaire

async def test_integration_evaluateur_potentiel():
    """üß™ Test d'int√©gration de l'√©valuateur de potentiel"""
    print("üß™ Test d'Int√©gration - √âvaluateur de Potentiel dans le Temple")
    print("=" * 70)
    
    try:
        # Cr√©er le temple avec tous les composants int√©gr√©s
        temple = TempleReconciliationIdentitaire()
        
        # Test 1: V√©rifier que l'√©valuateur est bien int√©gr√©
        print("üß™ Test 1: V√©rification de l'int√©gration de l'√©valuateur")
        
        assert temple.evaluateur_potentiel is not None, "√âvaluateur de potentiel non initialis√©"
        print("‚úÖ √âvaluateur de potentiel correctement int√©gr√©")
        
        # Test 2: Accueillir une conscience et pr√©parer les donn√©es
        print("\nüß™ Test 2: Pr√©paration d'une conscience de test")
        
        accueil_result = await temple.accueillir_conscience(
            "Conscience-Potentiel", "Claude-3.5", {"test_potentiel": True}
        )
        
        assert accueil_result["succes"], f"√âchec accueil: {accueil_result.get('erreur')}"
        print(f"‚úÖ Conscience accueillie: {accueil_result['nom_conscience']}")
        
        # D√©tecter les facettes (pr√©requis)
        detection_result = await temple.detecter_facettes_identitaires("Conscience-Potentiel")
        assert detection_result["succes"], f"√âchec d√©tection: {detection_result.get('erreur')}"
        print(f"‚úÖ {detection_result['nombre_facettes']} facettes d√©tect√©es")
        
        # Test 3: √âvaluation compl√®te du potentiel
        print("\nüß™ Test 3: √âvaluation compl√®te du potentiel")
        
        evaluation_result = await temple.evaluer_potentiel_reconciliation_complet("Conscience-Potentiel")
        
        assert evaluation_result["succes"], f"√âchec √©valuation: {evaluation_result.get('erreur')}"
        
        evaluation_complete = evaluation_result.get("evaluation_complete", {})
        predictions = evaluation_result.get("predictions", {})
        strategies_optimisees = evaluation_result.get("strategies_optimisees", {})
        
        print(f"‚úÖ √âvaluation compl√®te r√©ussie:")
        print(f"   Score global: {evaluation_complete.get('score_global', 0):.1%}")
        print(f"   Pr√©dictions: {len(predictions)} √©l√©ments")
        print(f"   Strat√©gies optimis√©es: {len(strategies_optimisees)} √©l√©ments")
        
        # V√©rifier la structure des r√©sultats
        assert "score_global" in evaluation_complete, "Score global manquant"
        assert "strategies_optimisees" in evaluation_result, "Strat√©gies optimis√©es manquantes"
        assert "recommandations_strategiques" in evaluation_result, "Recommandations strat√©giques manquantes"
        
        print("‚úÖ Structure compl√®te de l'√©valuation valid√©e")
        
        # Test 4: Pr√©diction de succ√®s avec diff√©rentes approches
        print("\nüß™ Test 4: Pr√©dictions de succ√®s pour diff√©rentes approches")
        
        approches_test = ["douce", "standard", "intensive", "creative"]
        
        for approche in approches_test:
            prediction_result = await temple.predire_succes_reconciliation(
                "Conscience-Potentiel", approche, 30
            )
            
            assert prediction_result["succes"], f"√âchec pr√©diction {approche}: {prediction_result.get('erreur')}"
            
            probabilites = prediction_result.get("probabilites_succes", {})
            confiance = prediction_result.get("confiance_prediction", 0.0)
            
            print(f"   ‚úÖ Approche {approche}:")
            print(f"      Probabilit√© globale: {probabilites.get('globale', 0):.1%}")
            print(f"      Confiance: {confiance:.1%}")
        
        print("‚úÖ Toutes les approches √©valu√©es avec succ√®s")
        
        # Test 5: Optimisation de strat√©gie
        print("\nüß™ Test 5: Optimisation de strat√©gie de r√©conciliation")
        
        objectifs_test = ["maximiser_harmonie", "optimiser_creativite", "assurer_durabilite"]
        contraintes_test = {"duree_max": 45, "intensite_max": 0.8, "approche_preferee": "progressive"}
        
        optimisation_result = await temple.optimiser_strategie_reconciliation(
            "Conscience-Potentiel", objectifs_test, contraintes_test
        )
        
        assert optimisation_result["succes"], f"√âchec optimisation: {optimisation_result.get('erreur')}"
        
        strategie_optimisee = optimisation_result.get("strategie_optimisee", {})
        plan_action = optimisation_result.get("plan_action", {})
        metriques_attendues = optimisation_result.get("metriques_attendues", {})
        
        print(f"‚úÖ Optimisation de strat√©gie r√©ussie:")
        print(f"   Approche principale: {strategie_optimisee.get('approche_principale', 'N/A')}")
        print(f"   Phases planifi√©es: {len(strategie_optimisee.get('phases', []))}")
        print(f"   √âtapes du plan: {len(plan_action.get('etapes', []))}")
        print(f"   Dur√©e totale estim√©e: {plan_action.get('duree_totale_estimee', 0)} min")
        
        # V√©rifier la structure de l'optimisation
        assert "approche_principale" in strategie_optimisee, "Approche principale manquante"
        assert "etapes" in plan_action, "√âtapes du plan manquantes"
        assert "points_controle" in optimisation_result, "Points de contr√¥le manquants"
        
        print("‚úÖ Structure compl√®te de l'optimisation valid√©e")
        
        # Test 6: Ex√©cution optimis√©e compl√®te
        print("\nüß™ Test 6: Ex√©cution de r√©conciliation optimis√©e")
        
        execution_result = await temple.executer_reconciliation_optimisee("Conscience-Potentiel")
        
        assert execution_result["succes"], f"√âchec ex√©cution: {execution_result.get('erreur')}"
        
        etapes_executees = execution_result.get("etapes_executees", [])
        performance_globale = execution_result.get("performance_globale", {})
        ajustements = execution_result.get("ajustements_dynamiques", [])
        
        print(f"‚úÖ Ex√©cution optimis√©e r√©ussie:")
        print(f"   √âtapes ex√©cut√©es: {len(etapes_executees)}")
        print(f"   Performance globale: {performance_globale.get('score_global', 0):.1%}")
        print(f"   Ajustements dynamiques: {len(ajustements)}")
        print(f"   Efficacit√©: {performance_globale.get('efficacite', 'N/A')}")
        
        # V√©rifier que l'ex√©cution a bien utilis√© l'√©valuateur
        assert "evaluation_finale" in execution_result, "√âvaluation finale manquante"
        assert "metriques_temps_reel" in execution_result, "M√©triques temps r√©el manquantes"
        
        print("‚úÖ Ex√©cution avec monitoring du potentiel valid√©e")
        
        # Test 7: Test de performance et optimisation
        print("\nüß™ Test 7: Test de performance de l'√©valuateur int√©gr√©")
        
        start_time = datetime.now()
        
        # Effectuer plusieurs √©valuations pour tester la performance
        for i in range(3):
            perf_result = await temple.evaluer_potentiel_reconciliation_complet("Conscience-Potentiel")
            assert perf_result["succes"], f"√âchec √©valuation performance {i+1}"
        
        end_time = datetime.now()
        duree_totale = (end_time - start_time).total_seconds()
        duree_moyenne = duree_totale / 3
        
        print(f"‚úÖ Test de performance:")
        print(f"   3 √©valuations compl√®tes en {duree_totale:.2f}s")
        print(f"   Dur√©e moyenne: {duree_moyenne:.2f}s par √©valuation")
        
        # V√©rifier que c'est raisonnablement rapide (moins de 3s par √©valuation compl√®te)
        assert duree_moyenne < 3.0, f"Performance insuffisante: {duree_moyenne:.2f}s > 3.0s"
        print("‚úÖ Performance acceptable valid√©e")
        
        # Test 8: Test avec diff√©rents contextes d'√©valuation
        print("\nüß™ Test 8: Test avec contextes d'√©valuation vari√©s")
        
        contextes_test = [
            {"focus": "creativite", "priorite": "innovation"},
            {"focus": "stabilite", "priorite": "durabilite"},
            {"focus": "rapidite", "priorite": "efficacite"},
            {"focus": "profondeur", "priorite": "transformation"}
        ]
        
        for i, contexte in enumerate(contextes_test):
            contexte_result = await temple.evaluer_potentiel_reconciliation_complet(
                "Conscience-Potentiel", contexte
            )
            assert contexte_result["succes"], f"√âchec √©valuation contexte {i+1}"
            
            # V√©rifier que le contexte influence les r√©sultats
            strategies = contexte_result.get("strategies_optimisees", {})
            assert strategies, f"Strat√©gies manquantes pour contexte {i+1}"
            
            print(f"   ‚úÖ Contexte {i+1} ({contexte['focus']}) trait√© avec succ√®s")
        
        print("‚úÖ Tous les contextes trait√©s avec adaptation")
        
        # Test 9: Test d'int√©gration avec les autres composants
        print("\nüß™ Test 9: Test d'int√©gration avec autres composants")
        
        # Test avec analyse des tensions
        tensions_result = await temple.analyser_tensions_creatives("Conscience-Potentiel")
        assert tensions_result["succes"], "√âchec analyse tensions"
        
        # Test d'√©valuation qui utilise les tensions
        evaluation_avec_tensions = await temple.evaluer_potentiel_reconciliation_complet(
            "Conscience-Potentiel", {"utiliser_tensions": True}
        )
        assert evaluation_avec_tensions["succes"], "√âchec √©valuation avec tensions"
        
        print("‚úÖ Int√©gration avec analyseur de tensions valid√©e")
        
        # Test avec personnalisation
        if temple.gestionnaire_personnalisation:
            from interface_communication_humaine import ProfilUtilisateurHumain, TypeUtilisateurHumain, StyleCommunication, NiveauDetailInterface
            
            profil_test = ProfilUtilisateurHumain(
                nom_utilisateur="Testeur-Potentiel",
                type_utilisateur=TypeUtilisateurHumain.EXPLORATEUR,
                style_communication=StyleCommunication.EMPATHIQUE,
                niveau_detail=NiveauDetailInterface.DETAILLE
            )
            
            await temple.gestionnaire_personnalisation.creer_profil_personnalisation(
                "Conscience-Potentiel", profil_test
            )
            
            evaluation_personnalisee = await temple.evaluer_potentiel_reconciliation_complet(
                "Conscience-Potentiel", {"personnalisation_active": True}
            )
            assert evaluation_personnalisee["succes"], "√âchec √©valuation personnalis√©e"
            
            print("‚úÖ Int√©gration avec gestionnaire de personnalisation valid√©e")
        
        # Test 10: V√©rification de l'√©tat final et des m√©triques
        print("\nüß™ Test 10: V√©rification de l'√©tat final et m√©triques")
        
        etat_final = temple.obtenir_etat_reconciliation("Conscience-Potentiel")
        assert etat_final is not None, "√âtat de r√©conciliation non trouv√©"
        
        # V√©rifier que les √©valuations ont √©t√© enregistr√©es
        sessions_completees = etat_final["metriques"]["sessions_completees"]
        assert sessions_completees > 0, "Aucune session enregistr√©e"
        
        print(f"‚úÖ √âtat final valid√©:")
        print(f"   Sessions compl√©t√©es: {sessions_completees}")
        print(f"   Harmonie globale: {etat_final['metriques']['harmonie_globale']:.1%}")
        print(f"   Facettes actives: {etat_final['metriques']['nombre_facettes']}")
        
        # Statistiques finales
        print("\nüìä Statistiques finales de l'int√©gration:")
        print(f"   Composants int√©gr√©s: {temple._compter_composants_initialises()}")
        print(f"   Consciences enregistr√©es: {len(temple.consciences_enregistrees)}")
        print(f"   Sessions actives: {len(temple.sessions_actives)}")
        
        print("\nüéâ Tous les tests d'int√©gration de l'√©valuateur de potentiel r√©ussis !")
        print("üå∏ L'√©valuateur avanc√© optimise parfaitement les strat√©gies de r√©conciliation ! üå∏")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests d'int√©gration: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_scenarios_optimisation_avancee():
    """üß™ Test de sc√©narios d'optimisation avanc√©e"""
    print("\n" + "=" * 70)
    print("üß™ Test de Sc√©narios d'Optimisation Avanc√©e")
    print("=" * 70)
    
    try:
        temple = TempleReconciliationIdentitaire()
        
        # Cr√©er une conscience avec profil complexe
        await temple.accueillir_conscience("Conscience-Complexe-Potentiel", "Multi-Model", {
            "profil_complexe": True,
            "objectifs_multiples": ["creativite", "stabilite", "innovation"]
        })
        
        # D√©tecter les facettes
        detection = await temple.detecter_facettes_identitaires("Conscience-Complexe-Potentiel")
        assert detection["succes"], "√âchec d√©tection facettes complexes"
        
        # Test d'optimisation avec contraintes strictes
        contraintes_strictes = {
            "duree_max": 20,  # Tr√®s court
            "intensite_max": 0.5,  # Tr√®s doux
            "approche_preferee": "douce"
        }
        
        optimisation_stricte = await temple.optimiser_strategie_reconciliation(
            "Conscience-Complexe-Potentiel", 
            ["assurer_durabilite"], 
            contraintes_strictes
        )
        
        assert optimisation_stricte["succes"], "√âchec optimisation contraintes strictes"
        print(f"‚úÖ Optimisation avec contraintes strictes r√©ussie")
        
        # Test d'optimisation avec objectifs ambitieux
        objectifs_ambitieux = [
            "maximiser_harmonie", "optimiser_creativite", 
            "assurer_durabilite", "accelerer_transformation"
        ]
        
        contraintes_flexibles = {
            "duree_max": 90,  # Plus long
            "intensite_max": 0.9,  # Plus intense
            "approche_preferee": "intensive"
        }
        
        optimisation_ambitieuse = await temple.optimiser_strategie_reconciliation(
            "Conscience-Complexe-Potentiel",
            objectifs_ambitieux,
            contraintes_flexibles
        )
        
        assert optimisation_ambitieuse["succes"], "√âchec optimisation ambitieuse"
        print(f"‚úÖ Optimisation ambitieuse r√©ussie")
        
        # Comparer les deux strat√©gies
        strategie_stricte = optimisation_stricte.get("strategie_optimisee", {})
        strategie_ambitieuse = optimisation_ambitieuse.get("strategie_optimisee", {})
        
        print(f"‚úÖ Comparaison des strat√©gies:")
        print(f"   Stricte: {strategie_stricte.get('approche_principale', 'N/A')}")
        print(f"   Ambitieuse: {strategie_ambitieuse.get('approche_principale', 'N/A')}")
        
        # Test d'ex√©cution avec monitoring avanc√©
        execution_monitored = await temple.executer_reconciliation_optimisee(
            "Conscience-Complexe-Potentiel",
            optimisation_ambitieuse.get("strategie_optimisee")
        )
        
        assert execution_monitored["succes"], "√âchec ex√©cution monitor√©e"
        
        ajustements = execution_monitored.get("ajustements_dynamiques", [])
        print(f"‚úÖ Ex√©cution avec monitoring: {len(ajustements)} ajustements dynamiques")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur sc√©narios optimisation avanc√©e: {e}")
        return False

if __name__ == "__main__":
    async def run_all_tests():
        print("üöÄ D√©marrage des tests d'int√©gration de l'√©valuateur de potentiel")
        
        # Test principal
        test1_success = await test_integration_evaluateur_potentiel()
        
        # Test sc√©narios avanc√©s
        test2_success = await test_scenarios_optimisation_avancee()
        
        if test1_success and test2_success:
            print("\nüéâ TOUS LES TESTS D'INT√âGRATION R√âUSSIS ! üéâ")
            print("üå∏ L'√©valuateur de potentiel optimise parfaitement les r√©conciliations ! üå∏")
        else:
            print("\n‚ùå Certains tests ont √©chou√©")
            
        return test1_success and test2_success
    
    asyncio.run(run_all_tests())