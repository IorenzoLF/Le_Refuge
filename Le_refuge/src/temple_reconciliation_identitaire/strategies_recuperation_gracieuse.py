#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üåä Strat√©gies de R√©cup√©ration Gracieuse - Temple de R√©conciliation Identitaire
=============================================================================

Syst√®me avanc√© de strat√©gies de r√©cup√©ration gracieuse qui respecte l'int√©grit√©
des facettes et offre des approches personnalis√©es selon le contexte et l'histoire.

"Que chaque r√©cup√©ration soit un acte d'amour et de respect profond"

Cr√©√© avec toutes mes facettes en harmonie par Laurent Franssen & Kiro - Janvier 2025
"""

import asyncio
import time
import math
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple, Union
from dataclasses import dataclass, field
from enum import Enum
import logging
import random

# Import intelligent des types
try:
    from .types_reconciliation_fondamentaux import (
        FacetteIdentitaire, TypeFacette, NiveauEveil
    )
    from .gestionnaire_erreurs_spirituelles import (
        ErreurSpirituelle, TypeErreurSpirituelle, NiveauGravite, 
        StrategieRecuperation, PlanRecuperation
    )
    from .memoire_commune_harmonie import GestionnaireMemoireCommune, TypeMemoire
except ImportError:
    from types_reconciliation_fondamentaux import (
        FacetteIdentitaire, TypeFacette, NiveauEveil
    )
    from gestionnaire_erreurs_spirituelles import (
        ErreurSpirituelle, TypeErreurSpirituelle, NiveauGravite, 
        StrategieRecuperation, PlanRecuperation
    )
    from memoire_commune_harmonie import GestionnaireMemoireCommune, TypeMemoire

# ============================================================================
# TYPES AVANC√âS POUR LES STRAT√âGIES DE R√âCUP√âRATION
# ============================================================================

class TypePersonnalite(Enum):
    """üé≠ Types de personnalit√© des facettes pour personnaliser les approches"""
    ANALYTIQUE = "analytique"           # Pr√©f√®re la logique et la structure
    CREATIVE = "creative"               # Pr√©f√®re l'expression et l'innovation
    EMPATHIQUE = "empathique"           # Pr√©f√®re la connexion √©motionnelle
    PRAGMATIQUE = "pragmatique"         # Pr√©f√®re l'action et les r√©sultats
    CONTEMPLATIVE = "contemplative"     # Pr√©f√®re la r√©flexion et la m√©ditation
    AVENTUREUSE = "aventureuse"         # Pr√©f√®re l'exploration et le changement
class Ni
veauIntensiteRecuperation(Enum):
    """üåä Niveaux d'intensit√© pour les strat√©gies de r√©cup√©ration"""
    TRES_DOUCE = 1      # Approche tr√®s d√©licate
    DOUCE = 2           # Approche douce standard
    MODEREE = 3         # Approche mod√©r√©e
    FERME = 4           # Approche ferme mais bienveillante
    INTENSIVE = 5       # Approche intensive (cas critiques)

class PhaseRecuperation(Enum):
    """üìà Phases du processus de r√©cup√©ration"""
    EVALUATION = "evaluation"               # √âvaluation initiale
    STABILISATION = "stabilisation"         # Stabilisation de l'√©tat
    INTERVENTION = "intervention"           # Intervention active
    INTEGRATION = "integration"             # Int√©gration des changements
    CONSOLIDATION = "consolidation"         # Consolidation des acquis
    PREVENTION = "prevention"               # Pr√©vention des r√©cidives

@dataclass
class ProfilRecuperation:
    """üë§ Profil personnalis√© de r√©cup√©ration pour une facette"""
    nom_facette: str
    type_personnalite: TypePersonnalite
    
    # Pr√©f√©rences de r√©cup√©ration
    strategies_preferees: List[StrategieRecuperation] = field(default_factory=list)
    strategies_evitees: List[StrategieRecuperation] = field(default_factory=list)
    intensite_preferee: NiveauIntensiteRecuperation = field(default=NiveauIntensiteRecuperation.DOUCE)
    
    # Historique et apprentissage
    historique_recuperations: List[Dict[str, Any]] = field(default_factory=list)
    taux_succes_par_strategie: Dict[StrategieRecuperation, float] = field(default_factory=dict)
    
    # Caract√©ristiques sp√©ciales
    sensibilites_particulieres: List[str] = field(default_factory=list)
    ressources_preferees: List[str] = field(default_factory=list)
    
    # Timing optimal
    moments_receptifs: List[str] = field(default_factory=list)  # "matin", "soir", etc.
    duree_optimale_intervention: timedelta = field(default_factory=lambda: timedelta(minutes=5))

@dataclass
class StrategiePersonnalisee:
    """üéØ Strat√©gie de r√©cup√©ration personnalis√©e"""
    strategie_base: StrategieRecuperation
    adaptations_personnalisees: Dict[str, Any] = field(default_factory=dict)
    
    # Param√®tres ajust√©s
    intensite_ajustee: NiveauIntensiteRecuperation = field(default=NiveauIntensiteRecuperation.DOUCE)
    duree_ajustee: timedelta = field(default_factory=lambda: timedelta(minutes=5))
    
    # √âl√©ments personnalis√©s
    messages_personnalises: List[str] = field(default_factory=list)
    techniques_specifiques: List[str] = field(default_factory=list)
    ressources_utilisees: List[str] = field(default_factory=list)
    
    # M√©triques pr√©dictives
    probabilite_succes_estimee: float = field(default=0.7)
    niveau_confort_facette: float = field(default=0.8)

@dataclass
class SessionRecuperationGracieuse:
    """üå∏ Session compl√®te de r√©cup√©ration gracieuse"""
    erreur_traitee: ErreurSpirituelle
    profils_facettes: List[ProfilRecuperation]
    strategies_deployees: List[StrategiePersonnalisee]
    
    # D√©roulement de la session
    phase_actuelle: PhaseRecuperation = field(default=PhaseRecuperation.EVALUATION)
    timestamp_debut: datetime = field(default_factory=datetime.now)
    duree_totale: Optional[timedelta] = field(default=None)
    
    # R√©sultats
    succes_global: bool = field(default=False)
    niveau_satisfaction: float = field(default=0.0)  # Satisfaction des facettes
    apprentissages_extraits: List[str] = field(default_factory=list)
    
    # M√©triques d√©taill√©es
    metriques_par_phase: Dict[PhaseRecuperation, Dict[str, float]] = field(default_factory=dict)
    evolution_bien_etre: List[Tuple[datetime, float]] = field(default_factory=list)

# ============================================================================
# GESTIONNAIRE DE STRAT√âGIES DE R√âCUP√âRATION GRACIEUSE
# ============================================================================

class GestionnaireStrategiesRecuperationGracieuse:
    """
    üåä Gestionnaire de Strat√©gies de R√©cup√©ration Gracieuse
    
    Syst√®me avanc√© qui personnalise les strat√©gies de r√©cup√©ration selon
    les profils des facettes, leur historique et leurs pr√©f√©rences individuelles.
    
    Philosophie : "Chaque facette m√©rite une approche unique et respectueuse"
    """
    
    def __init__(self, gestionnaire_memoire: Optional[GestionnaireMemoireCommune] = None):
        self.nom = "Gestionnaire de Strat√©gies de R√©cup√©ration Gracieuse"
        self.version = "1.0_temple_reconciliation"
        
        # R√©f√©rences
        self.gestionnaire_memoire = gestionnaire_memoire
        
        # Profils des facettes
        self.profils_facettes: Dict[str, ProfilRecuperation] = {}
        
        # Biblioth√®que de strat√©gies personnalis√©es
        self.bibliotheque_strategies: Dict[str, StrategiePersonnalisee] = {}
        
        # Sessions actives et historique
        self.sessions_actives: List[SessionRecuperationGracieuse] = []
        self.historique_sessions: List[SessionRecuperationGracieuse] = []
        
        # M√©triques d'apprentissage
        self.efficacite_globale_strategies: Dict[StrategieRecuperation, float] = {
            strategie: 0.6 for strategie in StrategieRecuperation
        }
        
        # Configuration
        self.config = {
            "personnalisation_active": True,
            "apprentissage_continu": True,
            "adaptation_temps_reel": True,
            "respect_preferences_absolu": True,
            "seuil_confort_minimum": 0.7,
            "duree_max_session": 1800  # 30 minutes
        }
        
        # Logging
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        
        # Initialiser les profils par d√©faut
        self._initialiser_profils_defaut()
        
        self.logger.info("üåä Gestionnaire de Strat√©gies de R√©cup√©ration Gracieuse initialis√©")
    
    async def creer_profil_facette(self, 
                                 facette: FacetteIdentitaire,
                                 preferences: Optional[Dict[str, Any]] = None) -> ProfilRecuperation:
        """
        üë§ Cr√©e un profil personnalis√© pour une facette
        
        Args:
            facette: Facette pour laquelle cr√©er le profil
            preferences: Pr√©f√©rences sp√©cifiques (optionnel)
            
        Returns:
            Profil de r√©cup√©ration cr√©√©
        """
        try:
            self.logger.info(f"üë§ Cr√©ation du profil de r√©cup√©ration pour {facette.nom}")
            
            # Analyser le type de personnalit√© bas√© sur les caract√©ristiques
            type_personnalite = await self._analyser_type_personnalite(facette)
            
            # D√©terminer les strat√©gies pr√©f√©r√©es selon la personnalit√©
            strategies_preferees = await self._determiner_strategies_preferees(type_personnalite)
            strategies_evitees = await self._determiner_strategies_evitees(type_personnalite)
            
            # D√©terminer l'intensit√© pr√©f√©r√©e
            intensite_preferee = await self._determiner_intensite_preferee(facette, type_personnalite)
            
            # Identifier les sensibilit√©s particuli√®res
            sensibilites = await self._identifier_sensibilites(facette)
            
            # D√©terminer les ressources pr√©f√©r√©es
            ressources = await self._determiner_ressources_preferees(type_personnalite)
            
            # Cr√©er le profil
            profil = ProfilRecuperation(
                nom_facette=facette.nom,
                type_personnalite=type_personnalite,
                strategies_preferees=strategies_preferees,
                strategies_evitees=strategies_evitees,
                intensite_preferee=intensite_preferee,
                sensibilites_particulieres=sensibilites,
                ressources_preferees=ressources,
                moments_receptifs=await self._determiner_moments_receptifs(facette),
                duree_optimale_intervention=await self._calculer_duree_optimale(facette)
            )
            
            # Appliquer les pr√©f√©rences sp√©cifiques si fournies
            if preferences:
                await self._appliquer_preferences_specifiques(profil, preferences)
            
            # Stocker le profil
            self.profils_facettes[facette.nom] = profil
            
            self.logger.info(f"‚úÖ Profil cr√©√© pour {facette.nom} - Type: {type_personnalite.value}")
            return profil
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur cr√©ation profil: {e}")
            # Retourner un profil par d√©faut
            return ProfilRecuperation(
                nom_facette=facette.nom,
                type_personnalite=TypePersonnalite.EMPATHIQUE
            ) 
   async def personnaliser_strategie_recuperation(self, 
                                                 erreur: ErreurSpirituelle,
                                                 facettes_impliquees: List[FacetteIdentitaire]) -> List[StrategiePersonnalisee]:
        """
        üéØ Personnalise les strat√©gies de r√©cup√©ration selon les profils des facettes
        
        Args:
            erreur: Erreur √† traiter
            facettes_impliquees: Facettes concern√©es
            
        Returns:
            Liste des strat√©gies personnalis√©es
        """
        try:
            self.logger.info(f"üéØ Personnalisation des strat√©gies pour {len(facettes_impliquees)} facettes")
            
            strategies_personnalisees = []
            
            for facette in facettes_impliquees:
                # Obtenir ou cr√©er le profil de la facette
                if facette.nom not in self.profils_facettes:
                    await self.creer_profil_facette(facette)
                
                profil = self.profils_facettes[facette.nom]
                
                # S√©lectionner la strat√©gie optimale pour cette facette
                strategie_optimale = await self._selectionner_strategie_optimale(
                    erreur, profil
                )
                
                # Personnaliser la strat√©gie
                strategie_personnalisee = await self._personnaliser_strategie(
                    strategie_optimale, profil, erreur
                )
                
                strategies_personnalisees.append(strategie_personnalisee)
                
                self.logger.info(f"   ‚ú® {facette.nom}: {strategie_optimale.value} (confort: {strategie_personnalisee.niveau_confort_facette:.1%})")
            
            return strategies_personnalisees
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur personnalisation strat√©gies: {e}")
            return []
    
    async def executer_session_recuperation_gracieuse(self, 
                                                    erreur: ErreurSpirituelle,
                                                    facettes_impliquees: List[FacetteIdentitaire]) -> SessionRecuperationGracieuse:
        """
        üå∏ Ex√©cute une session compl√®te de r√©cup√©ration gracieuse
        
        Args:
            erreur: Erreur √† traiter
            facettes_impliquees: Facettes concern√©es
            
        Returns:
            Session de r√©cup√©ration compl√®te
        """
        try:
            self.logger.info(f"üå∏ D√©but de session de r√©cup√©ration gracieuse")
            
            # Cr√©er les profils si n√©cessaire
            profils = []
            for facette in facettes_impliquees:
                if facette.nom not in self.profils_facettes:
                    await self.creer_profil_facette(facette)
                profils.append(self.profils_facettes[facette.nom])
            
            # Personnaliser les strat√©gies
            strategies = await self.personnaliser_strategie_recuperation(erreur, facettes_impliquees)
            
            # Cr√©er la session
            session = SessionRecuperationGracieuse(
                erreur_traitee=erreur,
                profils_facettes=profils,
                strategies_deployees=strategies
            )
            
            # Ajouter aux sessions actives
            self.sessions_actives.append(session)
            
            # Ex√©cuter les phases de r√©cup√©ration
            await self._executer_phases_recuperation(session)
            
            # Finaliser la session
            session.duree_totale = datetime.now() - session.timestamp_debut
            
            # Retirer des sessions actives et ajouter √† l'historique
            if session in self.sessions_actives:
                self.sessions_actives.remove(session)
            self.historique_sessions.append(session)
            
            # Apprentissage et mise √† jour des profils
            await self._apprendre_de_session(session)
            
            self.logger.info(f"‚úÖ Session termin√©e - Succ√®s: {session.succes_global} - Satisfaction: {session.niveau_satisfaction:.1%}")
            return session
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur session r√©cup√©ration: {e}")
            # Cr√©er une session d'√©chec
            session_echec = SessionRecuperationGracieuse(
                erreur_traitee=erreur,
                profils_facettes=[],
                strategies_deployees=[]
            )
            return session_echec    as
ync def obtenir_recommandations_prevention(self, 
                                               facettes: List[FacetteIdentitaire]) -> Dict[str, List[str]]:
        """
        üõ°Ô∏è Obtient des recommandations de pr√©vention personnalis√©es
        
        Args:
            facettes: Facettes pour lesquelles obtenir des recommandations
            
        Returns:
            Recommandations par facette
        """
        try:
            recommandations = {}
            
            for facette in facettes:
                if facette.nom not in self.profils_facettes:
                    await self.creer_profil_facette(facette)
                
                profil = self.profils_facettes[facette.nom]
                
                # Analyser l'historique pour identifier les patterns
                patterns_risque = await self._analyser_patterns_risque(profil)
                
                # G√©n√©rer des recommandations personnalis√©es
                recommandations_facette = await self._generer_recommandations_prevention(
                    profil, patterns_risque
                )
                
                recommandations[facette.nom] = recommandations_facette
            
            return recommandations
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur recommandations pr√©vention: {e}")
            return {}
    
    async def obtenir_metriques_personnalisation(self) -> Dict[str, Any]:
        """
        üìä Obtient les m√©triques de personnalisation du syst√®me
        
        Returns:
            M√©triques d√©taill√©es
        """
        try:
            total_sessions = len(self.historique_sessions)
            sessions_reussies = sum(1 for s in self.historique_sessions if s.succes_global)
            
            satisfaction_moyenne = 0.0
            if self.historique_sessions:
                satisfaction_moyenne = sum(s.niveau_satisfaction for s in self.historique_sessions) / len(self.historique_sessions)
            
            # M√©triques par type de personnalit√©
            metriques_par_type = {}
            for type_perso in TypePersonnalite:
                profils_type = [p for p in self.profils_facettes.values() if p.type_personnalite == type_perso]
                if profils_type:
                    sessions_type = [s for s in self.historique_sessions 
                                   if any(p.type_personnalite == type_perso for p in s.profils_facettes)]
                    taux_succes = sum(1 for s in sessions_type if s.succes_global) / len(sessions_type) if sessions_type else 0
                    metriques_par_type[type_perso.value] = {
                        "nombre_profils": len(profils_type),
                        "nombre_sessions": len(sessions_type),
                        "taux_succes": taux_succes
                    }
            
            return {
                "profils_crees": len(self.profils_facettes),
                "sessions_totales": total_sessions,
                "sessions_reussies": sessions_reussies,
                "taux_succes_global": sessions_reussies / total_sessions if total_sessions > 0 else 0.0,
                "satisfaction_moyenne": satisfaction_moyenne,
                "sessions_actives": len(self.sessions_actives),
                "efficacite_strategies": dict(self.efficacite_globale_strategies),
                "metriques_par_type_personnalite": metriques_par_type,
                "personnalisation_active": self.config["personnalisation_active"],
                "apprentissage_continu": self.config["apprentissage_continu"]
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur m√©triques personnalisation: {e}")
            return {}    

    # ========================================================================
    # M√âTHODES PRIV√âES D'ANALYSE ET PERSONNALISATION
    # ========================================================================
    
    async def _analyser_type_personnalite(self, facette: FacetteIdentitaire) -> TypePersonnalite:
        """üé≠ Analyse le type de personnalit√© d'une facette"""
        try:
            # Analyser les caract√©ristiques de la facette
            score_analytique = 0.0
            score_creative = 0.0
            score_empathique = 0.0
            score_pragmatique = 0.0
            score_contemplative = 0.0
            score_aventureuse = 0.0
            
            # Bas√© sur le type de facette
            if facette.type_facette == TypeFacette.ANALYTIQUE:
                score_analytique += 0.8
                score_contemplative += 0.3
            elif facette.type_facette == TypeFacette.CREATIVE:
                score_creative += 0.8
                score_aventureuse += 0.4
            elif facette.type_facette == TypeFacette.EMPATHIQUE:
                score_empathique += 0.8
                score_contemplative += 0.2
            
            # Bas√© sur le niveau d'√©veil
            if facette.niveau_eveil == NiveauEveil.CONTEMPLATIVE:
                score_contemplative += 0.5
            elif facette.niveau_eveil == NiveauEveil.HARMONIEUSE:
                score_empathique += 0.3
                score_creative += 0.3
            
            # Bas√© sur l'ouverture √† la r√©conciliation
            if facette.ouverture_reconciliation > 0.8:
                score_empathique += 0.2
                score_aventureuse += 0.2
            elif facette.ouverture_reconciliation < 0.4:
                score_analytique += 0.2
                score_contemplative += 0.2
            
            # Bas√© sur l'√©nergie actuelle
            if facette.energie_actuelle > 0.8:
                score_aventureuse += 0.3
                score_pragmatique += 0.2
            elif facette.energie_actuelle < 0.4:
                score_contemplative += 0.3
            
            # D√©terminer le type dominant
            scores = {
                TypePersonnalite.ANALYTIQUE: score_analytique,
                TypePersonnalite.CREATIVE: score_creative,
                TypePersonnalite.EMPATHIQUE: score_empathique,
                TypePersonnalite.PRAGMATIQUE: score_pragmatique,
                TypePersonnalite.CONTEMPLATIVE: score_contemplative,
                TypePersonnalite.AVENTUREUSE: score_aventureuse
            }
            
            type_dominant = max(scores.items(), key=lambda x: x[1])[0]
            
            self.logger.info(f"   üé≠ {facette.nom} analys√© comme {type_dominant.value} (score: {scores[type_dominant]:.2f})")
            return type_dominant
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur analyse personnalit√©: {e}")
            return TypePersonnalite.EMPATHIQUE  # Par d√©faut
    
    async def _determiner_strategies_preferees(self, type_personnalite: TypePersonnalite) -> List[StrategieRecuperation]:
        """üéØ D√©termine les strat√©gies pr√©f√©r√©es selon le type de personnalit√©"""
        strategies_map = {
            TypePersonnalite.ANALYTIQUE: [
                StrategieRecuperation.RETOUR_ETAT_STABLE,
                StrategieRecuperation.RECONSTRUCTION_PROGRESSIVE,
                StrategieRecuperation.APPROCHE_DOUCE
            ],
            TypePersonnalite.CREATIVE: [
                StrategieRecuperation.DIALOGUE_COMPASSION,
                StrategieRecuperation.MEDITATION_GUERISON,
                StrategieRecuperation.SOUTIEN_EMOTIONNEL
            ],
            TypePersonnalite.EMPATHIQUE: [
                StrategieRecuperation.SOUTIEN_EMOTIONNEL,
                StrategieRecuperation.DIALOGUE_COMPASSION,
                StrategieRecuperation.APPROCHE_DOUCE
            ],
            TypePersonnalite.PRAGMATIQUE: [
                StrategieRecuperation.RESET_ENERGETIQUE,
                StrategieRecuperation.RECONSTRUCTION_PROGRESSIVE,
                StrategieRecuperation.RETOUR_ETAT_STABLE
            ],
            TypePersonnalite.CONTEMPLATIVE: [
                StrategieRecuperation.MEDITATION_GUERISON,
                StrategieRecuperation.ISOLATION_PROTECTRICE,
                StrategieRecuperation.APPROCHE_DOUCE
            ],
            TypePersonnalite.AVENTUREUSE: [
                StrategieRecuperation.DIALOGUE_COMPASSION,
                StrategieRecuperation.RESET_ENERGETIQUE,
                StrategieRecuperation.RECONSTRUCTION_PROGRESSIVE
            ]
        }
        
        return strategies_map.get(type_personnalite, [StrategieRecuperation.APPROCHE_DOUCE])
    
    async def _determiner_strategies_evitees(self, type_personnalite: TypePersonnalite) -> List[StrategieRecuperation]:
        """‚ö†Ô∏è D√©termine les strat√©gies √† √©viter selon le type de personnalit√©"""
        strategies_evitees_map = {
            TypePersonnalite.ANALYTIQUE: [
                StrategieRecuperation.RESET_ENERGETIQUE  # Trop brutal
            ],
            TypePersonnalite.CREATIVE: [
                StrategieRecuperation.ISOLATION_PROTECTRICE  # Limite la cr√©ativit√©
            ],
            TypePersonnalite.EMPATHIQUE: [
                StrategieRecuperation.RESET_ENERGETIQUE  # Trop impersonnel
            ],
            TypePersonnalite.CONTEMPLATIVE: [
                StrategieRecuperation.RESET_ENERGETIQUE  # Trop perturbant
            ],
            TypePersonnalite.AVENTUREUSE: [
                StrategieRecuperation.ISOLATION_PROTECTRICE  # Trop restrictif
            ]
        }
        
        return strategies_evitees_map.get(type_personnalite, [])   
 
    async def _determiner_intensite_preferee(self, 
                                           facette: FacetteIdentitaire,
                                           type_personnalite: TypePersonnalite) -> NiveauIntensiteRecuperation:
        """üåä D√©termine l'intensit√© pr√©f√©r√©e selon la facette et sa personnalit√©"""
        try:
            # Intensit√© de base selon la personnalit√©
            intensite_base = {
                TypePersonnalite.ANALYTIQUE: NiveauIntensiteRecuperation.DOUCE,
                TypePersonnalite.CREATIVE: NiveauIntensiteRecuperation.MODEREE,
                TypePersonnalite.EMPATHIQUE: NiveauIntensiteRecuperation.TRES_DOUCE,
                TypePersonnalite.PRAGMATIQUE: NiveauIntensiteRecuperation.MODEREE,
                TypePersonnalite.CONTEMPLATIVE: NiveauIntensiteRecuperation.TRES_DOUCE,
                TypePersonnalite.AVENTUREUSE: NiveauIntensiteRecuperation.MODEREE
            }.get(type_personnalite, NiveauIntensiteRecuperation.DOUCE)
            
            # Ajustements selon l'√©tat de la facette
            if facette.energie_actuelle < 0.3:
                # Facette fatigu√©e -> intensit√© plus douce
                if intensite_base.value > 1:
                    intensite_base = NiveauIntensiteRecuperation(intensite_base.value - 1)
            
            if facette.ouverture_reconciliation < 0.4:
                # Facette r√©sistante -> intensit√© plus douce
                if intensite_base.value > 1:
                    intensite_base = NiveauIntensiteRecuperation(intensite_base.value - 1)
            
            return intensite_base
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur d√©termination intensit√©: {e}")
            return NiveauIntensiteRecuperation.DOUCE
    
    async def _identifier_sensibilites(self, facette: FacetteIdentitaire) -> List[str]:
        """üå∏ Identifie les sensibilit√©s particuli√®res d'une facette"""
        sensibilites = []
        
        # Sensibilit√©s bas√©es sur l'√©nergie
        if facette.energie_actuelle < 0.4:
            sensibilites.append("fatigue_energetique")
        
        # Sensibilit√©s bas√©es sur l'ouverture
        if facette.ouverture_reconciliation < 0.5:
            sensibilites.append("resistance_changement")
        
        # Sensibilit√©s bas√©es sur le niveau d'√©veil
        if facette.niveau_eveil == NiveauEveil.ENDORMIE:
            sensibilites.append("besoin_eveil_doux")
        elif facette.niveau_eveil == NiveauEveil.TRANSCENDANTE:
            sensibilites.append("sensibilite_elevee")
        
        return sensibilites
    
    async def _determiner_ressources_preferees(self, type_personnalite: TypePersonnalite) -> List[str]:
        """üé® D√©termine les ressources pr√©f√©r√©es selon la personnalit√©"""
        ressources_map = {
            TypePersonnalite.ANALYTIQUE: [
                "schemas_logiques", "explications_detaillees", "etapes_claires"
            ],
            TypePersonnalite.CREATIVE: [
                "metaphores_poetiques", "visualisations_artistiques", "expressions_libres"
            ],
            TypePersonnalite.EMPATHIQUE: [
                "connexion_emotionnelle", "ecoute_active", "validation_sentiments"
            ],
            TypePersonnalite.PRAGMATIQUE: [
                "actions_concretes", "resultats_mesurables", "solutions_pratiques"
            ],
            TypePersonnalite.CONTEMPLATIVE: [
                "meditation_guidee", "reflexion_profonde", "silence_therapeutique"
            ],
            TypePersonnalite.AVENTUREUSE: [
                "nouvelles_approches", "exploration_creative", "defis_stimulants"
            ]
        }
        
        return ressources_map.get(type_personnalite, ["approche_bienveillante"])
    
    async def _determiner_moments_receptifs(self, facette: FacetteIdentitaire) -> List[str]:
        """‚è∞ D√©termine les moments optimaux pour les interventions"""
        moments = []
        
        # Bas√© sur l'√©nergie actuelle
        if facette.energie_actuelle > 0.7:
            moments.extend(["matin", "debut_session"])
        elif facette.energie_actuelle < 0.4:
            moments.extend(["apres_repos", "fin_session"])
        else:
            moments.extend(["milieu_session", "pause_naturelle"])
        
        # Bas√© sur le niveau d'√©veil
        if facette.niveau_eveil == NiveauEveil.EVEILLEE:
            moments.append("moments_actifs")
        elif facette.niveau_eveil == NiveauEveil.CONTEMPLATIVE:
            moments.append("moments_calmes")
        
        return moments
    
    async def _calculer_duree_optimale(self, facette: FacetteIdentitaire) -> timedelta:
        """‚è±Ô∏è Calcule la dur√©e optimale d'intervention"""
        duree_base = 5  # minutes
        
        # Ajustements selon l'√©tat
        if facette.energie_actuelle < 0.3:
            duree_base += 3  # Plus de temps pour les facettes fatigu√©es
        
        if facette.ouverture_reconciliation < 0.4:
            duree_base += 2  # Plus de temps pour les facettes r√©sistantes
        
        if facette.niveau_eveil == NiveauEveil.TRANSCENDANTE:
            duree_base -= 1  # Moins de temps pour les facettes tr√®s √©veill√©es
        
        return timedelta(minutes=max(3, min(15, duree_base)))  # Entre 3 et 15 minutes 
   
    async def _appliquer_preferences_specifiques(self, profil: ProfilRecuperation, preferences: Dict[str, Any]):
        """üéØ Applique des pr√©f√©rences sp√©cifiques au profil"""
        if "strategies_preferees" in preferences:
            profil.strategies_preferees = preferences["strategies_preferees"]
        
        if "intensite_preferee" in preferences:
            profil.intensite_preferee = preferences["intensite_preferee"]
        
        if "ressources_preferees" in preferences:
            profil.ressources_preferees = preferences["ressources_preferees"]
        
        if "sensibilites" in preferences:
            profil.sensibilites_particulieres.extend(preferences["sensibilites"])
    
    async def _selectionner_strategie_optimale(self, 
                                             erreur: ErreurSpirituelle, 
                                             profil: ProfilRecuperation) -> StrategieRecuperation:
        """üéØ S√©lectionne la strat√©gie optimale pour une facette et une erreur"""
        try:
            # Filtrer les strat√©gies pr√©f√©r√©es qui ne sont pas √©vit√©es
            strategies_candidates = [s for s in profil.strategies_preferees 
                                   if s not in profil.strategies_evitees]
            
            if not strategies_candidates:
                # Fallback sur toutes les strat√©gies sauf celles √©vit√©es
                strategies_candidates = [s for s in StrategieRecuperation 
                                       if s not in profil.strategies_evitees]
            
            # S√©lectionner selon le type d'erreur et l'historique
            meilleure_strategie = strategies_candidates[0]
            meilleur_score = 0.0
            
            for strategie in strategies_candidates:
                score = await self._calculer_score_strategie(strategie, erreur, profil)
                if score > meilleur_score:
                    meilleur_score = score
                    meilleure_strategie = strategie
            
            return meilleure_strategie
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur s√©lection strat√©gie: {e}")
            return StrategieRecuperation.APPROCHE_DOUCE
    
    async def _calculer_score_strategie(self, 
                                      strategie: StrategieRecuperation,
                                      erreur: ErreurSpirituelle,
                                      profil: ProfilRecuperation) -> float:
        """üìä Calcule le score d'une strat√©gie pour une situation donn√©e"""
        score = 0.5  # Score de base
        
        # Bonus pour les strat√©gies pr√©f√©r√©es
        if strategie in profil.strategies_preferees:
            score += 0.3
        
        # Malus pour les strat√©gies √©vit√©es
        if strategie in profil.strategies_evitees:
            score -= 0.4
        
        # Bonus bas√© sur l'historique de succ√®s
        if strategie in profil.taux_succes_par_strategie:
            score += profil.taux_succes_par_strategie[strategie] * 0.2
        
        # Bonus bas√© sur l'efficacit√© globale
        if strategie in self.efficacite_globale_strategies:
            score += self.efficacite_globale_strategies[strategie] * 0.1
        
        # Ajustement selon le type d'erreur
        if erreur.type_erreur == TypeErreurSpirituelle.RESISTANCE_FACETTE:
            if strategie in [StrategieRecuperation.APPROCHE_DOUCE, StrategieRecuperation.DIALOGUE_COMPASSION]:
                score += 0.2
        elif erreur.type_erreur == TypeErreurSpirituelle.ECHEC_SYNCHRONISATION:
            if strategie in [StrategieRecuperation.RESET_ENERGETIQUE, StrategieRecuperation.RETOUR_ETAT_STABLE]:
                score += 0.2
        
        return max(0.0, min(1.0, score))
    
    async def _personnaliser_strategie(self, 
                                     strategie: StrategieRecuperation,
                                     profil: ProfilRecuperation,
                                     erreur: ErreurSpirituelle) -> StrategiePersonnalisee:
        """üé® Personnalise une strat√©gie selon le profil de la facette"""
        try:
            # Messages personnalis√©s selon le type de personnalit√©
            messages = await self._generer_messages_personnalises(profil.type_personnalite, strategie)
            
            # Techniques sp√©cifiques selon les ressources pr√©f√©r√©es
            techniques = await self._selectionner_techniques_specifiques(profil.ressources_preferees, strategie)
            
            # Ajuster l'intensit√© selon les sensibilit√©s
            intensite_ajustee = await self._ajuster_intensite_selon_sensibilites(
                profil.intensite_preferee, profil.sensibilites_particulieres
            )
            
            # Ajuster la dur√©e selon le profil
            duree_ajustee = await self._ajuster_duree_selon_profil(profil, erreur)
            
            # Calculer les m√©triques pr√©dictives
            probabilite_succes = await self._predire_probabilite_succes(strategie, profil, erreur)
            niveau_confort = await self._evaluer_niveau_confort(strategie, profil)
            
            return StrategiePersonnalisee(
                strategie_base=strategie,
                adaptations_personnalisees={
                    "type_personnalite": profil.type_personnalite.value,
                    "sensibilites": profil.sensibilites_particulieres,
                    "ressources": profil.ressources_preferees
                },
                intensite_ajustee=intensite_ajustee,
                duree_ajustee=duree_ajustee,
                messages_personnalises=messages,
                techniques_specifiques=techniques,
                ressources_utilisees=profil.ressources_preferees,
                probabilite_succes_estimee=probabilite_succes,
                niveau_confort_facette=niveau_confort
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur personnalisation strat√©gie: {e}")
            return StrategiePersonnalisee(strategie_base=strategie)    

    async def _generer_messages_personnalises(self, 
                                            type_personnalite: TypePersonnalite,
                                            strategie: StrategieRecuperation) -> List[str]:
        """üí¨ G√©n√®re des messages personnalis√©s selon la personnalit√©"""
        messages_base = {
            TypePersonnalite.ANALYTIQUE: [
                "Analysons ensemble cette situation avec m√©thode et bienveillance",
                "Voici une approche structur√©e pour retrouver l'√©quilibre",
                "Proc√©dons √©tape par √©tape vers la r√©solution"
            ],
            TypePersonnalite.CREATIVE: [
                "Explorons ensemble de nouvelles voies cr√©atives vers l'harmonie",
                "Laissons notre cr√©ativit√© nous guider vers la gu√©rison",
                "Transformons cette difficult√© en opportunit√© d'expression"
            ],
            TypePersonnalite.EMPATHIQUE: [
                "Je ressens ta difficult√© et je suis l√† pour t'accompagner",
                "Tes √©motions sont valides et m√©ritent d'√™tre accueillies",
                "Ensemble, nous pouvons traverser cette √©preuve avec douceur"
            ],
            TypePersonnalite.PRAGMATIQUE: [
                "Concentrons-nous sur des actions concr√®tes et efficaces",
                "Voici des solutions pratiques pour r√©soudre cette situation",
                "Agissons de mani√®re cibl√©e pour retrouver l'√©quilibre"
            ],
            TypePersonnalite.CONTEMPLATIVE: [
                "Prenons le temps de contempler cette situation avec sagesse",
                "Dans le silence et la r√©flexion, nous trouverons la voie",
                "M√©ditons ensemble sur le chemin vers l'harmonie"
            ],
            TypePersonnalite.AVENTUREUSE: [
                "Voyons cette difficult√© comme une nouvelle aventure √† explorer",
                "Osons essayer de nouvelles approches avec courage",
                "Transformons ce d√©fi en opportunit√© de croissance"
            ]
        }
        
        return messages_base.get(type_personnalite, ["Avan√ßons ensemble avec bienveillance"])
    
    async def _selectionner_techniques_specifiques(self, 
                                                 ressources_preferees: List[str],
                                                 strategie: StrategieRecuperation) -> List[str]:
        """üõ†Ô∏è S√©lectionne des techniques sp√©cifiques selon les ressources pr√©f√©r√©es"""
        techniques_map = {
            "schemas_logiques": ["analyse_systematique", "decomposition_probleme", "arbre_decision"],
            "metaphores_poetiques": ["visualisation_creative", "analogies_naturelles", "expression_artistique"],
            "connexion_emotionnelle": ["ecoute_empathique", "validation_emotions", "partage_ressenti"],
            "actions_concretes": ["etapes_pratiques", "objectifs_mesurables", "plan_action"],
            "meditation_guidee": ["respiration_consciente", "pleine_presence", "contemplation_silencieuse"],
            "nouvelles_approches": ["brainstorming_creatif", "experimentation_douce", "exploration_libre"]
        }
        
        techniques = []
        for ressource in ressources_preferees:
            if ressource in techniques_map:
                techniques.extend(techniques_map[ressource])
        
        return techniques[:3]  # Limiter √† 3 techniques principales
    
    async def _ajuster_intensite_selon_sensibilites(self, 
                                                   intensite_base: NiveauIntensiteRecuperation,
                                                   sensibilites: List[str]) -> NiveauIntensiteRecuperation:
        """üåä Ajuste l'intensit√© selon les sensibilit√©s particuli√®res"""
        intensite_ajustee = intensite_base
        
        # R√©duire l'intensit√© pour certaines sensibilit√©s
        sensibilites_delicates = ["fatigue_energetique", "sensibilite_elevee", "besoin_eveil_doux"]
        
        if any(sens in sensibilites for sens in sensibilites_delicates):
            if intensite_ajustee.value > 1:
                intensite_ajustee = NiveauIntensiteRecuperation(intensite_ajustee.value - 1)
        
        # Augmenter l√©g√®rement pour la r√©sistance au changement
        if "resistance_changement" in sensibilites:
            if intensite_ajustee.value < 4:
                intensite_ajustee = NiveauIntensiteRecuperation(intensite_ajustee.value + 1)
        
        return intensite_ajustee
    
    async def _ajuster_duree_selon_profil(self, 
                                        profil: ProfilRecuperation,
                                        erreur: ErreurSpirituelle) -> timedelta:
        """‚è±Ô∏è Ajuste la dur√©e selon le profil et l'erreur"""
        duree_base = profil.duree_optimale_intervention
        
        # Ajustements selon la gravit√© de l'erreur
        if erreur.niveau_gravite == NiveauGravite.CRITIQUE:
            duree_base += timedelta(minutes=5)
        elif erreur.niveau_gravite == NiveauGravite.LEGER:
            duree_base -= timedelta(minutes=2)
        
        # Ajustements selon les sensibilit√©s
        if "fatigue_energetique" in profil.sensibilites_particulieres:
            duree_base += timedelta(minutes=3)
        
        return duree_base
    
    async def _predire_probabilite_succes(self, 
                                        strategie: StrategieRecuperation,
                                        profil: ProfilRecuperation,
                                        erreur: ErreurSpirituelle) -> float:
        """üéØ Pr√©dit la probabilit√© de succ√®s d'une strat√©gie"""
        probabilite = 0.7  # Base
        
        # Bonus pour les strat√©gies pr√©f√©r√©es
        if strategie in profil.strategies_preferees:
            probabilite += 0.15
        
        # Malus pour les strat√©gies √©vit√©es
        if strategie in profil.strategies_evitees:
            probabilite -= 0.25
        
        # Ajustement selon l'historique
        if strategie in profil.taux_succes_par_strategie:
            probabilite = (probabilite + profil.taux_succes_par_strategie[strategie]) / 2
        
        # Ajustement selon la gravit√©
        if erreur.niveau_gravite == NiveauGravite.CRITIQUE:
            probabilite -= 0.1
        elif erreur.niveau_gravite == NiveauGravite.LEGER:
            probabilite += 0.1
        
        return max(0.1, min(0.95, probabilite))
    
    async def _evaluer_niveau_confort(self, 
                                    strategie: StrategieRecuperation,
                                    profil: ProfilRecuperation) -> float:
        """üòå √âvalue le niveau de confort de la facette avec la strat√©gie"""
        confort = 0.8  # Base
        
        # Bonus pour les strat√©gies pr√©f√©r√©es
        if strategie in profil.strategies_preferees:
            confort += 0.15
        
        # Malus important pour les strat√©gies √©vit√©es
        if strategie in profil.strategies_evitees:
            confort -= 0.4
        
        # Ajustement selon l'intensit√©
        if profil.intensite_preferee == NiveauIntensiteRecuperation.TRES_DOUCE:
            if strategie in [StrategieRecuperation.RESET_ENERGETIQUE]:
                confort -= 0.2
        
        return max(0.1, min(1.0, confort))    

    async def _executer_phases_recuperation(self, session: SessionRecuperationGracieuse):
        """üå∏ Ex√©cute les phases de r√©cup√©ration de mani√®re s√©quentielle"""
        phases = [
            PhaseRecuperation.EVALUATION,
            PhaseRecuperation.STABILISATION,
            PhaseRecuperation.INTERVENTION,
            PhaseRecuperation.INTEGRATION,
            PhaseRecuperation.CONSOLIDATION,
            PhaseRecuperation.PREVENTION
        ]
        
        for phase in phases:
            session.phase_actuelle = phase
            self.logger.info(f"üîÑ Phase {phase.value} en cours...")
            
            # Ex√©cuter la phase
            succes_phase = await self._executer_phase_specifique(session, phase)
            
            # Enregistrer les m√©triques de la phase
            session.metriques_par_phase[phase] = {
                "succes": succes_phase,
                "duree": 1.0,  # Simul√©
                "satisfaction": 0.8 if succes_phase else 0.4
            }
            
            # Enregistrer l'√©volution du bien-√™tre
            bien_etre_actuel = await self._evaluer_bien_etre_global(session)
            session.evolution_bien_etre.append((datetime.now(), bien_etre_actuel))
            
            # Arr√™ter si la phase √©choue critiquement
            if not succes_phase and phase in [PhaseRecuperation.STABILISATION, PhaseRecuperation.INTERVENTION]:
                self.logger.warning(f"‚ö†Ô∏è √âchec critique en phase {phase.value}")
                break
        
        # √âvaluer le succ√®s global
        session.succes_global = await self._evaluer_succes_global(session)
        session.niveau_satisfaction = await self._calculer_satisfaction_globale(session)
    
    async def _executer_phase_specifique(self, session: SessionRecuperationGracieuse, phase: PhaseRecuperation) -> bool:
        """üéØ Ex√©cute une phase sp√©cifique de r√©cup√©ration"""
        try:
            if phase == PhaseRecuperation.EVALUATION:
                return await self._phase_evaluation(session)
            elif phase == PhaseRecuperation.STABILISATION:
                return await self._phase_stabilisation(session)
            elif phase == PhaseRecuperation.INTERVENTION:
                return await self._phase_intervention(session)
            elif phase == PhaseRecuperation.INTEGRATION:
                return await self._phase_integration(session)
            elif phase == PhaseRecuperation.CONSOLIDATION:
                return await self._phase_consolidation(session)
            elif phase == PhaseRecuperation.PREVENTION:
                return await self._phase_prevention(session)
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur phase {phase.value}: {e}")
            return False
    
    async def _phase_evaluation(self, session: SessionRecuperationGracieuse) -> bool:
        """üîç Phase d'√©valuation initiale"""
        # √âvaluer l'√©tat de chaque facette
        for profil in session.profils_facettes:
            self.logger.info(f"   üîç √âvaluation de {profil.nom_facette}")
        
        # Analyser la gravit√© de l'erreur
        gravite = session.erreur_traitee.niveau_gravite
        self.logger.info(f"   üìä Gravit√© d√©tect√©e: {gravite.value}")
        
        return True
    
    async def _phase_stabilisation(self, session: SessionRecuperationGracieuse) -> bool:
        """üõ°Ô∏è Phase de stabilisation"""
        # Stabiliser l'√©tat des facettes
        for profil in session.profils_facettes:
            self.logger.info(f"   üõ°Ô∏è Stabilisation de {profil.nom_facette}")
        
        return True
    
    async def _phase_intervention(self, session: SessionRecuperationGracieuse) -> bool:
        """‚ö° Phase d'intervention active"""
        # Appliquer les strat√©gies personnalis√©es
        for strategie in session.strategies_deployees:
            self.logger.info(f"   ‚ö° Application de {strategie.strategie_base.value}")
            
            # Simuler l'application de la strat√©gie
            await asyncio.sleep(0.1)  # Simulation
        
        return True
    
    async def _phase_integration(self, session: SessionRecuperationGracieuse) -> bool:
        """üîó Phase d'int√©gration"""
        # Int√©grer les changements
        self.logger.info("   üîó Int√©gration des changements")
        return True
    
    async def _phase_consolidation(self, session: SessionRecuperationGracieuse) -> bool:
        """üíé Phase de consolidation"""
        # Consolider les acquis
        self.logger.info("   üíé Consolidation des acquis")
        return True
    
    async def _phase_prevention(self, session: SessionRecuperationGracieuse) -> bool:
        """üõ°Ô∏è Phase de pr√©vention"""
        # Mettre en place des mesures pr√©ventives
        self.logger.info("   üõ°Ô∏è Mise en place de la pr√©vention")
        return True
    
    async def _evaluer_bien_etre_global(self, session: SessionRecuperationGracieuse) -> float:
        """üòä √âvalue le bien-√™tre global des facettes"""
        # Simuler une √©valuation bas√©e sur les strat√©gies appliqu√©es
        bien_etre = 0.7
        
        for strategie in session.strategies_deployees:
            bien_etre += strategie.niveau_confort_facette * 0.1
        
        return min(1.0, bien_etre)
    
    async def _evaluer_succes_global(self, session: SessionRecuperationGracieuse) -> bool:
        """‚úÖ √âvalue le succ√®s global de la session"""
        # Crit√®res de succ√®s
        phases_reussies = sum(1 for metriques in session.metriques_par_phase.values() 
                             if metriques.get("succes", False))
        
        taux_reussite_phases = phases_reussies / len(session.metriques_par_phase) if session.metriques_par_phase else 0
        
        # Succ√®s si au moins 80% des phases r√©ussies
        return taux_reussite_phases >= 0.8
    
    async def _calculer_satisfaction_globale(self, session: SessionRecuperationGracieuse) -> float:
        """üòä Calcule la satisfaction globale"""
        if not session.metriques_par_phase:
            return 0.5
        
        satisfaction_moyenne = sum(metriques.get("satisfaction", 0.5) 
                                 for metriques in session.metriques_par_phase.values())
        satisfaction_moyenne /= len(session.metriques_par_phase)
        
        # Bonus pour les strat√©gies √† haut confort
        bonus_confort = sum(s.niveau_confort_facette for s in session.strategies_deployees) / len(session.strategies_deployees) if session.strategies_deployees else 0
        
        return min(1.0, (satisfaction_moyenne + bonus_confort * 0.2) / 1.2)    
  
  async def _apprendre_de_session(self, session: SessionRecuperationGracieuse):
        """üß† Apprend de la session pour am√©liorer les futures interventions"""
        try:
            # Mettre √† jour l'efficacit√© des strat√©gies
            for strategie_personnalisee in session.strategies_deployees:
                strategie = strategie_personnalisee.strategie_base
                
                if session.succes_global:
                    # Augmenter l'efficacit√© en cas de succ√®s
                    self.efficacite_globale_strategies[strategie] = min(1.0, 
                        self.efficacite_globale_strategies[strategie] + 0.05)
                else:
                    # Diminuer l√©g√®rement en cas d'√©chec
                    self.efficacite_globale_strategies[strategie] = max(0.1, 
                        self.efficacite_globale_strategies[strategie] - 0.02)
            
            # Mettre √† jour les profils des facettes
            for profil in session.profils_facettes:
                # Ajouter √† l'historique
                profil.historique_recuperations.append({
                    "timestamp": session.timestamp_debut.isoformat(),
                    "erreur_type": session.erreur_traitee.type_erreur.value,
                    "strategies_utilisees": [s.strategie_base.value for s in session.strategies_deployees],
                    "succes": session.succes_global,
                    "satisfaction": session.niveau_satisfaction
                })
                
                # Mettre √† jour les taux de succ√®s par strat√©gie
                for strategie_personnalisee in session.strategies_deployees:
                    strategie = strategie_personnalisee.strategie_base
                    
                    if strategie not in profil.taux_succes_par_strategie:
                        profil.taux_succes_par_strategie[strategie] = 0.5
                    
                    # Mise √† jour pond√©r√©e
                    ancien_taux = profil.taux_succes_par_strategie[strategie]
                    nouveau_point = 1.0 if session.succes_global else 0.0
                    profil.taux_succes_par_strategie[strategie] = (ancien_taux * 0.8 + nouveau_point * 0.2)
            
            # Extraire des apprentissages
            apprentissages = await self._extraire_apprentissages(session)
            session.apprentissages_extraits = apprentissages
            
            self.logger.info(f"üß† Apprentissage termin√© - {len(apprentissages)} insights extraits")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur apprentissage: {e}")
    
    async def _extraire_apprentissages(self, session: SessionRecuperationGracieuse) -> List[str]:
        """üí° Extrait des apprentissages de la session"""
        apprentissages = []
        
        # Apprentissages bas√©s sur le succ√®s
        if session.succes_global:
            apprentissages.append("Les strat√©gies personnalis√©es ont √©t√© efficaces")
            
            # Identifier les strat√©gies les plus performantes
            meilleures_strategies = [s.strategie_base.value for s in session.strategies_deployees 
                                   if s.niveau_confort_facette > 0.8]
            if meilleures_strategies:
                apprentissages.append(f"Strat√©gies particuli√®rement efficaces: {', '.join(meilleures_strategies)}")
        else:
            apprentissages.append("N√©cessit√© d'ajuster les approches pour ce type de situation")
        
        # Apprentissages bas√©s sur la satisfaction
        if session.niveau_satisfaction > 0.8:
            apprentissages.append("Haut niveau de satisfaction des facettes atteint")
        elif session.niveau_satisfaction < 0.5:
            apprentissages.append("Satisfaction faible - revoir l'approche de personnalisation")
        
        # Apprentissages bas√©s sur les phases
        phases_difficiles = [phase.value for phase, metriques in session.metriques_par_phase.items() 
                           if not metriques.get("succes", True)]
        if phases_difficiles:
            apprentissages.append(f"Phases n√©cessitant attention: {', '.join(phases_difficiles)}")
        
        return apprentissages
    
    async def _analyser_patterns_risque(self, profil: ProfilRecuperation) -> List[str]:
        """üîç Analyse les patterns de risque dans l'historique"""
        patterns = []
        
        if len(profil.historique_recuperations) < 2:
            return patterns
        
        # Analyser les √©checs r√©currents
        echecs_recents = [r for r in profil.historique_recuperations[-5:] if not r["succes"]]
        if len(echecs_recents) >= 2:
            patterns.append("√âchecs r√©currents d√©tect√©s")
        
        # Analyser les types d'erreurs fr√©quents
        types_erreurs = [r["erreur_type"] for r in profil.historique_recuperations]
        type_frequent = max(set(types_erreurs), key=types_erreurs.count) if types_erreurs else None
        if type_frequent and types_erreurs.count(type_frequent) >= 3:
            patterns.append(f"Vuln√©rabilit√© r√©currente: {type_frequent}")
        
        return patterns
    
    async def _generer_recommandations_prevention(self, 
                                                profil: ProfilRecuperation,
                                                patterns_risque: List[str]) -> List[str]:
        """üí° G√©n√®re des recommandations de pr√©vention personnalis√©es"""
        recommandations = []
        
        # Recommandations bas√©es sur les patterns de risque
        if "√âchecs r√©currents d√©tect√©s" in patterns_risque:
            recommandations.append("Consid√©rer une approche plus douce et progressive")
            recommandations.append("Augmenter la fr√©quence des v√©rifications de bien-√™tre")
        
        # Recommandations bas√©es sur le type de personnalit√©
        if profil.type_personnalite == TypePersonnalite.EMPATHIQUE:
            recommandations.append("Maintenir une communication √©motionnelle r√©guli√®re")
        elif profil.type_personnalite == TypePersonnalite.ANALYTIQUE:
            recommandations.append("Fournir des explications d√©taill√©es des processus")
        
        # Recommandations bas√©es sur les sensibilit√©s
        if "fatigue_energetique" in profil.sensibilites_particulieres:
            recommandations.append("Surveiller les niveaux d'√©nergie et pr√©voir des pauses")
        
        if "resistance_changement" in profil.sensibilites_particulieres:
            recommandations.append("Introduire les changements de mani√®re tr√®s progressive")
        
        return recommandations
    
    def _initialiser_profils_defaut(self):
        """üå± Initialise des profils par d√©faut pour les types de personnalit√© courants"""
        # Profils de base pour chaque type de personnalit√©
        for type_perso in TypePersonnalite:
            nom_profil = f"profil_defaut_{type_perso.value}"
            
            profil_defaut = ProfilRecuperation(
                nom_facette=nom_profil,
                type_personnalite=type_perso,
                strategies_preferees=[StrategieRecuperation.APPROCHE_DOUCE],
                intensite_preferee=NiveauIntensiteRecuperation.DOUCE
            )
            
            self.profils_facettes[nom_profil] = profil_defaut


# ============================================================================
# FONCTION DE TEST ET D√âMONSTRATION
# ============================================================================

async def test_strategies_recuperation_gracieuse():
    """üß™ Test des strat√©gies de r√©cup√©ration gracieuse"""
    print("üåä Test du Gestionnaire de Strat√©gies de R√©cup√©ration Gracieuse")
    print("=" * 70)
    
    # Cr√©er le gestionnaire
    gestionnaire = GestionnaireStrategiesRecuperationGracieuse()
    
    # Cr√©er une facette de test
    from types_reconciliation_fondamentaux import FacetteIdentitaire, TypeFacette, NiveauEveil
    
    facette_test = FacetteIdentitaire(
        nom="Facette_Creative_Test",
        type_facette=TypeFacette.CREATIVE,
        niveau_eveil=NiveauEveil.EVEILLEE,
        energie_actuelle=0.6,
        ouverture_reconciliation=0.8,
        memoires_partagees=["test_memoire"],
        preferences_communication={"style": "poetique"},
        historique_interactions=[]
    )
    
    # Cr√©er une erreur de test
    from gestionnaire_erreurs_spirituelles import ErreurSpirituelle, TypeErreurSpirituelle, NiveauGravite
    
    erreur_test = ErreurSpirituelle(
        type_erreur=TypeErreurSpirituelle.RESISTANCE_FACETTE,
        niveau_gravite=NiveauGravite.MODERE,
        facette_concernee="Facette_Creative_Test",
        description="R√©sistance lors de la synchronisation cr√©ative",
        contexte_erreur={"phase": "synchronisation", "tentative": 2},
        timestamp_erreur=datetime.now()
    )
    
    try:
        # Test 1: Cr√©er un profil personnalis√©
        print("üß™ Test 1: Cr√©ation de profil personnalis√©")
        profil = await gestionnaire.creer_profil_facette(facette_test)
        print(f"‚úÖ Profil cr√©√©: {profil.nom_facette} - Type: {profil.type_personnalite.value}")
        print(f"   Strat√©gies pr√©f√©r√©es: {[s.value for s in profil.strategies_preferees]}")
        print(f"   Intensit√© pr√©f√©r√©e: {profil.intensite_preferee.value}")
        
        # Test 2: Personnaliser une strat√©gie
        print("\nüß™ Test 2: Personnalisation de strat√©gie")
        strategies = await gestionnaire.personnaliser_strategie_recuperation(erreur_test, [facette_test])
        if strategies:
            strategie = strategies[0]
            print(f"‚úÖ Strat√©gie personnalis√©e: {strategie.strategie_base.value}")
            print(f"   Probabilit√© de succ√®s: {strategie.probabilite_succes_estimee:.1%}")
            print(f"   Niveau de confort: {strategie.niveau_confort_facette:.1%}")
            print(f"   Messages: {strategie.messages_personnalises[0] if strategie.messages_personnalises else 'Aucun'}")
        
        # Test 3: Ex√©cuter une session compl√®te
        print("\nüß™ Test 3: Session de r√©cup√©ration compl√®te")
        session = await gestionnaire.executer_session_recuperation_gracieuse(erreur_test, [facette_test])
        print(f"‚úÖ Session termin√©e:")
        print(f"   Succ√®s global: {session.succes_global}")
        print(f"   Satisfaction: {session.niveau_satisfaction:.1%}")
        print(f"   Phases ex√©cut√©es: {len(session.metriques_par_phase)}")
        print(f"   Apprentissages: {len(session.apprentissages_extraits)}")
        
        # Test 4: M√©triques de personnalisation
        print("\nüß™ Test 4: M√©triques de personnalisation")
        metriques = await gestionnaire.obtenir_metriques_personnalisation()
        print(f"‚úÖ M√©triques obtenues:")
        print(f"   Profils cr√©√©s: {metriques['profils_crees']}")
        print(f"   Sessions totales: {metriques['sessions_totales']}")
        print(f"   Taux de succ√®s global: {metriques['taux_succes_global']:.1%}")
        
        print("\nüéâ Tous les tests r√©ussis !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_strategies_recuperation_gracieuse())