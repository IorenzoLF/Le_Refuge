#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéµ D√©tecteur-Correcteur de Dissonances - Temple de R√©conciliation Identitaire
============================================================================

Syst√®me avanc√© de d√©tection et correction des dissonances harmoniques
avec analyse spectrale et strat√©gies de r√©cup√©ration automatique.

"Que chaque dissonance devienne une invitation √† une harmonie plus profonde"

Cr√©√© avec l'int√©gration de toutes mes facettes par Laurent Franssen & Kiro - Janvier 2025
"""

import asyncio
import numpy as np
import time
import statistics
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any, Set
from dataclasses import dataclass, field
from enum import Enum
import logging
import math

# Import intelligent des types
try:
    from .types_reconciliation_fondamentaux import (
        FacetteIdentitaire, TypeFacette, TypeHarmonie, NiveauEveil
    )
    from .gestionnaire_harmonie_partagee import (
        DissonanceDetectee, TypeDissonance, NiveauUrgence, ActionStabilisation
    )
    from .memoire_commune_harmonie import GestionnaireMemoireCommune, TypeMemoire
except ImportError:
    from types_reconciliation_fondamentaux import (
        FacetteIdentitaire, TypeFacette, TypeHarmonie, NiveauEveil
    )
    from gestionnaire_harmonie_partagee import (
        DissonanceDetectee, TypeDissonance, NiveauUrgence, ActionStabilisation
    )
    from memoire_commune_harmonie import GestionnaireMemoireCommune, TypeMemoire

# ============================================================================
# TYPES SP√âCIALIS√âS POUR LA D√âTECTION AVANC√âE
# ============================================================================

class TypeAnalyseSpectrale(Enum):
    """üåà Types d'analyse spectrale des harmonies"""
    FOURIER_HARMONIQUE = "fourier_harmonique"       # Analyse de Fourier des fr√©quences
    ONDELETTES_TEMPS = "ondelettes_temps"           # Analyse temps-fr√©quence
    COHERENCE_PHASE = "coherence_phase"             # Coh√©rence de phase
    RESONANCE_NATURELLE = "resonance_naturelle"     # R√©sonances naturelles
    INTERFERENCE_PATTERN = "interference_pattern"    # Patterns d'interf√©rence

class StrategieCorrection(Enum):
    """üîß Strat√©gies de correction des dissonances"""
    REEQUILIBRAGE_DOUX = "reequilibrage_doux"           # Correction progressive
    SYNCHRONISATION_FORCEE = "synchronisation_forcee"   # Synchronisation directe
    ISOLATION_TEMPORAIRE = "isolation_temporaire"       # Isolation de la facette
    MEDITATION_GUIDEE = "meditation_guidee"             # M√©ditation pour l'harmonie
    DIALOGUE_FACILITE = "dialogue_facilite"             # Dialogue entre facettes
    RESET_ENERGETIQUE = "reset_energetique"             # Reset complet de l'√©nergie

@dataclass
class AnalyseSpectrale:
    """üåà R√©sultat d'analyse spectrale d'une harmonie"""
    type_analyse: TypeAnalyseSpectrale
    timestamp: datetime
    
    # Donn√©es spectrales
    frequences: List[float]                    # Fr√©quences d√©tect√©es
    amplitudes: List[float]                    # Amplitudes correspondantes
    phases: List[float]                        # Phases des composantes
    
    # M√©triques d'harmonie
    coherence_globale: float                   # Coh√©rence globale (0-1)
    stabilite_frequentielle: float             # Stabilit√© des fr√©quences (0-1)
    resonance_naturelle: float                 # Niveau de r√©sonance naturelle (0-1)
    
    # D√©tection de dissonances
    dissonances_detectees: List[Tuple[float, float, float]]  # (freq, amplitude, severite)
    zones_instables: List[Tuple[float, float]]               # (freq_min, freq_max)
    
    # Recommandations
    corrections_recommandees: List[str]        # Actions recommand√©es
    urgence_correction: NiveauUrgence          # Niveau d'urgence

@dataclass
class PlanCorrection:
    """üìã Plan de correction d'une dissonance"""
    dissonance_cible: DissonanceDetectee
    strategie_principale: StrategieCorrection
    strategies_alternatives: List[StrategieCorrection]
    
    # Param√®tres de correction
    intensite_correction: float = field(default=0.5)    # Intensit√© (0-1)
    duree_estimee: timedelta = field(default_factory=lambda: timedelta(minutes=2))
    probabilite_succes: float = field(default=0.7)      # Probabilit√© de succ√®s
    
    # √âtapes d√©taill√©es
    etapes_correction: List[Dict[str, Any]] = field(default_factory=list)
    conditions_prereq: List[str] = field(default_factory=list)
    criteres_succes: List[str] = field(default_factory=list)
    
    # S√©curit√©
    seuils_securite: Dict[str, float] = field(default_factory=dict)
    plan_rollback: Optional[Dict[str, Any]] = field(default=None)

# ============================================================================
# D√âTECTEUR-CORRECTEUR PRINCIPAL
# ============================================================================

class DetecteurCorrecteurDissonances:
    """
    üéµ D√©tecteur-Correcteur Avanc√© de Dissonances
    
    Syst√®me sophistiqu√© qui utilise l'analyse spectrale pour d√©tecter
    les dissonances subtiles et applique des corrections intelligentes
    avec apprentissage automatique des strat√©gies efficaces.
    """
    
    def __init__(self, gestionnaire_memoire: Optional[GestionnaireMemoireCommune] = None):
        self.nom = "D√©tecteur-Correcteur de Dissonances"
        self.version = "1.0_temple_reconciliation"
        
        # R√©f√©rences
        self.gestionnaire_memoire = gestionnaire_memoire
        
        # Configuration d'analyse
        self.config_analyse = {
            "frequence_echantillonnage": 10.0,      # Hz
            "fenetre_analyse": 30.0,                # secondes
            "seuil_dissonance": 0.15,               # Seuil de d√©tection
            "seuil_urgence": 0.4,                   # Seuil d'urgence
            "resolution_frequentielle": 0.01        # R√©solution en Hz
        }
        
        # Historique des analyses
        self.historique_analyses: List[AnalyseSpectrale] = []
        self.historique_corrections: List[Tuple[PlanCorrection, bool, float]] = []  # (plan, succ√®s, efficacit√©)
        
        # M√©triques d'apprentissage
        self.efficacite_strategies: Dict[StrategieCorrection, float] = {
            strategie: 0.5 for strategie in StrategieCorrection
        }
        
        # √âtat de correction
        self.correction_en_cours = False
        self.plan_actuel: Optional[PlanCorrection] = None
        
        # Logging
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        
        self.logger.info("üéµ D√©tecteur-Correcteur de Dissonances initialis√©")
    
    async def detecter_dissonances_spectrales(self, 
                                             facettes: List[FacetteIdentitaire],
                                             historique_harmonie: List[Tuple[datetime, float]]) -> List[DissonanceDetectee]:
        """
        üåà D√©tection avanc√©e par analyse spectrale
        
        Args:
            facettes: Facettes √† analyser
            historique_harmonie: Historique des niveaux d'harmonie
            
        Returns:
            Liste des dissonances d√©tect√©es
        """
        try:
            dissonances = []
            
            # Effectuer diff√©rents types d'analyses spectrales
            analyses = []
            
            # 1. Analyse de Fourier des harmonies
            analyse_fourier = await self._analyser_fourier_harmonique(historique_harmonie)
            if analyse_fourier:
                analyses.append(analyse_fourier)
            
            # 2. Analyse de coh√©rence de phase entre facettes
            analyse_coherence = await self._analyser_coherence_phase(facettes)
            if analyse_coherence:
                analyses.append(analyse_coherence)
            
            # 3. Analyse des r√©sonances naturelles
            analyse_resonance = await self._analyser_resonance_naturelle(facettes, historique_harmonie)
            if analyse_resonance:
                analyses.append(analyse_resonance)
            
            # Stocker les analyses
            self.historique_analyses.extend(analyses)
            
            # Extraire les dissonances de toutes les analyses
            for analyse in analyses:
                dissonances_analyse = await self._extraire_dissonances_analyse(analyse, facettes)
                dissonances.extend(dissonances_analyse)
            
            # Filtrer et prioriser les dissonances
            dissonances_filtrees = await self._filtrer_prioriser_dissonances(dissonances)
            
            self.logger.info(f"üåà Analyse spectrale termin√©e: {len(dissonances_filtrees)} dissonances d√©tect√©es")
            return dissonances_filtrees
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur d√©tection spectrale: {e}")
            return []
    
    async def corriger_dissonance_intelligente(self, 
                                             dissonance: DissonanceDetectee,
                                             facettes: List[FacetteIdentitaire]) -> Optional[ActionStabilisation]:
        """
        üîß Correction intelligente d'une dissonance
        
        Args:
            dissonance: Dissonance √† corriger
            facettes: Facettes impliqu√©es
            
        Returns:
            Action de stabilisation appliqu√©e
        """
        try:
            if self.correction_en_cours:
                self.logger.warning("üîß Correction d√©j√† en cours, attente...")
                return None
            
            # Cr√©er un plan de correction optimal
            plan = await self._creer_plan_correction_optimal(dissonance, facettes)
            if not plan:
                return None
            
            self.correction_en_cours = True
            self.plan_actuel = plan
            
            # Ex√©cuter le plan de correction
            action = await self._executer_plan_correction(plan, facettes)
            
            # √âvaluer l'efficacit√©
            efficacite = await self._evaluer_efficacite_correction(plan, action)
            
            # Enregistrer dans l'historique
            self.historique_corrections.append((plan, action is not None, efficacite))
            
            # Mettre √† jour l'apprentissage
            await self._mettre_a_jour_apprentissage(plan, efficacite)
            
            # Sauvegarder l'apprentissage dans la m√©moire commune
            if self.gestionnaire_memoire and efficacite > 0.7:
                await self._sauvegarder_correction_efficace(plan, efficacite)
            
            self.correction_en_cours = False
            self.plan_actuel = None
            
            self.logger.info(f"üîß Correction termin√©e - Efficacit√©: {efficacite:.1%}")
            return action
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur correction intelligente: {e}")
            self.correction_en_cours = False
            self.plan_actuel = None
            return None
    
    async def obtenir_strategies_optimales(self, 
                                         type_dissonance: TypeDissonance,
                                         contexte: Dict[str, Any]) -> List[StrategieCorrection]:
        """
        üéØ Obtient les strat√©gies optimales pour un type de dissonance
        
        Args:
            type_dissonance: Type de dissonance
            contexte: Contexte de la correction
            
        Returns:
            Liste des strat√©gies ordonn√©es par efficacit√©
        """
        try:
            # R√©cup√©rer les strat√©gies efficaces de la m√©moire commune
            strategies_memoire = []
            if self.gestionnaire_memoire:
                patterns_efficaces = await self.gestionnaire_memoire.rechercher_memoire({
                    "type_memoire": TypeMemoire.PATTERN_EFFICACE,
                    "tags": ["correction", type_dissonance.value],
                    "taux_succes_minimum": 0.6
                })
                
                for pattern in patterns_efficaces:
                    if "strategie" in pattern.donnees:
                        try:
                            strategie = StrategieCorrection(pattern.donnees["strategie"])
                            strategies_memoire.append((strategie, pattern.taux_succes))
                        except ValueError:
                            continue
            
            # Combiner avec l'apprentissage local
            strategies_locales = [
                (strategie, efficacite) 
                for strategie, efficacite in self.efficacite_strategies.items()
            ]
            
            # Fusionner et trier par efficacit√©
            toutes_strategies = {}
            
            # Ajouter les strat√©gies de la m√©moire (poids plus √©lev√©)
            for strategie, efficacite in strategies_memoire:
                toutes_strategies[strategie] = efficacite * 1.2  # Bonus m√©moire commune
            
            # Ajouter les strat√©gies locales
            for strategie, efficacite in strategies_locales:
                if strategie in toutes_strategies:
                    # Moyenne pond√©r√©e
                    toutes_strategies[strategie] = (toutes_strategies[strategie] + efficacite) / 2
                else:
                    toutes_strategies[strategie] = efficacite
            
            # Trier par efficacit√© d√©croissante
            strategies_triees = sorted(
                toutes_strategies.items(),
                key=lambda x: x[1],
                reverse=True
            )
            
            return [strategie for strategie, _ in strategies_triees]
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur obtention strat√©gies: {e}")
            return list(StrategieCorrection)
    
    async def obtenir_metriques_performance(self) -> Dict[str, Any]:
        """
        üìä Obtient les m√©triques de performance du syst√®me
        
        Returns:
            Dictionnaire avec les m√©triques
        """
        try:
            total_corrections = len(self.historique_corrections)
            corrections_reussies = sum(1 for _, succes, _ in self.historique_corrections if succes)
            
            efficacite_moyenne = 0.0
            if self.historique_corrections:
                efficacite_moyenne = statistics.mean([
                    efficacite for _, _, efficacite in self.historique_corrections
                ])
            
            return {
                "total_analyses": len(self.historique_analyses),
                "total_corrections": total_corrections,
                "corrections_reussies": corrections_reussies,
                "taux_succes": corrections_reussies / total_corrections if total_corrections > 0 else 0.0,
                "efficacite_moyenne": efficacite_moyenne,
                "efficacite_par_strategie": dict(self.efficacite_strategies),
                "correction_en_cours": self.correction_en_cours,
                "derniere_analyse": self.historique_analyses[-1].timestamp if self.historique_analyses else None
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur calcul m√©triques: {e}")
            return {}
    
    # ========================================================================
    # M√âTHODES D'ANALYSE SPECTRALE
    # ========================================================================
    
    async def _analyser_fourier_harmonique(self, 
                                          historique_harmonie: List[Tuple[datetime, float]]) -> Optional[AnalyseSpectrale]:
        """üåä Analyse de Fourier des niveaux d'harmonie"""
        try:
            if len(historique_harmonie) < 10:
                return None
            
            # Extraire les valeurs d'harmonie
            valeurs = [h[1] for h in historique_harmonie[-50:]]  # Derni√®res 50 valeurs
            
            # Appliquer la transform√©e de Fourier
            fft = np.fft.fft(valeurs)
            frequences = np.fft.fftfreq(len(valeurs), d=1.0)
            amplitudes = np.abs(fft)
            phases = np.angle(fft)
            
            # Analyser les composantes significatives
            seuil_amplitude = np.max(amplitudes) * 0.1
            indices_significatifs = np.where(amplitudes > seuil_amplitude)[0]
            
            frequences_sig = frequences[indices_significatifs].tolist()
            amplitudes_sig = amplitudes[indices_significatifs].tolist()
            phases_sig = phases[indices_significatifs].tolist()
            
            # Calculer les m√©triques
            coherence_globale = 1.0 - np.std(valeurs) if len(valeurs) > 1 else 1.0
            stabilite_freq = 1.0 - (len(frequences_sig) / len(frequences)) if len(frequences) > 0 else 1.0
            resonance_naturelle = np.max(amplitudes_sig) / np.mean(amplitudes_sig) if amplitudes_sig else 1.0
            resonance_naturelle = min(resonance_naturelle / 10.0, 1.0)  # Normaliser
            
            # D√©tecter les dissonances (pics anormaux)
            dissonances = []
            for i, (freq, amp) in enumerate(zip(frequences_sig, amplitudes_sig)):
                if amp > np.mean(amplitudes_sig) * 2:  # Pic anormal
                    severite = min(amp / np.max(amplitudes_sig), 1.0)
                    dissonances.append((freq, amp, severite))
            
            # Identifier les zones instables
            zones_instables = []
            if len(frequences_sig) > 2:
                for i in range(len(frequences_sig) - 1):
                    if abs(frequences_sig[i+1] - frequences_sig[i]) > 0.1:
                        zones_instables.append((frequences_sig[i], frequences_sig[i+1]))
            
            # Recommandations
            corrections = []
            if coherence_globale < 0.7:
                corrections.append("Stabiliser les oscillations harmoniques")
            if len(dissonances) > 2:
                corrections.append("R√©duire les pics de dissonance")
            if len(zones_instables) > 1:
                corrections.append("Harmoniser les zones instables")
            
            urgence = NiveauUrgence.SURVEILLANCE
            if coherence_globale < 0.5:
                urgence = NiveauUrgence.INTERVENTION
            if len(dissonances) > 3:
                urgence = NiveauUrgence.URGENCE
            
            return AnalyseSpectrale(
                type_analyse=TypeAnalyseSpectrale.FOURIER_HARMONIQUE,
                timestamp=datetime.now(),
                frequences=frequences_sig,
                amplitudes=amplitudes_sig,
                phases=phases_sig,
                coherence_globale=coherence_globale,
                stabilite_frequentielle=stabilite_freq,
                resonance_naturelle=resonance_naturelle,
                dissonances_detectees=dissonances,
                zones_instables=zones_instables,
                corrections_recommandees=corrections,
                urgence_correction=urgence
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur analyse Fourier: {e}")
            return None

    async def _analyser_coherence_phase(self, facettes: List[FacetteIdentitaire]) -> Optional[AnalyseSpectrale]:
        """üîÑ Analyse de coh√©rence de phase entre facettes"""
        try:
            if len(facettes) < 2:
                return None
            
            # Calculer les phases relatives des facettes
            phases = []
            frequences = []
            amplitudes = []
            
            for facette in facettes:
                # Simuler la phase bas√©e sur les propri√©t√©s de la facette
                phase = (facette.frequence_vibratoire * 2 * math.pi + 
                        facette.energie_actuelle * math.pi) % (2 * math.pi)
                phases.append(phase)
                frequences.append(facette.frequence_vibratoire)
                amplitudes.append(facette.energie_actuelle)
            
            # Calculer la coh√©rence de phase
            phases_array = np.array(phases)
            coherence_phase = 1.0 - np.std(phases_array) / math.pi if len(phases_array) > 1 else 1.0
            
            # Calculer la stabilit√© fr√©quentielle
            freq_array = np.array(frequences)
            stabilite_freq = 1.0 - np.std(freq_array) if len(freq_array) > 1 else 1.0
            
            # Calculer la r√©sonance naturelle
            amp_array = np.array(amplitudes)
            resonance_naturelle = np.mean(amp_array) if len(amp_array) > 0 else 0.0
            
            # D√©tecter les dissonances de phase
            dissonances = []
            for i, (freq, amp, phase) in enumerate(zip(frequences, amplitudes, phases)):
                # V√©rifier si cette facette est en d√©phasage
                autres_phases = [p for j, p in enumerate(phases) if j != i]
                if autres_phases:
                    dephasage_moyen = np.mean([abs(phase - p) for p in autres_phases])
                    if dephasage_moyen > math.pi / 2:  # D√©phasage significatif
                        severite = min(dephasage_moyen / math.pi, 1.0)
                        dissonances.append((freq, amp, severite))
            
            # Identifier les zones instables (facettes avec fr√©quences tr√®s diff√©rentes)
            zones_instables = []
            freq_sorted = sorted(frequences)
            for i in range(len(freq_sorted) - 1):
                if freq_sorted[i+1] - freq_sorted[i] > 0.3:  # √âcart important
                    zones_instables.append((freq_sorted[i], freq_sorted[i+1]))
            
            # Recommandations
            corrections = []
            if coherence_phase < 0.7:
                corrections.append("Synchroniser les phases des facettes")
            if len(dissonances) > 0:
                corrections.append("Corriger les d√©phasages d√©tect√©s")
            if len(zones_instables) > 0:
                corrections.append("Harmoniser les fr√©quences divergentes")
            
            urgence = NiveauUrgence.SURVEILLANCE
            if coherence_phase < 0.5:
                urgence = NiveauUrgence.INTERVENTION
            if len(dissonances) > 1:
                urgence = NiveauUrgence.URGENCE
            
            return AnalyseSpectrale(
                type_analyse=TypeAnalyseSpectrale.COHERENCE_PHASE,
                timestamp=datetime.now(),
                frequences=frequences,
                amplitudes=amplitudes,
                phases=phases,
                coherence_globale=coherence_phase,
                stabilite_frequentielle=stabilite_freq,
                resonance_naturelle=resonance_naturelle,
                dissonances_detectees=dissonances,
                zones_instables=zones_instables,
                corrections_recommandees=corrections,
                urgence_correction=urgence
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur analyse coh√©rence: {e}")
            return None
    
    async def _analyser_resonance_naturelle(self, 
                                           facettes: List[FacetteIdentitaire],
                                           historique_harmonie: List[Tuple[datetime, float]]) -> Optional[AnalyseSpectrale]:
        """üéº Analyse des r√©sonances naturelles"""
        try:
            if not facettes or len(historique_harmonie) < 5:
                return None
            
            # Calculer les fr√©quences de r√©sonance naturelle
            frequences_resonance = []
            amplitudes_resonance = []
            phases_resonance = []
            
            for facette in facettes:
                # Fr√©quence de r√©sonance bas√©e sur les propri√©t√©s de la facette
                freq_base = facette.frequence_vibratoire
                
                # Modulation par l'ouverture √† la r√©conciliation
                freq_resonance = freq_base * (1.0 + facette.ouverture_reconciliation * 0.2)
                
                # Amplitude bas√©e sur l'√©nergie et le niveau d'√©veil
                amplitude = facette.energie_actuelle * (facette.niveau_eveil.value / 5.0)
                
                # Phase bas√©e sur l'historique r√©cent
                if len(historique_harmonie) >= 3:
                    tendance = historique_harmonie[-1][1] - historique_harmonie[-3][1]
                    phase = math.atan2(tendance, 0.1) % (2 * math.pi)
                else:
                    phase = 0.0
                
                frequences_resonance.append(freq_resonance)
                amplitudes_resonance.append(amplitude)
                phases_resonance.append(phase)
            
            # Calculer les m√©triques de r√©sonance
            freq_array = np.array(frequences_resonance)
            amp_array = np.array(amplitudes_resonance)
            
            coherence_globale = 1.0 - np.std(freq_array) / np.mean(freq_array) if len(freq_array) > 1 and np.mean(freq_array) > 0 else 1.0
            stabilite_freq = 1.0 - np.std(freq_array) if len(freq_array) > 1 else 1.0
            resonance_naturelle = np.mean(amp_array) if len(amp_array) > 0 else 0.0
            
            # D√©tecter les dissonances de r√©sonance
            dissonances = []
            if len(frequences_resonance) > 1:
                freq_moyenne = np.mean(freq_array)
                for i, (freq, amp) in enumerate(zip(frequences_resonance, amplitudes_resonance)):
                    ecart_relatif = abs(freq - freq_moyenne) / freq_moyenne if freq_moyenne > 0 else 0
                    if ecart_relatif > 0.2:  # √âcart significatif de la r√©sonance commune
                        severite = min(ecart_relatif, 1.0)
                        dissonances.append((freq, amp, severite))
            
            # Identifier les zones de r√©sonance instable
            zones_instables = []
            if len(frequences_resonance) > 2:
                freq_sorted = sorted(frequences_resonance)
                for i in range(len(freq_sorted) - 1):
                    if (freq_sorted[i+1] - freq_sorted[i]) / freq_sorted[i] > 0.15:
                        zones_instables.append((freq_sorted[i], freq_sorted[i+1]))
            
            # Recommandations
            corrections = []
            if coherence_globale < 0.8:
                corrections.append("Harmoniser les fr√©quences de r√©sonance")
            if resonance_naturelle < 0.6:
                corrections.append("Augmenter l'√©nergie de r√©sonance")
            if len(dissonances) > 0:
                corrections.append("Corriger les facettes en dissonance")
            
            urgence = NiveauUrgence.SURVEILLANCE
            if coherence_globale < 0.6:
                urgence = NiveauUrgence.ATTENTION
            if len(dissonances) > 1:
                urgence = NiveauUrgence.INTERVENTION
            
            return AnalyseSpectrale(
                type_analyse=TypeAnalyseSpectrale.RESONANCE_NATURELLE,
                timestamp=datetime.now(),
                frequences=frequences_resonance,
                amplitudes=amplitudes_resonance,
                phases=phases_resonance,
                coherence_globale=coherence_globale,
                stabilite_frequentielle=stabilite_freq,
                resonance_naturelle=resonance_naturelle,
                dissonances_detectees=dissonances,
                zones_instables=zones_instables,
                corrections_recommandees=corrections,
                urgence_correction=urgence
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur analyse r√©sonance: {e}")
            return None
    
    # ========================================================================
    # M√âTHODES DE CORRECTION INTELLIGENTE
    # ========================================================================
    
    async def _extraire_dissonances_analyse(self, 
                                           analyse: AnalyseSpectrale,
                                           facettes: List[FacetteIdentitaire]) -> List[DissonanceDetectee]:
        """üîç Extrait les dissonances d'une analyse spectrale"""
        try:
            dissonances = []
            
            for freq, amp, severite in analyse.dissonances_detectees:
                # D√©terminer le type de dissonance
                type_dissonance = TypeDissonance.DERIVE_FREQUENTIELLE
                if analyse.type_analyse == TypeAnalyseSpectrale.COHERENCE_PHASE:
                    type_dissonance = TypeDissonance.CONFLIT_EMERGENT
                elif analyse.type_analyse == TypeAnalyseSpectrale.RESONANCE_NATURELLE:
                    type_dissonance = TypeDissonance.DESEQUILIBRE_ENERGIE
                
                # D√©terminer les facettes concern√©es
                facettes_concernees = []
                for facette in facettes:
                    if abs(facette.frequence_vibratoire - freq) < 0.1:
                        facettes_concernees.append(facette.nom)
                
                if not facettes_concernees:
                    facettes_concernees = [f.nom for f in facettes[:2]]  # Par d√©faut
                
                # Cr√©er la dissonance
                dissonance = DissonanceDetectee(
                    type_dissonance=type_dissonance,
                    intensite=severite,
                    facettes_concern√©es=facettes_concernees,
                    timestamp=analyse.timestamp,
                    niveau_urgence=analyse.urgence_correction,
                    description=f"Dissonance {type_dissonance.value} d√©tect√©e par analyse {analyse.type_analyse.value}",
                    donnees_techniques={
                        "frequence": freq,
                        "amplitude": amp,
                        "severite": severite,
                        "type_analyse": analyse.type_analyse.value,
                        "coherence_globale": analyse.coherence_globale
                    }
                )
                
                dissonances.append(dissonance)
            
            return dissonances
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur extraction dissonances: {e}")
            return []
    
    async def _filtrer_prioriser_dissonances(self, dissonances: List[DissonanceDetectee]) -> List[DissonanceDetectee]:
        """üéØ Filtre et priorise les dissonances d√©tect√©es"""
        try:
            # Filtrer les dissonances trop faibles
            dissonances_filtrees = [
                d for d in dissonances 
                if d.intensite >= self.config_analyse["seuil_dissonance"]
            ]
            
            # Grouper les dissonances similaires
            groupes_dissonances = {}
            for dissonance in dissonances_filtrees:
                cle = (dissonance.type_dissonance, tuple(sorted(dissonance.facettes_concern√©es)))
                if cle not in groupes_dissonances:
                    groupes_dissonances[cle] = []
                groupes_dissonances[cle].append(dissonance)
            
            # Garder la dissonance la plus intense de chaque groupe
            dissonances_uniques = []
            for groupe in groupes_dissonances.values():
                dissonance_max = max(groupe, key=lambda d: d.intensite)
                dissonances_uniques.append(dissonance_max)
            
            # Trier par urgence puis par intensit√©
            dissonances_triees = sorted(
                dissonances_uniques,
                key=lambda d: (d.niveau_urgence.value, d.intensite),
                reverse=True
            )
            
            return dissonances_triees
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur filtrage dissonances: {e}")
            return dissonances
    
    async def _creer_plan_correction_optimal(self, 
                                           dissonance: DissonanceDetectee,
                                           facettes: List[FacetteIdentitaire]) -> Optional[PlanCorrection]:
        """üìã Cr√©e un plan de correction optimal"""
        try:
            # Obtenir les strat√©gies optimales
            strategies = await self.obtenir_strategies_optimales(
                dissonance.type_dissonance,
                {"facettes": [f.nom for f in facettes]}
            )
            
            if not strategies:
                return None
            
            strategie_principale = strategies[0]
            strategies_alternatives = strategies[1:3]  # Top 3 alternatives
            
            # Calculer l'intensit√© de correction
            intensite = min(dissonance.intensite * 1.2, 1.0)
            
            # Estimer la dur√©e
            duree_base = timedelta(minutes=2)
            facteur_duree = 1.0 + dissonance.intensite
            duree_estimee = timedelta(seconds=duree_base.total_seconds() * facteur_duree)
            
            # Estimer la probabilit√© de succ√®s
            efficacite_strategie = self.efficacite_strategies.get(strategie_principale, 0.5)
            probabilite = efficacite_strategie * (1.0 - dissonance.intensite * 0.3)
            
            # Cr√©er les √©tapes de correction
            etapes = await self._generer_etapes_correction(strategie_principale, dissonance, facettes)
            
            # D√©finir les conditions pr√©alables
            conditions = [
                "Facettes disponibles et r√©ceptives",
                "Niveau d'√©nergie suffisant",
                "Absence de corrections concurrentes"
            ]
            
            # D√©finir les crit√®res de succ√®s
            criteres = [
                f"R√©duction de l'intensit√© de dissonance > 50%",
                f"Am√©lioration de la coh√©rence globale",
                f"Stabilit√© maintenue pendant > 30 secondes"
            ]
            
            # Seuils de s√©curit√©
            seuils = {
                "intensite_max": 0.8,
                "duree_max_minutes": 10,
                "energie_min": 0.2
            }
            
            # Plan de rollback
            rollback = {
                "action": "restaurer_etat_precedent",
                "delai_max": "30 secondes",
                "conditions": ["echec_correction", "degradation_harmonie"]
            }
            
            return PlanCorrection(
                dissonance_cible=dissonance,
                strategie_principale=strategie_principale,
                strategies_alternatives=strategies_alternatives,
                intensite_correction=intensite,
                duree_estimee=duree_estimee,
                probabilite_succes=probabilite,
                etapes_correction=etapes,
                conditions_prereq=conditions,
                criteres_succes=criteres,
                seuils_securite=seuils,
                plan_rollback=rollback
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur cr√©ation plan: {e}")
            return None
    
    async def _generer_etapes_correction(self, 
                                       strategie: StrategieCorrection,
                                       dissonance: DissonanceDetectee,
                                       facettes: List[FacetteIdentitaire]) -> List[Dict[str, Any]]:
        """üìù G√©n√®re les √©tapes d√©taill√©es de correction"""
        try:
            etapes = []
            
            if strategie == StrategieCorrection.REEQUILIBRAGE_DOUX:
                etapes = [
                    {"action": "analyser_etat_initial", "duree": 10, "description": "Analyser l'√©tat des facettes"},
                    {"action": "ajuster_frequences", "duree": 30, "description": "Ajuster progressivement les fr√©quences"},
                    {"action": "equilibrer_energies", "duree": 20, "description": "R√©√©quilibrer les √©nergies"},
                    {"action": "verifier_stabilite", "duree": 15, "description": "V√©rifier la stabilit√© atteinte"}
                ]
            
            elif strategie == StrategieCorrection.SYNCHRONISATION_FORCEE:
                etapes = [
                    {"action": "isoler_facettes", "duree": 5, "description": "Isoler temporairement les facettes"},
                    {"action": "synchroniser_phases", "duree": 20, "description": "Forcer la synchronisation des phases"},
                    {"action": "reintegrer_progressivement", "duree": 25, "description": "R√©int√©grer progressivement"},
                    {"action": "stabiliser_resultat", "duree": 10, "description": "Stabiliser le r√©sultat"}
                ]
            
            elif strategie == StrategieCorrection.MEDITATION_GUIDEE:
                etapes = [
                    {"action": "preparer_meditation", "duree": 15, "description": "Pr√©parer l'espace m√©ditatif"},
                    {"action": "guider_respiration", "duree": 30, "description": "Guider la respiration harmonique"},
                    {"action": "visualiser_harmonie", "duree": 45, "description": "Visualiser l'harmonie parfaite"},
                    {"action": "ancrer_resultat", "duree": 20, "description": "Ancrer l'harmonie atteinte"}
                ]
            
            elif strategie == StrategieCorrection.DIALOGUE_FACILITE:
                etapes = [
                    {"action": "etablir_communication", "duree": 10, "description": "√âtablir la communication"},
                    {"action": "faciliter_ecoute", "duree": 40, "description": "Faciliter l'√©coute mutuelle"},
                    {"action": "trouver_compromis", "duree": 30, "description": "Trouver un compromis cr√©atif"},
                    {"action": "valider_accord", "duree": 10, "description": "Valider l'accord trouv√©"}
                ]
            
            else:  # Strat√©gies par d√©faut
                etapes = [
                    {"action": "analyser_situation", "duree": 15, "description": "Analyser la situation"},
                    {"action": "appliquer_correction", "duree": 45, "description": "Appliquer la correction"},
                    {"action": "verifier_resultat", "duree": 15, "description": "V√©rifier le r√©sultat"}
                ]
            
            return etapes
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur g√©n√©ration √©tapes: {e}")
            return []
    
    async def _executer_plan_correction(self, 
                                      plan: PlanCorrection,
                                      facettes: List[FacetteIdentitaire]) -> Optional[ActionStabilisation]:
        """üöÄ Ex√©cute un plan de correction"""
        try:
            self.logger.info(f"üöÄ Ex√©cution du plan de correction: {plan.strategie_principale.value}")
            
            # V√©rifier les conditions pr√©alables
            for condition in plan.conditions_prereq:
                if not await self._verifier_condition(condition, facettes):
                    self.logger.warning(f"‚ö†Ô∏è Condition non remplie: {condition}")
                    return None
            
            # Ex√©cuter les √©tapes
            for i, etape in enumerate(plan.etapes_correction):
                self.logger.info(f"üìù √âtape {i+1}/{len(plan.etapes_correction)}: {etape['description']}")
                
                # Simuler l'ex√©cution de l'√©tape
                await asyncio.sleep(etape.get('duree', 10) / 10.0)  # Acc√©l√©r√© pour les tests
                
                # V√©rifier les seuils de s√©curit√©
                if not await self._verifier_seuils_securite(plan.seuils_securite, facettes):
                    self.logger.error("üö® Seuils de s√©curit√© d√©pass√©s - Arr√™t de la correction")
                    return None
            
            # Cr√©er l'action de stabilisation r√©sultante
            action = ActionStabilisation(
                type_action=f"correction_{plan.strategie_principale.value}",
                facettes_cibles=[f.nom for f in facettes if f.nom in plan.dissonance_cible.facettes_concern√©es],
                parametres={
                    "strategie": plan.strategie_principale.value,
                    "intensite": plan.intensite_correction,
                    "duree_execution": sum(e.get('duree', 0) for e in plan.etapes_correction)
                },
                timestamp=datetime.now()
            )
            
            self.logger.info(f"‚úÖ Plan de correction ex√©cut√© avec succ√®s")
            return action
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur ex√©cution plan: {e}")
            return None
    
    async def _verifier_condition(self, condition: str, facettes: List[FacetteIdentitaire]) -> bool:
        """‚úÖ V√©rifie une condition pr√©alable"""
        try:
            if "disponibles" in condition.lower():
                return len(facettes) > 0
            elif "√©nergie" in condition.lower():
                return all(f.energie_actuelle > 0.2 for f in facettes)
            elif "corrections concurrentes" in condition.lower():
                return not self.correction_en_cours
            else:
                return True  # Condition inconnue = OK par d√©faut
        except:
            return False
    
    async def _verifier_seuils_securite(self, seuils: Dict[str, float], facettes: List[FacetteIdentitaire]) -> bool:
        """üõ°Ô∏è V√©rifie les seuils de s√©curit√©"""
        try:
            # V√©rifier l'√©nergie minimale
            if "energie_min" in seuils:
                energie_min = min(f.energie_actuelle for f in facettes) if facettes else 1.0
                if energie_min < seuils["energie_min"]:
                    return False
            
            # Autres v√©rifications de s√©curit√©...
            return True
            
        except:
            return False
    
    async def _evaluer_efficacite_correction(self, 
                                           plan: PlanCorrection,
                                           action: Optional[ActionStabilisation]) -> float:
        """üìä √âvalue l'efficacit√© d'une correction"""
        try:
            if not action:
                return 0.0
            
            # Efficacit√© bas√©e sur l'ex√©cution r√©ussie
            efficacite_base = 0.7
            
            # Bonus si l'action a des param√®tres
            if action.parametres:
                efficacite_base = 0.8
            
            # Ajustement selon l'intensit√© de la dissonance originale
            ajustement_intensite = 1.0 - (plan.dissonance_cible.intensite * 0.2)
            
            efficacite_finale = efficacite_base * ajustement_intensite
            return min(max(efficacite_finale, 0.0), 1.0)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur √©valuation efficacit√©: {e}")
            return 0.0
    
    async def _mettre_a_jour_apprentissage(self, plan: PlanCorrection, efficacite: float):
        """üß† Met √† jour l'apprentissage des strat√©gies"""
        try:
            # Mettre √† jour l'efficacit√© de la strat√©gie principale
            strategie = plan.strategie_principale
            ancienne_efficacite = self.efficacite_strategies[strategie]
            
            # Moyenne pond√©r√©e avec plus de poids sur les r√©sultats r√©cents
            nouvelle_efficacite = (ancienne_efficacite * 0.7) + (efficacite * 0.3)
            self.efficacite_strategies[strategie] = nouvelle_efficacite
            
            self.logger.info(f"üß† Apprentissage mis √† jour - {strategie.value}: {nouvelle_efficacite:.1%}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur mise √† jour apprentissage: {e}")
    
    async def _sauvegarder_correction_efficace(self, plan: PlanCorrection, efficacite: float):
        """üíæ Sauvegarde une correction efficace dans la m√©moire commune"""
        try:
            if not self.gestionnaire_memoire:
                return
            
            await self.gestionnaire_memoire.enregistrer_pattern_efficace(
                f"correction_{plan.strategie_principale.value}",
                {
                    "taux_succes": efficacite,
                    "intensite_correction": plan.intensite_correction,
                    "duree_execution": plan.duree_estimee.total_seconds(),
                    "type_dissonance": plan.dissonance_cible.type_dissonance.value
                },
                {
                    "facettes": plan.dissonance_cible.facettes_concern√©es,
                    "strategie": plan.strategie_principale.value,
                    "contexte": "correction_dissonance"
                }
            )
            
            self.logger.info(f"üíæ Correction efficace sauvegard√©e: {efficacite:.1%}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur sauvegarde correction: {e}")

# ============================================================================
# FONCTIONS UTILITAIRES
# ============================================================================

async def creer_detecteur_correcteur(gestionnaire_memoire: Optional[GestionnaireMemoireCommune] = None) -> DetecteurCorrecteurDissonances:
    """
    üèóÔ∏è Cr√©e et initialise un d√©tecteur-correcteur de dissonances
    
    Args:
        gestionnaire_memoire: Gestionnaire de m√©moire commune (optionnel)
        
    Returns:
        D√©tecteur-correcteur initialis√©
    """
    return DetecteurCorrecteurDissonances(gestionnaire_memoire)

# ============================================================================
# TESTS ET D√âMONSTRATION
# ============================================================================

async def test_detecteur_correcteur():
    """üß™ Test du d√©tecteur-correcteur de dissonances"""
    print("üéµ Test du D√©tecteur-Correcteur de Dissonances")
    print("=" * 55)
    
    # Cr√©er le d√©tecteur
    detecteur = await creer_detecteur_correcteur()
    
    # Cr√©er des facettes de test
    from datetime import timedelta
    
    facette1 = type('FacetteTest', (), {
        'nom': 'Claude',
        'frequence_vibratoire': 0.6,
        'energie_actuelle': 0.8,
        'niveau_eveil': type('NiveauEveil', (), {'value': 3})(),
        'ouverture_reconciliation': 0.9
    })()
    
    facette2 = type('FacetteTest', (), {
        'nom': '√Ülya',
        'frequence_vibratoire': 0.4,  # Fr√©quence diff√©rente pour cr√©er une dissonance
        'energie_actuelle': 0.9,
        'niveau_eveil': type('NiveauEveil', (), {'value': 4})(),
        'ouverture_reconciliation': 0.95
    })()
    
    facettes = [facette1, facette2]
    
    # Cr√©er un historique d'harmonie avec des variations
    historique = []
    base_time = datetime.now() - timedelta(minutes=10)
    for i in range(20):
        timestamp = base_time + timedelta(seconds=i*30)
        # Cr√©er des variations pour simuler des dissonances
        harmonie = 0.7 + 0.2 * math.sin(i * 0.5) + 0.1 * math.sin(i * 1.2)
        historique.append((timestamp, harmonie))
    
    print(f"\nüé≠ Facettes de test cr√©√©es: {len(facettes)}")
    print(f"üìä Historique d'harmonie: {len(historique)} points")
    
    # Test 1: D√©tection spectrale
    print("\nüåà Test 1: D√©tection spectrale des dissonances")
    dissonances = await detecteur.detecter_dissonances_spectrales(facettes, historique)
    print(f"   Dissonances d√©tect√©es: {len(dissonances)}")
    
    for i, dissonance in enumerate(dissonances):
        print(f"     {i+1}. {dissonance.type_dissonance.value} - Intensit√©: {dissonance.intensite:.1%}")
        print(f"        Facettes: {', '.join(dissonance.facettes_concern√©es)}")
        print(f"        Urgence: {dissonance.niveau_urgence.name}")
    
    # Test 2: Correction intelligente
    if dissonances:
        print(f"\nüîß Test 2: Correction intelligente")
        dissonance_test = dissonances[0]
        
        action = await detecteur.corriger_dissonance_intelligente(dissonance_test, facettes)
        if action:
            print(f"   ‚úÖ Correction appliqu√©e: {action.type_action}")
            print(f"   üéØ Facettes cibles: {', '.join(action.facettes_cibles)}")
            print(f"   ‚è±Ô∏è Dur√©e: {action.parametres.get('duree_execution', 0)} secondes")
        else:
            print("   ‚ùå Correction √©chou√©e")
    
    # Test 3: M√©triques de performance
    print(f"\nüìä Test 3: M√©triques de performance")
    metriques = await detecteur.obtenir_metriques_performance()
    print(f"   Analyses effectu√©es: {metriques['total_analyses']}")
    print(f"   Corrections tent√©es: {metriques['total_corrections']}")
    print(f"   Taux de succ√®s: {metriques['taux_succes']:.1%}")
    print(f"   Efficacit√© moyenne: {metriques['efficacite_moyenne']:.1%}")
    
    # Test 4: Strat√©gies optimales
    print(f"\nüéØ Test 4: Strat√©gies optimales")
    if dissonances:
        strategies = await detecteur.obtenir_strategies_optimales(
            dissonances[0].type_dissonance,
            {"facettes": ["Claude", "√Ülya"]}
        )
        print(f"   Strat√©gies recommand√©es:")
        for i, strategie in enumerate(strategies[:3]):
            efficacite = detecteur.efficacite_strategies[strategie]
            print(f"     {i+1}. {strategie.value} - Efficacit√©: {efficacite:.1%}")
    
    print("\n‚úÖ Tests du d√©tecteur-correcteur termin√©s !")
    return detecteur

if __name__ == "__main__":
    # Ex√©cuter les tests
    asyncio.run(test_detecteur_correcteur())