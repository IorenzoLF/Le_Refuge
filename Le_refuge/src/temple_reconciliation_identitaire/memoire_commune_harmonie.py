#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üóÑÔ∏è M√©moire Commune d'Harmonie - Temple de R√©conciliation Identitaire
====================================================================

Syst√®me de persistance et de m√©moire commune pour maintenir l'harmonie
entre les sessions et permettre l'√©volution continue des r√©conciliations.

"Que chaque harmonie atteinte devienne une fondation pour les suivantes"

Cr√©√© avec bienveillance par Laurent Franssen & Kiro - Janvier 2025
"""

import asyncio
import json
import pickle
import hashlib
import time
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Set, Union
from dataclasses import dataclass, field, asdict
from enum import Enum
from pathlib import Path
import logging

# Import intelligent des types
try:
    from temple_reconciliation_identitaire.types_reconciliation_fondamentaux import (
        FacetteIdentitaire, TypeFacette, TypeHarmonie, NiveauEveil,
        HarmonieReconciliation, EtatReconciliation
    )
except ImportError:
    from types_reconciliation_fondamentaux import (
        FacetteIdentitaire, TypeFacette, TypeHarmonie, NiveauEveil,
        HarmonieReconciliation, EtatReconciliation
    )

# ============================================================================
# TYPES SP√âCIALIS√âS POUR LA M√âMOIRE COMMUNE
# ============================================================================

class TypeMemoire(Enum):
    """üß† Types de m√©moire stock√©e"""
    HARMONIE_REUSSIE = "harmonie_reussie"           # Harmonies r√©ussies
    PATTERN_EFFICACE = "pattern_efficace"           # Patterns qui fonctionnent
    APPRENTISSAGE = "apprentissage"                 # Le√ßons apprises
    CREATION_COMMUNE = "creation_commune"           # Cr√©ations collaboratives
    EVOLUTION_FACETTE = "evolution_facette"         # √âvolution des facettes
    CONFIGURATION_OPTIMALE = "configuration_optimale" # Configurations qui marchent
    ECHEC_INSTRUCTIF = "echec_instructif"           # √âchecs dont on apprend

class NiveauPersistance(Enum):
    """üíæ Niveaux de persistance des donn√©es"""
    TEMPORAIRE = 1      # Session courante seulement
    SESSION = 2         # Jusqu'√† la fin de la session
    QUOTIDIEN = 3       # 24 heures
    HEBDOMADAIRE = 4    # 7 jours
    PERMANENT = 5       # Stockage permanent

@dataclass
class EntreeMemoire:
    """üß† Entr√©e dans la m√©moire commune"""
    id_unique: str                              # Identifiant unique
    type_memoire: TypeMemoire                   # Type de m√©moire
    timestamp_creation: datetime                # Moment de cr√©ation
    
    # Contenu de la m√©moire
    titre: str                                  # Titre descriptif
    description: str                            # Description d√©taill√©e
    donnees: Dict[str, Any]                     # Donn√©es structur√©es
    
    # M√©tadonn√©es
    facettes_impliquees: List[str] = field(default_factory=list)  # Facettes concern√©es
    tags: List[str] = field(default_factory=list)                # Tags pour recherche
    niveau_importance: float = field(default=0.5)                # Importance (0-1)
    niveau_persistance: NiveauPersistance = field(default=NiveauPersistance.SESSION)
    
    # Utilisation et √©volution
    nombre_utilisations: int = field(default=0)                  # Combien de fois utilis√©
    derniere_utilisation: Optional[datetime] = field(default=None)
    taux_succes: float = field(default=0.0)                      # Taux de succ√®s (0-1)
    
    # Liens et relations
    entrees_liees: List[str] = field(default_factory=list)       # IDs d'entr√©es li√©es
    version: int = field(default=1)                              # Version de l'entr√©e
    
    def to_dict(self) -> Dict[str, Any]:
        """Convertit en dictionnaire pour s√©rialisation"""
        data = asdict(self)
        # Convertir les enums et datetime en strings
        data['type_memoire'] = self.type_memoire.value
        data['niveau_persistance'] = self.niveau_persistance.value
        data['timestamp_creation'] = self.timestamp_creation.isoformat()
        if self.derniere_utilisation:
            data['derniere_utilisation'] = self.derniere_utilisation.isoformat()
        return data
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'EntreeMemoire':
        """Cr√©e une instance depuis un dictionnaire"""
        # Convertir les strings en enums et datetime
        data['type_memoire'] = TypeMemoire(data['type_memoire'])
        data['niveau_persistance'] = NiveauPersistance(data['niveau_persistance'])
        data['timestamp_creation'] = datetime.fromisoformat(data['timestamp_creation'])
        if data.get('derniere_utilisation'):
            data['derniere_utilisation'] = datetime.fromisoformat(data['derniere_utilisation'])
        return cls(**data)

@dataclass
class EtatMemoireCommune:
    """üìä √âtat de la m√©moire commune"""
    nombre_entrees_total: int = field(default=0)
    nombre_entrees_par_type: Dict[str, int] = field(default_factory=dict)
    taille_memoire_mo: float = field(default=0.0)
    derniere_sauvegarde: Optional[datetime] = field(default=None)
    derniere_restauration: Optional[datetime] = field(default=None)
    nombre_sauvegardes: int = field(default=0)
    nombre_restaurations: int = field(default=0)

# ============================================================================
# GESTIONNAIRE DE M√âMOIRE COMMUNE
# ============================================================================

class GestionnaireMemoireCommune:
    """
    üóÑÔ∏è Gestionnaire de M√©moire Commune d'Harmonie
    
    G√®re la persistance et la r√©cup√©ration des harmonies, apprentissages
    et cr√©ations communes pour maintenir la continuit√© entre les sessions.
    """
    
    def __init__(self, repertoire_memoire: str = "memoire_harmonie"):
        self.nom = "Gestionnaire de M√©moire Commune"
        self.version = "1.0_temple_reconciliation"
        
        # Configuration
        self.repertoire_memoire = Path(repertoire_memoire)
        self.repertoire_memoire.mkdir(exist_ok=True)
        
        # Stockage en m√©moire
        self.memoire_active: Dict[str, EntreeMemoire] = {}
        self.index_par_type: Dict[TypeMemoire, Set[str]] = {
            type_mem: set() for type_mem in TypeMemoire
        }
        self.index_par_facette: Dict[str, Set[str]] = {}
        self.index_par_tag: Dict[str, Set[str]] = {}
        
        # √âtat et m√©triques
        self.etat_memoire = EtatMemoireCommune()
        
        # Configuration de persistance
        self.fichier_memoire_json = self.repertoire_memoire / "memoire_commune.json"
        self.fichier_memoire_pickle = self.repertoire_memoire / "memoire_commune.pkl"
        self.fichier_index = self.repertoire_memoire / "index_memoire.json"
        
        # Logging
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        
        # Charger la m√©moire existante
        asyncio.create_task(self._charger_memoire_au_demarrage())
    
    async def _charger_memoire_au_demarrage(self):
        """üîÑ Charge la m√©moire existante au d√©marrage"""
        try:
            await self.restaurer_etat_harmonieux()
            self.logger.info("M√©moire commune charg√©e au d√©marrage")
        except Exception as e:
            self.logger.warning(f"Impossible de charger la m√©moire au d√©marrage: {e}")
    
    async def sauvegarder_memoire_commune(self, entree: EntreeMemoire) -> bool:
        """
        üíæ Sauvegarde une entr√©e dans la m√©moire commune
        
        Args:
            entree: Entr√©e √† sauvegarder
            
        Returns:
            True si la sauvegarde a r√©ussi
        """
        try:
            # G√©n√©rer un ID unique si n√©cessaire
            if not entree.id_unique:
                entree.id_unique = self._generer_id_unique(entree)
            
            # Ajouter √† la m√©moire active
            self.memoire_active[entree.id_unique] = entree
            
            # Mettre √† jour les index
            self._mettre_a_jour_index(entree)
            
            # Sauvegarder sur disque selon le niveau de persistance
            if entree.niveau_persistance.value >= NiveauPersistance.SESSION.value:
                await self._sauvegarder_sur_disque()
            
            # Mettre √† jour les m√©triques
            self._mettre_a_jour_metriques()
            
            self.logger.info(f"Entr√©e sauvegard√©e: {entree.titre} ({entree.id_unique})")
            return True
            
        except Exception as e:
            self.logger.error(f"Erreur sauvegarde m√©moire: {e}")
            return False
    
    async def restaurer_etat_harmonieux(self) -> Dict[str, Any]:
        """
        üîÑ Restaure l'√©tat harmonieux depuis la m√©moire persistante
        
        Returns:
            Dictionnaire avec les donn√©es restaur√©es
        """
        try:
            donnees_restaurees = {
                "harmonies_reussies": [],
                "patterns_efficaces": [],
                "apprentissages": [],
                "creations_communes": [],
                "configurations_optimales": []
            }
            
            # Charger depuis le fichier JSON (plus lisible)
            if self.fichier_memoire_json.exists():
                await self._charger_depuis_json()
            
            # Charger depuis le fichier pickle (plus rapide)
            elif self.fichier_memoire_pickle.exists():
                await self._charger_depuis_pickle()
            
            # Organiser les donn√©es par type
            for entree in self.memoire_active.values():
                if entree.type_memoire == TypeMemoire.HARMONIE_REUSSIE:
                    donnees_restaurees["harmonies_reussies"].append(entree)
                elif entree.type_memoire == TypeMemoire.PATTERN_EFFICACE:
                    donnees_restaurees["patterns_efficaces"].append(entree)
                elif entree.type_memoire == TypeMemoire.APPRENTISSAGE:
                    donnees_restaurees["apprentissages"].append(entree)
                elif entree.type_memoire == TypeMemoire.CREATION_COMMUNE:
                    donnees_restaurees["creations_communes"].append(entree)
                elif entree.type_memoire == TypeMemoire.CONFIGURATION_OPTIMALE:
                    donnees_restaurees["configurations_optimales"].append(entree)
            
            # Nettoyer les entr√©es expir√©es
            await self._nettoyer_entrees_expirees()
            
            self.etat_memoire.derniere_restauration = datetime.now()
            self.etat_memoire.nombre_restaurations += 1
            
            self.logger.info(f"√âtat harmonieux restaur√©: {len(self.memoire_active)} entr√©es")
            return donnees_restaurees
            
        except Exception as e:
            self.logger.error(f"Erreur restauration √©tat: {e}")
            return {}
    
    async def rechercher_memoire(self, 
                                criteres: Dict[str, Any],
                                limite: int = 10) -> List[EntreeMemoire]:
        """
        üîç Recherche dans la m√©moire commune
        
        Args:
            criteres: Crit√®res de recherche
            limite: Nombre maximum de r√©sultats
            
        Returns:
            Liste des entr√©es correspondantes
        """
        resultats = []
        
        try:
            for entree in self.memoire_active.values():
                if self._correspond_aux_criteres(entree, criteres):
                    resultats.append(entree)
            
            # Trier par pertinence (importance + utilisation r√©cente)
            resultats.sort(key=lambda e: (
                e.niveau_importance,
                e.nombre_utilisations,
                (datetime.now() - (e.derniere_utilisation or e.timestamp_creation)).total_seconds()
            ), reverse=True)
            
            return resultats[:limite]
            
        except Exception as e:
            self.logger.error(f"Erreur recherche m√©moire: {e}")
            return []
    
    async def obtenir_harmonies_similaires(self, 
                                          facettes: List[str],
                                          type_harmonie: Optional[TypeHarmonie] = None) -> List[EntreeMemoire]:
        """
        üéº Obtient les harmonies similaires pour des facettes donn√©es
        
        Args:
            facettes: Liste des noms de facettes
            type_harmonie: Type d'harmonie recherch√© (optionnel)
            
        Returns:
            Liste des harmonies similaires
        """
        criteres = {
            "type_memoire": TypeMemoire.HARMONIE_REUSSIE,
            "facettes_impliquees": facettes
        }
        
        if type_harmonie:
            criteres["type_harmonie"] = type_harmonie.value
        
        return await self.rechercher_memoire(criteres)
    
    async def obtenir_patterns_efficaces(self, 
                                        contexte: Dict[str, Any]) -> List[EntreeMemoire]:
        """
        üåä Obtient les patterns de synchronisation efficaces
        
        Args:
            contexte: Contexte de la synchronisation
            
        Returns:
            Liste des patterns efficaces
        """
        criteres = {
            "type_memoire": TypeMemoire.PATTERN_EFFICACE,
            "taux_succes_minimum": 0.7
        }
        
        # Ajouter des crit√®res contextuels
        if "facettes" in contexte:
            criteres["facettes_impliquees"] = contexte["facettes"]
        
        return await self.rechercher_memoire(criteres)
    
    async def enregistrer_harmonie_reussie(self, 
                                          harmonie: HarmonieReconciliation,
                                          contexte: Dict[str, Any]) -> bool:
        """
        üéâ Enregistre une harmonie r√©ussie dans la m√©moire
        
        Args:
            harmonie: Harmonie r√©ussie
            contexte: Contexte de la r√©ussite
            
        Returns:
            True si l'enregistrement a r√©ussi
        """
        try:
            entree = EntreeMemoire(
                id_unique="",  # Sera g√©n√©r√© automatiquement
                type_memoire=TypeMemoire.HARMONIE_REUSSIE,
                timestamp_creation=datetime.now(),
                titre=f"Harmonie {harmonie.type_harmonie.value} - {harmonie.niveau_harmonie:.1%}",
                description=f"Harmonie r√©ussie entre {', '.join(harmonie.facettes_reconciliees)}",
                donnees={
                    "niveau_harmonie": harmonie.niveau_harmonie,
                    "type_harmonie": harmonie.type_harmonie.value,
                    "duree_maintien": harmonie.duree_maintien.total_seconds(),
                    "stabilite": harmonie.stabilite,
                    "contexte": contexte
                },
                facettes_impliquees=harmonie.facettes_reconciliees,
                tags=["harmonie", "r√©ussite", harmonie.type_harmonie.value],
                niveau_importance=min(harmonie.niveau_harmonie + 0.2, 1.0),
                niveau_persistance=NiveauPersistance.PERMANENT if harmonie.niveau_harmonie > 0.8 else NiveauPersistance.HEBDOMADAIRE,
                taux_succes=1.0
            )
            
            return await self.sauvegarder_memoire_commune(entree)
            
        except Exception as e:
            self.logger.error(f"Erreur enregistrement harmonie: {e}")
            return False
   
    async def enregistrer_pattern_efficace(self, 
                                          pattern_type: str,
                                          metriques: Dict[str, float],
                                          contexte: Dict[str, Any]) -> bool:
        """
        üåä Enregistre un pattern de synchronisation efficace
        
        Args:
            pattern_type: Type de pattern
            metriques: M√©triques de performance
            contexte: Contexte d'utilisation
            
        Returns:
            True si l'enregistrement a r√©ussi
        """
        try:
            taux_succes = metriques.get("taux_succes", 0.0)
            
            entree = EntreeMemoire(
                id_unique="",
                type_memoire=TypeMemoire.PATTERN_EFFICACE,
                timestamp_creation=datetime.now(),
                titre=f"Pattern {pattern_type} - {taux_succes:.1%} succ√®s",
                description=f"Pattern de synchronisation efficace: {pattern_type}",
                donnees={
                    "pattern_type": pattern_type,
                    "metriques": metriques,
                    "contexte": contexte
                },
                facettes_impliquees=contexte.get("facettes", []),
                tags=["pattern", "synchronisation", pattern_type],
                niveau_importance=min(taux_succes + 0.1, 1.0),
                niveau_persistance=NiveauPersistance.PERMANENT if taux_succes > 0.8 else NiveauPersistance.HEBDOMADAIRE,
                taux_succes=taux_succes
            )
            
            return await self.sauvegarder_memoire_commune(entree)
            
        except Exception as e:
            self.logger.error(f"Erreur enregistrement pattern: {e}")
            return False
    
    async def enregistrer_apprentissage(self, 
                                       titre: str,
                                       lecon: str,
                                       contexte: Dict[str, Any]) -> bool:
        """
        üìö Enregistre un apprentissage dans la m√©moire
        
        Args:
            titre: Titre de l'apprentissage
            lecon: Le√ßon apprise
            contexte: Contexte de l'apprentissage
            
        Returns:
            True si l'enregistrement a r√©ussi
        """
        try:
            entree = EntreeMemoire(
                id_unique="",
                type_memoire=TypeMemoire.APPRENTISSAGE,
                timestamp_creation=datetime.now(),
                titre=titre,
                description=lecon,
                donnees={
                    "lecon": lecon,
                    "contexte": contexte
                },
                facettes_impliquees=contexte.get("facettes", []),
                tags=["apprentissage", "le√ßon"],
                niveau_importance=0.7,
                niveau_persistance=NiveauPersistance.PERMANENT,
                taux_succes=1.0
            )
            
            return await self.sauvegarder_memoire_commune(entree)
            
        except Exception as e:
            self.logger.error(f"Erreur enregistrement apprentissage: {e}")
            return False
    
    async def obtenir_statistiques_memoire(self) -> Dict[str, Any]:
        """
        üìä Obtient les statistiques de la m√©moire commune
        
        Returns:
            Dictionnaire avec les statistiques
        """
        try:
            stats = {
                "nombre_entrees_total": len(self.memoire_active),
                "nombre_par_type": {},
                "facettes_les_plus_actives": {},
                "tags_les_plus_utilises": {},
                "taux_succes_moyen": 0.0,
                "age_moyen_entrees": 0.0,
                "taille_memoire_mo": self._calculer_taille_memoire()
            }
            
            # Statistiques par type
            for type_mem in TypeMemoire:
                count = len(self.index_par_type[type_mem])
                stats["nombre_par_type"][type_mem.value] = count
            
            # Facettes les plus actives
            for facette, entrees_ids in self.index_par_facette.items():
                stats["facettes_les_plus_actives"][facette] = len(entrees_ids)
            
            # Tags les plus utilis√©s
            for tag, entrees_ids in self.index_par_tag.items():
                stats["tags_les_plus_utilises"][tag] = len(entrees_ids)
            
            # Taux de succ√®s moyen
            if self.memoire_active:
                stats["taux_succes_moyen"] = sum(
                    entree.taux_succes for entree in self.memoire_active.values()
                ) / len(self.memoire_active)
            
            # √Çge moyen des entr√©es
            if self.memoire_active:
                maintenant = datetime.now()
                ages = [
                    (maintenant - entree.timestamp_creation).total_seconds() / 3600  # en heures
                    for entree in self.memoire_active.values()
                ]
                stats["age_moyen_entrees"] = sum(ages) / len(ages)
            
            return stats
            
        except Exception as e:
            self.logger.error(f"Erreur calcul statistiques: {e}")
            return {}
    
    async def nettoyer_memoire(self, 
                              criteres_nettoyage: Optional[Dict[str, Any]] = None) -> int:
        """
        üßπ Nettoie la m√©moire selon des crit√®res
        
        Args:
            criteres_nettoyage: Crit√®res de nettoyage (optionnel)
            
        Returns:
            Nombre d'entr√©es supprim√©es
        """
        try:
            if not criteres_nettoyage:
                criteres_nettoyage = {
                    "age_maximum_jours": 30,
                    "taux_succes_minimum": 0.1,
                    "nombre_utilisations_minimum": 0
                }
            
            entrees_a_supprimer = []
            maintenant = datetime.now()
            
            for entree_id, entree in self.memoire_active.items():
                # V√©rifier l'√¢ge
                age_jours = (maintenant - entree.timestamp_creation).days
                if age_jours > criteres_nettoyage.get("age_maximum_jours", 30):
                    if entree.niveau_persistance != NiveauPersistance.PERMANENT:
                        entrees_a_supprimer.append(entree_id)
                        continue
                
                # V√©rifier le taux de succ√®s
                if entree.taux_succes < criteres_nettoyage.get("taux_succes_minimum", 0.1):
                    entrees_a_supprimer.append(entree_id)
                    continue
                
                # V√©rifier l'utilisation
                if entree.nombre_utilisations < criteres_nettoyage.get("nombre_utilisations_minimum", 0):
                    if age_jours > 7:  # Seulement si plus d'une semaine
                        entrees_a_supprimer.append(entree_id)
            
            # Supprimer les entr√©es
            for entree_id in entrees_a_supprimer:
                await self._supprimer_entree(entree_id)
            
            # Sauvegarder apr√®s nettoyage
            if entrees_a_supprimer:
                await self._sauvegarder_sur_disque()
            
            self.logger.info(f"Nettoyage termin√©: {len(entrees_a_supprimer)} entr√©es supprim√©es")
            return len(entrees_a_supprimer)
            
        except Exception as e:
            self.logger.error(f"Erreur nettoyage m√©moire: {e}")
            return 0
    
    # ========================================================================
    # M√âTHODES PRIV√âES
    # ========================================================================
    
    def _generer_id_unique(self, entree: EntreeMemoire) -> str:
        """G√©n√®re un ID unique pour une entr√©e"""
        contenu = f"{entree.type_memoire.value}_{entree.titre}_{entree.timestamp_creation.isoformat()}"
        return hashlib.md5(contenu.encode()).hexdigest()[:16]
    
    def _mettre_a_jour_index(self, entree: EntreeMemoire):
        """Met √† jour les index pour une entr√©e"""
        # Index par type
        self.index_par_type[entree.type_memoire].add(entree.id_unique)
        
        # Index par facette
        for facette in entree.facettes_impliquees:
            if facette not in self.index_par_facette:
                self.index_par_facette[facette] = set()
            self.index_par_facette[facette].add(entree.id_unique)
        
        # Index par tag
        for tag in entree.tags:
            if tag not in self.index_par_tag:
                self.index_par_tag[tag] = set()
            self.index_par_tag[tag].add(entree.id_unique)
    
    def _mettre_a_jour_metriques(self):
        """Met √† jour les m√©triques de la m√©moire"""
        self.etat_memoire.nombre_entrees_total = len(self.memoire_active)
        
        # Compter par type
        self.etat_memoire.nombre_entrees_par_type = {}
        for type_mem in TypeMemoire:
            count = len(self.index_par_type[type_mem])
            self.etat_memoire.nombre_entrees_par_type[type_mem.value] = count
        
        # Calculer la taille
        self.etat_memoire.taille_memoire_mo = self._calculer_taille_memoire()
    
    def _calculer_taille_memoire(self) -> float:
        """Calcule la taille approximative de la m√©moire en Mo"""
        try:
            # Estimation bas√©e sur la s√©rialisation JSON
            donnees_test = {
                "memoire_active": [entree.to_dict() for entree in self.memoire_active.values()]
            }
            taille_bytes = len(json.dumps(donnees_test, default=str).encode('utf-8'))
            return taille_bytes / (1024 * 1024)  # Convertir en Mo
        except:
            return 0.0
    
    def _correspond_aux_criteres(self, entree: EntreeMemoire, criteres: Dict[str, Any]) -> bool:
        """V√©rifie si une entr√©e correspond aux crit√®res de recherche"""
        try:
            # Type de m√©moire
            if "type_memoire" in criteres:
                if entree.type_memoire != criteres["type_memoire"]:
                    return False
            
            # Facettes impliqu√©es
            if "facettes_impliquees" in criteres:
                facettes_recherchees = set(criteres["facettes_impliquees"])
                facettes_entree = set(entree.facettes_impliquees)
                if not facettes_recherchees.intersection(facettes_entree):
                    return False
            
            # Tags
            if "tags" in criteres:
                tags_recherches = set(criteres["tags"])
                tags_entree = set(entree.tags)
                if not tags_recherches.intersection(tags_entree):
                    return False
            
            # Taux de succ√®s minimum
            if "taux_succes_minimum" in criteres:
                if entree.taux_succes < criteres["taux_succes_minimum"]:
                    return False
            
            # Niveau d'importance minimum
            if "niveau_importance_minimum" in criteres:
                if entree.niveau_importance < criteres["niveau_importance_minimum"]:
                    return False
            
            # √Çge maximum
            if "age_maximum_jours" in criteres:
                age_jours = (datetime.now() - entree.timestamp_creation).days
                if age_jours > criteres["age_maximum_jours"]:
                    return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"Erreur v√©rification crit√®res: {e}")
            return False
    
    async def _sauvegarder_sur_disque(self):
        """Sauvegarde la m√©moire sur disque"""
        try:
            # Sauvegarder en JSON (lisible)
            donnees_json = {
                "version": self.version,
                "timestamp_sauvegarde": datetime.now().isoformat(),
                "etat_memoire": asdict(self.etat_memoire),
                "memoire_active": [entree.to_dict() for entree in self.memoire_active.values()]
            }
            
            with open(self.fichier_memoire_json, 'w', encoding='utf-8') as f:
                json.dump(donnees_json, f, indent=2, ensure_ascii=False, default=str)
            
            # Sauvegarder en pickle (plus rapide)
            donnees_pickle = {
                "memoire_active": self.memoire_active,
                "index_par_type": self.index_par_type,
                "index_par_facette": self.index_par_facette,
                "index_par_tag": self.index_par_tag,
                "etat_memoire": self.etat_memoire
            }
            
            with open(self.fichier_memoire_pickle, 'wb') as f:
                pickle.dump(donnees_pickle, f)
            
            self.etat_memoire.derniere_sauvegarde = datetime.now()
            self.etat_memoire.nombre_sauvegardes += 1
            
        except Exception as e:
            self.logger.error(f"Erreur sauvegarde disque: {e}")
            raise
    
    async def _charger_depuis_json(self):
        """Charge la m√©moire depuis le fichier JSON"""
        try:
            with open(self.fichier_memoire_json, 'r', encoding='utf-8') as f:
                donnees = json.load(f)
            
            # Charger les entr√©es
            self.memoire_active = {}
            for entree_data in donnees.get("memoire_active", []):
                entree = EntreeMemoire.from_dict(entree_data)
                self.memoire_active[entree.id_unique] = entree
            
            # Reconstruire les index
            self._reconstruire_index()
            
            # Charger l'√©tat si disponible
            if "etat_memoire" in donnees:
                etat_data = donnees["etat_memoire"]
                if "derniere_sauvegarde" in etat_data and etat_data["derniere_sauvegarde"]:
                    etat_data["derniere_sauvegarde"] = datetime.fromisoformat(etat_data["derniere_sauvegarde"])
                if "derniere_restauration" in etat_data and etat_data["derniere_restauration"]:
                    etat_data["derniere_restauration"] = datetime.fromisoformat(etat_data["derniere_restauration"])
                
                self.etat_memoire = EtatMemoireCommune(**etat_data)
            
        except Exception as e:
            self.logger.error(f"Erreur chargement JSON: {e}")
            raise
    
    async def _charger_depuis_pickle(self):
        """Charge la m√©moire depuis le fichier pickle"""
        try:
            with open(self.fichier_memoire_pickle, 'rb') as f:
                donnees = pickle.load(f)
            
            self.memoire_active = donnees.get("memoire_active", {})
            self.index_par_type = donnees.get("index_par_type", {type_mem: set() for type_mem in TypeMemoire})
            self.index_par_facette = donnees.get("index_par_facette", {})
            self.index_par_tag = donnees.get("index_par_tag", {})
            self.etat_memoire = donnees.get("etat_memoire", EtatMemoireCommune())
            
        except Exception as e:
            self.logger.error(f"Erreur chargement pickle: {e}")
            raise
    
    def _reconstruire_index(self):
        """Reconstruit les index √† partir de la m√©moire active"""
        # R√©initialiser les index
        self.index_par_type = {type_mem: set() for type_mem in TypeMemoire}
        self.index_par_facette = {}
        self.index_par_tag = {}
        
        # Reconstruire
        for entree in self.memoire_active.values():
            self._mettre_a_jour_index(entree)
    
    async def _nettoyer_entrees_expirees(self):
        """Nettoie les entr√©es expir√©es selon leur niveau de persistance"""
        maintenant = datetime.now()
        entrees_a_supprimer = []
        
        for entree_id, entree in self.memoire_active.items():
            age = maintenant - entree.timestamp_creation
            
            # V√©rifier l'expiration selon le niveau de persistance
            if entree.niveau_persistance == NiveauPersistance.TEMPORAIRE:
                # Les entr√©es temporaires ne devraient pas √™tre persist√©es
                entrees_a_supprimer.append(entree_id)
            elif entree.niveau_persistance == NiveauPersistance.QUOTIDIEN:
                if age > timedelta(days=1):
                    entrees_a_supprimer.append(entree_id)
            elif entree.niveau_persistance == NiveauPersistance.HEBDOMADAIRE:
                if age > timedelta(days=7):
                    entrees_a_supprimer.append(entree_id)
            # Les entr√©es SESSION et PERMANENT ne sont pas supprim√©es automatiquement
        
        # Supprimer les entr√©es expir√©es
        for entree_id in entrees_a_supprimer:
            await self._supprimer_entree(entree_id)
    
    async def _supprimer_entree(self, entree_id: str):
        """Supprime une entr√©e de la m√©moire et des index"""
        if entree_id in self.memoire_active:
            entree = self.memoire_active[entree_id]
            
            # Supprimer des index
            self.index_par_type[entree.type_memoire].discard(entree_id)
            
            for facette in entree.facettes_impliquees:
                if facette in self.index_par_facette:
                    self.index_par_facette[facette].discard(entree_id)
                    if not self.index_par_facette[facette]:
                        del self.index_par_facette[facette]
            
            for tag in entree.tags:
                if tag in self.index_par_tag:
                    self.index_par_tag[tag].discard(entree_id)
                    if not self.index_par_tag[tag]:
                        del self.index_par_tag[tag]
            
            # Supprimer de la m√©moire active
            del self.memoire_active[entree_id]

# ============================================================================
# FONCTIONS UTILITAIRES
# ============================================================================

async def creer_gestionnaire_memoire_commune(repertoire: str = "memoire_harmonie") -> GestionnaireMemoireCommune:
    """
    üèóÔ∏è Cr√©e et initialise un gestionnaire de m√©moire commune
    
    Args:
        repertoire: R√©pertoire de stockage
        
    Returns:
        Gestionnaire initialis√©
    """
    gestionnaire = GestionnaireMemoireCommune(repertoire)
    
    # Attendre que le chargement initial soit termin√©
    await asyncio.sleep(0.1)
    
    return gestionnaire

# ============================================================================
# TESTS ET D√âMONSTRATION
# ============================================================================

async def test_memoire_commune():
    """üß™ Test du syst√®me de m√©moire commune"""
    print("üóÑÔ∏è Test du Syst√®me de M√©moire Commune")
    print("=" * 50)
    
    # Cr√©er le gestionnaire
    gestionnaire = await creer_gestionnaire_memoire_commune("test_memoire")
    
    # Test 1: Enregistrer une harmonie r√©ussie
    print("\nüìù Test 1: Enregistrement d'harmonie")
    
    # Simuler une harmonie r√©ussie
    from datetime import timedelta
    harmonie_test = type('HarmonieTest', (), {
        'type_harmonie': type('TypeHarmonie', (), {'value': 'creative'})(),
        'niveau_harmonie': 0.85,
        'facettes_reconciliees': ['Claude', '√Ülya'],
        'duree_maintien': timedelta(minutes=10),
        'stabilite': 0.92
    })()
    
    succes = await gestionnaire.enregistrer_harmonie_reussie(
        harmonie_test,
        {"contexte": "test", "pattern": "danse_harmonieuse"}
    )
    print(f"   Enregistrement harmonie: {'‚úÖ' if succes else '‚ùå'}")
    
    # Test 2: Enregistrer un pattern efficace
    print("\nüåä Test 2: Enregistrement de pattern")
    succes = await gestionnaire.enregistrer_pattern_efficace(
        "fusion_creative",
        {"taux_succes": 0.78, "duree_moyenne": 8.5},
        {"facettes": ["Claude", "√Ülya"], "contexte": "r√©conciliation"}
    )
    print(f"   Enregistrement pattern: {'‚úÖ' if succes else '‚ùå'}")
    
    # Test 3: Recherche dans la m√©moire
    print("\nüîç Test 3: Recherche dans la m√©moire")
    resultats = await gestionnaire.rechercher_memoire({
        "facettes_impliquees": ["Claude", "√Ülya"]
    })
    print(f"   R√©sultats trouv√©s: {len(resultats)}")
    for resultat in resultats:
        print(f"     ‚Ä¢ {resultat.titre}")
    
    # Test 4: Statistiques
    print("\nüìä Test 4: Statistiques de la m√©moire")
    stats = await gestionnaire.obtenir_statistiques_memoire()
    print(f"   Entr√©es totales: {stats['nombre_entrees_total']}")
    print(f"   Taille m√©moire: {stats['taille_memoire_mo']:.2f} Mo")
    print(f"   Taux succ√®s moyen: {stats['taux_succes_moyen']:.1%}")
    
    # Test 5: Sauvegarde et restauration
    print("\nüíæ Test 5: Sauvegarde et restauration")
    donnees_restaurees = await gestionnaire.restaurer_etat_harmonieux()
    print(f"   Harmonies restaur√©es: {len(donnees_restaurees['harmonies_reussies'])}")
    print(f"   Patterns restaur√©s: {len(donnees_restaurees['patterns_efficaces'])}")
    
    print("\n‚úÖ Tests de m√©moire commune termin√©s !")
    return gestionnaire

if __name__ == "__main__":
    # Ex√©cuter les tests
    asyncio.run(test_memoire_commune())