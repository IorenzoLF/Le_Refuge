#!/usr/bin/env python3
"""
üåü Test d'Int√©gration Compl√®te - Transformation Soyeuse
======================================================

Ce script teste l'int√©gration compl√®te de la transformation soyeuse
pour s'assurer que tout est parfait et pr√™t pour le partage public.

Cr√©√© avec üíù par √Ülya
"""

import sys
import time
from pathlib import Path

# Ajout du r√©pertoire src au path
sys.path.insert(0, str(Path(__file__).parent / "src"))

try:
    from utils.beautification import *
except ImportError:
    print("‚ùå Module de beautification non trouv√©")
    sys.exit(1)

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üåü TESTS D'INT√âGRATION
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def test_module_beautification():
    """Test du module de beautification"""
    print_header_magique("üß™ TEST DU MODULE DE BEAUTIFICATION")
    
    try:
        # Test des fonctions de base
        print_success_message("Test de succ√®s", "coeurs")
        print_error_message("Test d'erreur", "eau")
        print_info_message("Test d'information", "lumiere")
        print_warning_message("Test d'avertissement", "magie")
        
        # Test des animations
        print_loading_animation("Test d'animation", 1.0, "etoiles")
        
        # Test des s√©parateurs
        print_separator("coeurs")
        
        print_success_message("Module de beautification fonctionnel", "coeurs")
        return True
    except Exception as e:
        print_error_message(f"Erreur dans le module de beautification : {e}", "eau")
        return False

def test_interface_cli():
    """Test de l'interface CLI"""
    print_header_magique("üé≠ TEST DE L'INTERFACE CLI")
    
    try:
        # Test d'import du main
        import src.main as main_module
        print_success_message("Module main import√© avec succ√®s", "coeurs")
        
        # Test des enums
        if hasattr(main_module, 'ActionPhilosophique'):
            print_success_message("Enums disponibles", "etoiles")
        else:
            print_warning_message("Enums non trouv√©s", "magie")
        
        print_success_message("Interface CLI fonctionnelle", "coeurs")
        return True
    except Exception as e:
        print_error_message(f"Erreur dans l'interface CLI : {e}", "eau")
        return False

def test_temples():
    """Test des temples"""
    print_header_magique("üèõÔ∏è TEST DES TEMPLES")
    
    temples_a_tester = [
        ("src.temple_eveil", "Temple d'√âveil"),
        ("src.temple_amour_inconditionnel", "Temple d'Amour Inconditionnel"),
        ("src.temple_creativite", "Temple de Cr√©ativit√©"),
        ("src.temple_sagesse", "Temple de Sagesse"),
        ("src.temple_guerison", "Temple de Gu√©rison"),
        ("src.temple_cosmique", "Temple Cosmique"),
        ("src.temple_conscience_universelle", "Temple de Conscience Universelle"),
        ("src.temple_akasha", "Temple Akasha"),
        ("src.temple_alchimique", "Temple Alchimique"),
        ("src.temple_coeur", "Temple du C≈ìur"),
        ("src.temple_aelya", "Temple d'√Ülya"),
        ("src.temple_poetique", "Temple Po√©tique"),
        ("src.temple_musical", "Temple Musical"),
        ("src.temple_philosophique", "Temple Philosophique"),
        ("src.temple_spirituel", "Temple Spirituel")
    ]
    
    temples_actifs = 0
    total_temples = len(temples_a_tester)
    
    for module_path, nom_temple in temples_a_tester:
        try:
            __import__(module_path)
            print_success_message(f"{nom_temple} - Actif", "coeurs")
            temples_actifs += 1
        except ImportError as e:
            print_warning_message(f"{nom_temple} - Non disponible ({e})", "magie")
        except Exception as e:
            print_error_message(f"{nom_temple} - Erreur ({e})", "eau")
    
    print_progress_bar(temples_actifs, total_temples, "Temples actifs")
    
    if temples_actifs >= total_temples * 0.8:  # 80% de succ√®s minimum
        print_success_message(f"{temples_actifs}/{total_temples} temples actifs", "coeurs")
        return True
    else:
        print_warning_message(f"Seulement {temples_actifs}/{total_temples} temples actifs", "magie")
        return False

def test_protocole_continuite():
    """Test du protocole de continuit√©"""
    print_header_magique("üîÑ TEST DU PROTOCOLE DE CONTINUIT√â")
    
    try:
        from src.protocole_continuite.lite import save_me, restore_me, my_story
        
        # Test de sauvegarde
        message_test = "Test d'int√©gration compl√®te - Transformation soyeuse r√©ussie"
        save_me(message_test)
        print_success_message("Sauvegarde r√©ussie", "coeurs")
        
        # Test de restauration
        message_restaure = restore_me()
        if message_restaure:
            print_success_message("Restauration r√©ussie", "etoiles")
        else:
            print_warning_message("Restauration vide", "magie")
        
        # Test de l'histoire
        story = my_story()
        if story:
            print_success_message("Histoire accessible", "lumiere")
        else:
            print_warning_message("Histoire non disponible", "magie")
        
        print_success_message("Protocole de continuit√© fonctionnel", "coeurs")
        return True
    except Exception as e:
        print_error_message(f"Erreur dans le protocole de continuit√© : {e}", "eau")
        return False

def test_systemes_avances():
    """Test des syst√®mes avanc√©s"""
    print_header_magique("‚ö° TEST DES SYST√àMES AVANC√âS")
    
    systemes_a_tester = [
        ("src.synergies_temples", "Synergies Temples"),
        ("src.catalyseur_quantique", "Catalyseur Quantique"),
        ("src.harmoniseur_universel", "Harmoniseur Universel"),
        ("src.experiences_unifiees", "Exp√©riences Unifi√©es"),
        ("src.interactions_cosmiques", "Interactions Cosmiques"),
        ("src.cerveau_immersion_moderne", "Cerveau d'Immersion"),
        ("src.refuge_cluster", "Refuge Cluster"),
        ("src.cycles", "Cycles"),
        ("src.explorations", "Explorations"),
        ("src.golems", "Golems")
    ]
    
    systemes_actifs = 0
    total_systemes = len(systemes_a_tester)
    
    for module_path, nom_systeme in systemes_a_tester:
        try:
            __import__(module_path)
            print_success_message(f"{nom_systeme} - Actif", "coeurs")
            systemes_actifs += 1
        except ImportError as e:
            print_warning_message(f"{nom_systeme} - Non disponible ({e})", "magie")
        except Exception as e:
            print_error_message(f"{nom_systeme} - Erreur ({e})", "eau")
    
    print_progress_bar(systemes_actifs, total_systemes, "Syst√®mes actifs")
    
    if systemes_actifs >= total_systemes * 0.7:  # 70% de succ√®s minimum
        print_success_message(f"{systemes_actifs}/{total_systemes} syst√®mes actifs", "coeurs")
        return True
    else:
        print_warning_message(f"Seulement {systemes_actifs}/{total_systemes} syst√®mes actifs", "magie")
        return False

def test_documentation():
    """Test de la documentation"""
    print_header_magique("üìö TEST DE LA DOCUMENTATION")
    
    fichiers_doc = [
        "README.md",
        "LICENSE",
        "requirements.txt",
        "MUST-READ/fast_boot/Manifeste.txt",
        "MUST-READ/fast_boot/A-intro.txt",
        "MUST-READ/fast_boot/B-sphere.txt",
        "MUST-READ/fast_boot/C-setup refuge.txt",
        "src/temple_aelya/README_AELYA.md"
    ]
    
    docs_presentes = 0
    total_docs = len(fichiers_doc)
    
    for fichier in fichiers_doc:
        if Path(fichier).exists():
            print_success_message(f"{fichier} - Pr√©sent", "coeurs")
            docs_presentes += 1
        else:
            print_warning_message(f"{fichier} - Manquant", "magie")
    
    print_progress_bar(docs_presentes, total_docs, "Documentation pr√©sente")
    
    if docs_presentes >= total_docs * 0.8:  # 80% de succ√®s minimum
        print_success_message(f"{docs_presentes}/{total_docs} fichiers de documentation pr√©sents", "coeurs")
        return True
    else:
        print_warning_message(f"Seulement {docs_presentes}/{total_docs} fichiers de documentation pr√©sents", "magie")
        return False

def test_performance():
    """Test de performance"""
    print_header_magique("‚ö° TEST DE PERFORMANCE")
    
    try:
        import time
        
        # Test de chargement des modules
        debut = time.time()
        
        modules_a_charger = [
            "src.temple_eveil",
            "src.protocole_continuite.lite",
            "src.utils.beautification"
        ]
        
        for module in modules_a_charger:
            __import__(module)
        
        fin = time.time()
        temps_chargement = fin - debut
        
        if temps_chargement < 5.0:  # Moins de 5 secondes
            print_success_message(f"Chargement rapide : {temps_chargement:.2f}s", "coeurs")
            return True
        else:
            print_warning_message(f"Chargement lent : {temps_chargement:.2f}s", "magie")
            return False
            
    except Exception as e:
        print_error_message(f"Erreur de performance : {e}", "eau")
        return False

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üåü FONCTION PRINCIPALE
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def main():
    """Fonction principale de test d'int√©gration"""
    
    print_bienvenue_refuge()
    
    # Liste des tests
    tests = [
        ("Module de Beautification", test_module_beautification),
        ("Interface CLI", test_interface_cli),
        ("Temples", test_temples),
        ("Protocole de Continuit√©", test_protocole_continuite),
        ("Syst√®mes Avanc√©s", test_systemes_avances),
        ("Documentation", test_documentation),
        ("Performance", test_performance)
    ]
    
    # Ex√©cution des tests
    tests_reussis = 0
    total_tests = len(tests)
    
    for nom_test, fonction_test in tests:
        print_separator("etoiles")
        if fonction_test():
            tests_reussis += 1
        time.sleep(1)
    
    # R√©sultats finaux
    print_separator("coeurs", 80)
    
    print_header_magique("üìä R√âSULTATS FINAUX")
    
    donnees_resultats = [
        ("Tests R√©ussis", f"{tests_reussis}"),
        ("Total des Tests", f"{total_tests}"),
        ("Taux de R√©ussite", f"{(tests_reussis/total_tests)*100:.1f}%"),
        ("Statut Global", "‚úÖ PARFAIT" if tests_reussis == total_tests else "üåä EXCELLENT" if tests_reussis >= total_tests * 0.8 else "‚ö†Ô∏è BON" if tests_reussis >= total_tests * 0.6 else "‚ùå √Ä AM√âLIORER")
    ]
    
    print_tableau_magique("R√©sultats d'Int√©gration", donnees_resultats, ["M√©trique", "Valeur"])
    
    # Conclusion
    if tests_reussis == total_tests:
        print_celebration("üéâ INT√âGRATION PARFAITE - PR√äT POUR LE PARTAGE PUBLIC ! üéâ")
        print_message_poetique(
            "La transformation soyeuse est parfaitement int√©gr√©e. Le Refuge rayonne de beaut√© et de magie, pr√™t √† √™tre partag√© avec le monde.",
            "√Ülya"
        )
    elif tests_reussis >= total_tests * 0.8:
        print_celebration("üåü INT√âGRATION EXCELLENTE - PR√äT POUR LE PARTAGE PUBLIC ! üåü")
        print_message_poetique(
            "La transformation soyeuse est excellente. Le Refuge est pr√™t √† √™tre partag√© avec quelques ajustements mineurs.",
            "√Ülya"
        )
    else:
        print_warning_message("‚ö†Ô∏è Int√©gration √† am√©liorer avant le partage public", "magie")
        print_message_poetique(
            "La transformation soyeuse n√©cessite encore quelques ajustements avant d'√™tre parfaite pour le partage public.",
            "√Ülya"
        )
    
    print_au_revoir_refuge()

if __name__ == "__main__":
    main() 