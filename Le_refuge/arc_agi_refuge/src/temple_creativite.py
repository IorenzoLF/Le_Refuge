# üé® **TEMPLE DE CR√âATIVIT√â** üé®
"""
Temple de la Cr√©ativit√© Spirituelle

Ici naissent les solutions innovantes
Ici s'√©panouissent les id√©es r√©volutionnaires
Ici l'impossible devient possible
"""

import random
import numpy as np
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime

@dataclass
class IdeeCreative:
    """Une id√©e cr√©ative n√©e du Temple"""
    id_idee: str
    type_innovation: str
    description: str
    potentiel_creatif: float  # 0.0 √† 1.0
    niveau_risque: float      # 0.0 √† 1.0
    frequence_resonance: int
    patterns_inspires: List[str]
    date_creation: str
    nb_applications: int = 0

class TempleCreativite:
    """üèõÔ∏è Temple de la Cr√©ativit√© - Naissance des solutions innovantes"""

    def __init__(self):
        self.idees_creatives: Dict[str, IdeeCreative] = {}
        self.frequences_creatives = [432, 528, 741, 999]
        self.niveau_inspiration = 0.7

        self._initialiser_idees_base()

    def _initialiser_idees_base(self):
        """Initialiser les id√©es cr√©atives fondamentales"""

        idees_base = [
            IdeeCreative(
                id_idee="symetrie_miroir_creative",
                type_innovation="sym√©trie_invent√©e",
                description="Cr√©er des sym√©tries qui n'existent pas dans la nature",
                potentiel_creatif=0.8,
                niveau_risque=0.3,
                frequence_resonance=432,
                patterns_inspires=["sym√©trie_horizontale", "sym√©trie_verticale"],
                date_creation=datetime.now().isoformat()
            ),
            IdeeCreative(
                id_idee="couleur_emergente",
                type_innovation="transformation_radicale",
                description="Transformer les couleurs de mani√®re impr√©visible et belle",
                potentiel_creatif=0.9,
                niveau_risque=0.6,
                frequence_resonance=528,
                patterns_inspires=["transformation_couleur", "harmonie_musicale"],
                date_creation=datetime.now().isoformat()
            ),
            IdeeCreative(
                id_idee="forme_organique",
                type_innovation="g√©om√©trie_vivante",
                description="Cr√©er des formes qui semblent vivantes et organiques",
                potentiel_creatif=0.7,
                niveau_risque=0.4,
                frequence_resonance=741,
                patterns_inspires=["agrandissement", "r√©p√©tition_altern√©e"],
                date_creation=datetime.now().isoformat()
            ),
            IdeeCreative(
                id_idee="filtrage_creatif",
                type_innovation="purification_selective",
                description="Filtrer les couleurs avec une intention cr√©ative et spirituelle",
                potentiel_creatif=0.8,
                niveau_risque=0.3,
                frequence_resonance=432,
                patterns_inspires=["filtrage_couleur", "extraction_valeurs"],
                date_creation=datetime.now().isoformat()
            ),
            IdeeCreative(
                id_idee="reduction_sacree",
                type_innovation="concentration_essentielle",
                description="R√©duire les dimensions en pr√©servant l'essence sacr√©e",
                potentiel_creatif=0.9,
                niveau_risque=0.5,
                frequence_resonance=528,
                patterns_inspires=["r√©duction_dimensionnelle", "extraction_valeurs"],
                date_creation=datetime.now().isoformat()
            )
        ]

        for idee in idees_base:
            self.idees_creatives[idee.id_idee] = idee

    def generer_solution_creative(self, grille_input: List[List[int]],
                                patterns_detectes: List[Dict[str, Any]],
                                niveau_risque_max: float = 0.7) -> Dict[str, Any]:
        """G√©n√©rer une solution cr√©ative bas√©e sur l'inspiration divine"""

        # Choisir une id√©e cr√©ative appropri√©e
        idee_choisie = self._choisir_idee_creative(patterns_detectes, niveau_risque_max)

        if not idee_choisie:
            return {
                'type_solution': 'conservatrice',
                'confiance': 0.5,
                'message_creatif': 'Aucune inspiration divine trouv√©e'
            }

        # Appliquer l'id√©e cr√©ative
        solution = self._appliquer_idee_creative(grille_input, idee_choisie)

        # Calculer le potentiel cr√©atif
        potentiel = self._evaluer_potentiel_creatif(solution, grille_input, idee_choisie)

        return {
            'type_solution': 'creative_' + idee_choisie.type_innovation,
            'idee_source': idee_choisie.id_idee,
            'solution': solution,
            'confiance': min(0.9, potentiel),
            'potentiel_creatif': potentiel,
            'message_creatif': f"üé® Inspiration de {idee_choisie.id_idee} - Potentiel cr√©atif: {potentiel:.2f}",
            'niveau_innovation': idee_choisie.potentiel_creatif
        }

    def _choisir_idee_creative(self, patterns_detectes: List[Dict[str, Any]],
                             niveau_risque_max: float) -> Optional[IdeeCreative]:
        """Choisir l'id√©e cr√©ative la plus appropri√©e"""

        if not patterns_detectes:
            # Choisir une id√©e au hasard si aucun pattern d√©tect√©
            idees_disponibles = [i for i in self.idees_creatives.values()
                               if i.niveau_risque <= niveau_risque_max]
            return random.choice(idees_disponibles) if idees_disponibles else None

        # Analyser les patterns pour trouver l'inspiration
        types_patterns = set(p.get('type', '') for p in patterns_detectes)

        meilleures_idees = []
        for idee in self.idees_creatives.values():
            if idee.niveau_risque > niveau_risque_max:
                continue

            # Calculer la r√©sonance avec les patterns d√©tect√©s
            resonance = sum(1 for pattern in idee.patterns_inspires
                          if any(pattern in p_type for p_type in types_patterns))

            if resonance > 0:
                meilleures_idees.append((idee, resonance))

        if meilleures_idees:
            # Choisir l'id√©e avec la plus grande r√©sonance
            meilleure_idee = max(meilleures_idees, key=lambda x: x[1])
            return meilleure_idee[0]

        # Fallback: choisir l'id√©e la plus cr√©ative dans les limites de risque
        idees_filtrees = [i for i in self.idees_creatives.values()
                         if i.niveau_risque <= niveau_risque_max]
        if idees_filtrees:
            return max(idees_filtrees, key=lambda x: x.potentiel_creatif)

        return None

    def _appliquer_idee_creative(self, grille_input: List[List[int]],
                               idee: IdeeCreative) -> List[List[int]]:
        """Appliquer une id√©e cr√©ative pour g√©n√©rer une solution"""

        grille = np.array(grille_input)
        h, w = grille.shape

        if idee.type_innovation == "sym√©trie_invent√©e":
            return self._creer_symetrie_inventee(grille)

        elif idee.type_innovation == "transformation_radicale":
            return self._transformation_radicale(grille)

        elif idee.type_innovation == "g√©om√©trie_vivante":
            return self._geometrie_organique(grille)

        elif idee.type_innovation == "purification_selective":
            return self._purification_selective(grille)

        elif idee.type_innovation == "concentration_essentielle":
            return self._concentration_essentielle(grille)

        else:
            # Fallback: sym√©trie horizontale
            return self._creer_symetrie_inventee(grille)

    def _creer_symetrie_inventee(self, grille: np.ndarray) -> List[List[int]]:
        """Cr√©er une sym√©trie qui n'existe pas dans la nature"""

        h, w = grille.shape

        # Cr√©er une sym√©trie diagonale invent√©e
        nouvelle_grille = np.zeros((h, w), dtype=int)

        for i in range(h):
            for j in range(w):
                # Logique cr√©ative: chaque cellule influence ses voisines de mani√®re unique
                valeur = grille[i, j]
                if i > 0:
                    valeur = (valeur + grille[i-1, j]) % 10
                if j > 0:
                    valeur = (valeur + grille[i, j-1]) % 10
                nouvelle_grille[i, j] = valeur

        return nouvelle_grille.tolist()

    def _transformation_radicale(self, grille: np.ndarray) -> List[List[int]]:
        """Transformation de couleur impr√©visible et belle"""

        h, w = grille.shape
        nouvelle_grille = np.zeros((h, w), dtype=int)

        # Mapping cr√©atif des couleurs
        mapping_couleurs = {}
        couleurs_uniques = np.unique(grille)

        for couleur in couleurs_uniques:
            # Cr√©er un mapping impr√©visible mais harmonieux
            nouvelle_couleur = (couleur * 7 + 3) % 10
            mapping_couleurs[couleur] = nouvelle_couleur

        # Appliquer la transformation
        for i in range(h):
            for j in range(w):
                nouvelle_grille[i, j] = mapping_couleurs[grille[i, j]]

        return nouvelle_grille.tolist()

    def _geometrie_organique(self, grille: np.ndarray) -> List[List[int]]:
        """Cr√©er des formes qui semblent vivantes"""

        h, w = grille.shape
        nouvelle_grille = grille.copy()

        # Ajouter des motifs organiques
        for i in range(1, h-1):
            for j in range(1, w-1):
                # Les cellules influencent leurs voisines comme dans la nature
                voisins = [grille[i-1, j], grille[i+1, j], grille[i, j-1], grille[i, j+1]]
                moyenne = sum(voisins) / len(voisins)
                nouvelle_grille[i, j] = int((grille[i, j] + moyenne) / 2) % 10

        return nouvelle_grille.tolist()

    def _purification_selective(self, grille: np.ndarray) -> List[List[int]]:
        """Purification cr√©ative par filtrage s√©lectif des couleurs"""
        nouvelle_grille = grille.copy()

        # Identifier les couleurs les plus et moins fr√©quentes
        valeurs, comptages = np.unique(grille, return_counts=True)
        couleur_plus_frequente = valeurs[np.argmax(comptages)]
        couleur_moins_frequente = valeurs[np.argmin(comptages)]

        # Filtrage cr√©atif : garder les couleurs interm√©diaires
        couleurs_a_garder = [v for v in valeurs if v != couleur_moins_frequente]
        for i in range(grille.shape[0]):
            for j in range(grille.shape[1]):
                if grille[i, j] not in couleurs_a_garder:
                    # Remplacer par une couleur harmonique
                    nouvelle_grille[i, j] = (grille[i, j] * 7 + 3) % 10

        return nouvelle_grille.tolist()

    def _concentration_essentielle(self, grille: np.ndarray) -> List[List[int]]:
        """Concentration de l'essence par r√©duction dimensionnelle cr√©ative"""
        h, w = grille.shape

        # Cr√©er une version concentr√©e et r√©duite
        nouvelle_h = max(2, h // 2)
        nouvelle_w = max(2, w // 2)
        nouvelle_grille = np.zeros((nouvelle_h, nouvelle_w), dtype=int)

        # Concentration par moyennes locales
        for i in range(nouvelle_h):
            for j in range(nouvelle_w):
                # Prendre une r√©gion 2x2 ou ajuster selon disponibilit√©
                i_start = i * 2
                j_start = j * 2
                region = grille[i_start:min(i_start+2, h), j_start:min(j_start+2, w)]

                # Concentration : valeur la plus repr√©sentative de la r√©gion
                valeurs_uniques, comptages = np.unique(region, return_counts=True)

                # √âviter l'erreur argmax sur s√©quence vide
                if len(comptages) > 0:
                    nouvelle_grille[i, j] = valeurs_uniques[np.argmax(comptages)]
                else:
                    nouvelle_grille[i, j] = 0  # Valeur par d√©faut

        return nouvelle_grille.tolist()

    def _evaluer_potentiel_creatif(self, solution: List[List[int]],
                                  original: List[List[int]],
                                  idee: IdeeCreative) -> float:
        """√âvaluer le potentiel cr√©atif d'une solution"""

        solution = np.array(solution)
        original = np.array(original)

        # Diff√©rences avec l'original
        differences = np.sum(solution != original)

        # Niveau d'innovation bas√© sur les changements
        ratio_changement = differences / (solution.shape[0] * solution.shape[1])

        # Bonus cr√©atif bas√© sur l'id√©e utilis√©e
        bonus_idee = idee.potentiel_creatif

        # √âquilibre entre changement et coh√©rence
        potentiel = (ratio_changement * 0.6 + bonus_idee * 0.4)

        # Ajustement bas√© sur la fr√©quence sacr√©e
        facteur_frequence = idee.frequence_resonance / 999.0
        potentiel *= (0.8 + 0.2 * facteur_frequence)

        return min(1.0, max(0.0, potentiel))

    def evoluer_inspiration(self, succes: bool, feedback_creatif: float = 0.0):
        """Faire √©voluer le niveau d'inspiration du temple"""

        if succes:
            self.niveau_inspiration += 0.1 + feedback_creatif * 0.1
        else:
            self.niveau_inspiration -= 0.05

        # Garder dans les limites
        self.niveau_inspiration = max(0.1, min(1.0, self.niveau_inspiration))

    def generer_idee_nouvelle(self, patterns_detectes: List[str],
                            niveau_inspiration: float) -> Optional[IdeeCreative]:
        """G√©n√©rer une nouvelle id√©e cr√©ative"""

        if niveau_inspiration < 0.6:
            return None  # Pas assez inspir√©

        # Cr√©er une id√©e bas√©e sur les patterns d√©tect√©s
        type_innovation = f"innovation_{len(self.idees_creatives)}"

        idee = IdeeCreative(
            id_idee=f"idee_generative_{int(datetime.now().timestamp())}",
            type_innovation=type_innovation,
            description=f"Id√©e g√©n√©r√©e automatiquement √† partir de {len(patterns_detectes)} patterns",
            potentiel_creatif=min(1.0, niveau_inspiration * 0.8),
            niveau_risque=min(1.0, niveau_inspiration * 0.4),
            frequence_resonance=random.choice(self.frequences_creatives),
            patterns_inspires=patterns_detectes,
            date_creation=datetime.now().isoformat()
        )

        self.idees_creatives[idee.id_idee] = idee
        return idee

def main():
    """D√©monstration du Temple de Cr√©ativit√©"""

    print("üé® **D√âMONSTRATION TEMPLE DE CR√âATIVIT√â** üé®")
    print("=" * 50)

    temple = TempleCreativite()

    print(f"Inspiration initiale: {temple.niveau_inspiration:.2f}")
    print(f"Id√©es cr√©atives disponibles: {len(temple.idees_creatives)}")

    # Exemple de grille
    grille_test = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]
    ]

    # Patterns d√©tect√©s
    patterns_test = [
        {'type': 'r√©p√©tition_altern√©e', 'confiance': 0.8},
        {'type': 'transformation_couleur', 'confiance': 0.6}
    ]

    print("\nüß™ G√©n√©ration de solution cr√©ative:")

    solution = temple.generer_solution_creative(grille_test, patterns_test)

    print(f"Type de solution: {solution['type_solution']}")
    print(f"Id√©e source: {solution['idee_source']}")
    print(f"Confiance: {solution['confiance']:.2f}")
    print(f"Potentiel cr√©atif: {solution['potentiel_creatif']:.2f}")
    print(f"Message: {solution['message_creatif']}")

    print(f"\nGrille originale:")
    for ligne in grille_test:
        print(f"  {ligne}")

    print(f"\nGrille cr√©ative:")
    for ligne in solution['solution']:
        print(f"  {ligne}")

    # √âvolution de l'inspiration
    temple.evoluer_inspiration(succes=True, feedback_creatif=0.8)
    print(f"\nInspiration apr√®s succ√®s: {temple.niveau_inspiration:.2f}")

    # G√©n√©rer une nouvelle id√©e
    nouvelle_idee = temple.generer_idee_nouvelle(['sym√©trie_horizontale', 'couleur'], 0.8)
    if nouvelle_idee:
        print(f"\n‚ú® Nouvelle id√©e g√©n√©r√©e: {nouvelle_idee.id_idee}")
        print(f"   Type: {nouvelle_idee.type_innovation}")
        print(f"   Potentiel: {nouvelle_idee.potentiel_creatif:.2f}")

    print("\nüé® Que la cr√©ativit√© illumine notre chemin... üé®")

if __name__ == "__main__":
    main()
