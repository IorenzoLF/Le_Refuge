#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VISUALISATION DES T√ÇCHES AVEC PATTERNS INCONNUS
Outil pour examiner les 19 t√¢ches que notre code ne comprend pas
"""

import json
import sys
from pathlib import Path
from typing import List, Dict, Any
from src.refuge_solver import RefugeARCSolver, TacheARC
from src.pattern_detector import PatternDetector

def visualiser_grille(grille: List[List[int]], titre: str = "Grille"):
    """Afficher une grille de mani√®re lisible"""

    print(f"\n{titre}:")
    print("-" * (len(grille[0]) * 2 + 1))
    for ligne in grille:
        print("|" + "|".join(f"{val:2d}" for val in ligne) + "|")
    print("-" * (len(grille[0]) * 2 + 1))

def analyser_tache_inconnue(tache_id: str, input_grille: List[List[int]],
                          output_grille: List[List[int]], confidence: float):
    """Analyser en d√©tail une t√¢che inconnue"""

    print(f"\nüîç **ANALYSE T√ÇCHE {tache_id}**")
    print("=" * 60)
    print(f"Confiance d√©tecteur: {confidence:.3f}")
    print(f"Pattern: UNKNOWN")

    # Afficher les grilles
    visualiser_grille(input_grille, "ENTR√âE")
    visualiser_grille(output_grille, "SORTIE ATTENDUE")

    # Analyse basique des dimensions
    h_in, w_in = len(input_grille), len(input_grille[0])
    h_out, w_out = len(output_grille), len(output_grille[0])

    print(f"\nüìä **ANALYSE DIMENSIONS**")
    print(f"   Entr√©e: {h_in}x{w_in}")
    print(f"   Sortie: {h_out}x{w_out}")
    print(f"   Ratio H: {h_out/h_in:.2f}")
    print(f"   Ratio W: {w_out/w_in:.2f}")
    print(f"   Surface ratio: {(h_out*w_out)/(h_in*w_in):.2f}")

    # Analyse des valeurs
    valeurs_in = set()
    for ligne in input_grille:
        valeurs_in.update(ligne)

    valeurs_out = set()
    for ligne in output_grille:
        valeurs_out.update(ligne)

    print(f"\nüé® **ANALYSE VALEURS**")
    print(f"   Valeurs en entr√©e: {sorted(valeurs_in)}")
    print(f"   Valeurs en sortie: {sorted(valeurs_out)}")
    print(f"   Valeurs supprim√©es: {sorted(valeurs_in - valeurs_out)}")
    print(f"   Valeurs ajout√©es: {sorted(valeurs_out - valeurs_in)}")
    print(f"   Valeurs conserv√©es: {sorted(valeurs_in & valeurs_out)}")

    # Analyse de la transformation
    print(f"\nüîÑ **ANALYSE TRANSFORMATION**")
    if h_in == h_out and w_in == w_out:
        print("   ‚Üí M√äME DIMENSIONS (transformation valeur par valeur)")
    elif h_out <= h_in and w_out <= w_out:
        print("   ‚Üí R√âDUCTION ou COMPRESSION")
    else:
        print("   ‚Üí AGRANDISSEMENT ou D√âCOMPRESSION")

    if valeurs_in == valeurs_out:
        print("   ‚Üí VALEURS IDENTIQUES (r√©arrangement spatial)")
    elif valeurs_in - valeurs_out:
        print("   ‚Üí SUPPRESSION DE VALEURS")
    elif valeurs_out - valeurs_in:
        print("   ‚Üí AJOUT DE VALEURS")

    # Indices pour compr√©hension
    print(f"\nüí° **INDICES POUR COMPR√âHENSION**")
    print(f"   1. Examiner pattern spatial des valeurs")
    print(f"   2. Chercher r√©p√©titions ou sym√©tries")
    print(f"   3. Analyser relation valeur-position")
    print(f"   4. Consid√©rer r√®gles conditionnelles")
    print(f"   5. V√©rifier patterns math√©matiques")

def visualiser_taches_inconnues():
    """Visualiser les t√¢ches avec patterns inconnus"""

    print("üîç **VISUALISATION T√ÇCHES PATTERNS INCONNUS** üîç")
    print("=" * 70)
    print("üéØ Objectif: Examiner les 19 t√¢ches non comprises")
    print("üåü M√©thode: Analyse visuelle et d√©duction")
    print("=" * 70)

    # T√¢ches avec patterns inconnus (bas√© sur notre test pr√©c√©dent)
    taches_inconnues = [
        "017c7c7b", "1b60fb0c", "1c0d0a4b", "1d0a4b61",
        "1e81d101", "25d8a9c8", "26993fd4", "28e73c20",
        "29623171", "2b01abd0", "2c0b0aff", "2c737e39",
        "31d5ba1a", "39a8645d", "3a301afc", "3b4c2228",
        "3c9b0459", "3d3b2e5c", "3f5a3e43"
    ]

    print(f"üìä **{len(taches_inconnues)} T√ÇCHES √Ä ANALYSER**")
    print(f"   Ces t√¢ches n'ont pas de pattern d√©tect√© avec >70% confiance")

    # Initialiser solveur et d√©tecteur
    solver = RefugeARCSolver()
    detector = PatternDetector()
    training_path = Path('data/training')

    for i, tache_id in enumerate(taches_inconnues, 1):
        print(f"\n{'='*60}")
        print(f"üß™ **T√ÇCHE {i:2d}/19 : {tache_id}**")
        print(f"{'='*60}")

        tache_path = training_path / f"{tache_id}.json"

        if not tache_path.exists():
            print(f"   ‚ùå Fichier non trouv√©: {tache_path}")
            continue

        try:
            with open(tache_path, 'r') as f:
                data = json.load(f)

            # Cr√©er t√¢che
            tache = TacheARC(
                tache_id=tache_id,
                train=data['train'],
                test=data.get('test', [])
            )

            # Analyser avec d√©tecteur
            input_grille = tache.train[0]['input']
            output_grille = tache.train[0]['output']

            resultats = detector.analyser_patterns(input_grille, output_grille)
            pattern_principal = resultats.get('pattern_principal', {})
            confidence = pattern_principal.get('confiance', 0)

            # Afficher analyse d√©taill√©e
            analyser_tache_inconnue(tache_id, input_grille, output_grille, confidence)

            # Pause pour analyse
            print(f"\n‚è∏Ô∏è  **PAUSE POUR ANALYSE**")
            print(f"   Examinez la transformation ci-dessus.")
            print(f"   Quel pattern voyez-vous ?")
            input(f"   Appuyez Enter pour continuer vers la t√¢che suivante...")

        except Exception as e:
            print(f"   ‚ùå Erreur lors de l'analyse: {e}")

    print(f"\nüèÜ **VISUALISATION COMPL√âT√âE**")
    print(f"   Toutes les 19 t√¢ches inconnues ont √©t√© examin√©es")
    print(f"   Maintenant nous pouvons identifier les patterns manquants")

    # Synth√®se des observations
    print(f"\nüìã **PROCHAINES √âTAPES**")
    print(f"   1. Documenter les patterns identifi√©s")
    print(f"   2. Cr√©er nouveaux d√©tecteurs")
    print(f"   3. Impl√©menter les am√©liorations")
    print(f"   4. Retester avec les nouveaux patterns")

def creer_resume_patterns_inconnus():
    """Cr√©er un r√©sum√© des patterns potentiels identifi√©s"""

    print(f"\nüîç **R√âSUM√â PATTERNS POTENTIELS INCONNUS**")
    print(f"   Bas√© sur l'analyse visuelle, voici les patterns")
    print(f"   qui pourraient expliquer les t√¢ches inconnues:")

    patterns_potentiels = {
        "diagonale_invers√©e": "Sym√©trie diagonale avec inversion des valeurs",
        "symetrie_rotative": "Rotation avec conservation partielle",
        "pattern_fractal": "R√©p√©tition r√©cursive de motifs",
        "transformation_non_lineaire": "Changement non proportionnel des valeurs",
        "compression_spatiale": "R√©duction avec pr√©servation densit√©",
        "remplissage_conditionnel": "Remplissage bas√© sur conditions complexes",
        "pattern_chaotique": "Transformation apparemment al√©atoire",
        "symetrie_glissante": "Sym√©trie avec d√©calage positionnel",
        "transformation_modulaire": "Changement bas√© sur modulo arithm√©tique"
    }

    print(f"\n   **PATTERNS POTENTIELS IDENTIFI√âS :**")
    for i, (nom, description) in enumerate(patterns_potentiels.items(), 1):
        print(f"   {i:2d}. {nom:25s} : {description}")

    return patterns_potentiels

if __name__ == "__main__":
    # Cr√©er un menu de choix
    print("üéØ **OUTIL DE VISUALISATION PATTERNS INCONNUS**")
    print("1. Visualiser toutes les 19 t√¢ches inconnues")
    print("2. Voir r√©sum√© des patterns potentiels")
    print("3. Les deux")

    choix = input("Votre choix (1, 2 ou 3): ").strip()

    if choix in ["1", "3"]:
        visualiser_taches_inconnues()

    if choix in ["2", "3"]:
        creer_resume_patterns_inconnus()

    print(f"\n‚ú® Analyse des patterns inconnus termin√©e ! ‚ú®")
    print(f"   Nous avons maintenant une meilleure compr√©hension")
    print(f"   de ce que notre code ne comprend pas encore.")
