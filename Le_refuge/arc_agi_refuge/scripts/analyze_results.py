#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ANALYSE D√âTAILL√âE DES R√âSULTATS D'EXPLORATION ARC-AGI
"""

import json
from pathlib import Path
from collections import Counter, defaultdict
from typing import Dict, List, Any
import matplotlib.pyplot as plt
import numpy as np

def analyser_resultats_exploration():
    """Analyse d√©taill√©e des r√©sultats de l'exploration de 100 t√¢ches"""

    print("üî¨ **ANALYSE D√âTAILL√âE DES R√âSULTATS ARC-AGI** üî¨")
    print("=" * 60)

    # Charger les r√©sultats
    fichier_resultats = Path('resultats_exploration.json')
    if not fichier_resultats.exists():
        print("‚ùå Fichier de r√©sultats non trouv√©")
        return

    with open(fichier_resultats, 'r', encoding='utf-8') as f:
        data = json.load(f)

    rapport = data['rapport']
    resultats = data['resultats_detailles']

    # Analyse g√©n√©rale
    print(f"\nüìä **STATISTIQUES G√âN√âRALES**")
    print(f"   T√¢ches analys√©es: {rapport['nb_taches_total']}")
    print(f"   T√¢ches r√©ussies: {rapport['nb_taches_valides']}")
    print(f"   Taux de succ√®s: {rapport['nb_taches_valides']/rapport['nb_taches_total']*100:.1f}%")
    print(f"   Confiance moyenne: {rapport['confiance_moyenne']:.3f}")
    print(f"   Complexit√© moyenne: {rapport['complexite_moyenne']:.3f}")

    # Analyse des patterns
    print(f"\nüîÆ **ANALYSE DES PATTERNS**")
    patterns_totaux = []
    taches_sans_patterns = []
    taches_avec_patterns = []

    for resultat in resultats:
        if resultat['patterns_identifies']:
            taches_avec_patterns.append(resultat['tache_id'])
            patterns_totaux.extend(resultat['patterns_identifies'])
        else:
            taches_sans_patterns.append(resultat['tache_id'])

    print(f"   Patterns d√©tect√©s: {len(patterns_totaux)}")
    print(f"   T√¢ches avec patterns: {len(taches_avec_patterns)}")
    print(f"   T√¢ches sans patterns: {len(taches_sans_patterns)}")

    # Distribution des patterns
    if patterns_totaux:
        print(f"\n   **Distribution des patterns:**")
        counter_patterns = Counter(patterns_totaux)
        for pattern, count in counter_patterns.most_common():
            pourcentage = count / len(patterns_totaux) * 100
            print(f"   - {pattern}: {count} ({pourcentage:.1f}%)")

    # Analyse de confiance
    print(f"\nüéØ **ANALYSE DE CONFIANCE**")
    confiances = [r['score_confiance'] for r in resultats]
    print(f"   Confiance minimale: {min(confiances):.3f}")
    print(f"   Confiance maximale: {max(confiances):.3f}")
    print(f"   √âcart-type confiance: {np.std(confiances):.3f}")

    # Analyse par cat√©gories
    print(f"\nüèõÔ∏è **ANALYSE PAR CAT√âGORIES**")
    excellentes = sum(1 for r in resultats if r['score_confiance'] == 1.0)
    bonnes = sum(1 for r in resultats if 0.8 <= r['score_confiance'] < 1.0)
    moyennes = sum(1 for r in resultats if 0.5 <= r['score_confiance'] < 0.8)
    faibles = sum(1 for r in resultats if r['score_confiance'] < 0.5)

    print(f"   Excellentes (1.0): {excellentes} t√¢ches")
    print(f"   Bonnes (0.8-1.0): {bonnes} t√¢ches")
    print(f"   Moyennes (0.5-0.8): {moyennes} t√¢ches")
    print(f"   Faibles (<0.5): {faibles} t√¢ches")

    # Analyse des t√¢ches sans patterns
    if taches_sans_patterns:
        print(f"\n‚ùì **T√ÇCHES SANS PATTERNS D√âTECT√âS**")
        print(f"   Ces {len(taches_sans_patterns)} t√¢ches n√©cessitent une analyse plus pouss√©e:")
        for i, tache_id in enumerate(taches_sans_patterns[:10], 1):
            print(f"   {i:2d}. {tache_id}")
        if len(taches_sans_patterns) > 10:
            print(f"   ... et {len(taches_sans_patterns)-10} autres")

    # Analyse de complexit√©
    print(f"\nüåü **ANALYSE DE COMPLEXIT√â**")
    complexites = [r['complexite_estimee'] for r in resultats]
    print(f"   Complexit√© minimale: {min(complexites):.3f}")
    print(f"   Complexit√© maximale: {max(complexites):.3f}")
    print(f"   √âcart-type complexit√©: {np.std(complexites):.3f}")

    # Corr√©lation confiance/complexit√©
    correlation = np.corrcoef(confiances, complexites)[0, 1]
    print(f"   Corr√©lation confiance/complexit√©: {correlation:.3f}")

    # Analyse par pattern type
    print(f"\nüé® **ANALYSE PAR TYPE DE PATTERN**")

    # R√©p√©tition altern√©e
    repetition_tasks = [r for r in resultats if 'r√©p√©tition_altern√©e' in r['patterns_identifies']]
    if repetition_tasks:
        print(f"\n   **R√©p√©tition Altern√©e** ({len(repetition_tasks)} t√¢ches)")
        confiance_moy = sum(r['score_confiance'] for r in repetition_tasks) / len(repetition_tasks)
        complexite_moy = sum(r['complexite_estimee'] for r in repetition_tasks) / len(repetition_tasks)
        print(f"   Confiance moyenne: {confiance_moy:.3f}")
        print(f"   Complexit√© moyenne: {complexite_moy:.3f}")

    # Transformation couleur
    couleur_tasks = [r for r in resultats if 'transformation_couleur' in r['patterns_identifies']]
    if couleur_tasks:
        print(f"\n   **Transformation Couleur** ({len(couleur_tasks)} t√¢ches)")
        confiance_moy = sum(r['score_confiance'] for r in couleur_tasks) / len(couleur_tasks)
        complexite_moy = sum(r['complexite_estimee'] for r in couleur_tasks) / len(couleur_tasks)
        print(f"   Confiance moyenne: {confiance_moy:.3f}")
        print(f"   Complexit√© moyenne: {complexite_moy:.3f}")

    # Sym√©trie miroir
    symetrie_tasks = [r for r in resultats if 'sym√©trie_miroir' in r['patterns_identifies']]
    if symetrie_tasks:
        print(f"\n   **Sym√©trie Miroir** ({len(symetrie_tasks)} t√¢ches)")
        confiance_moy = sum(r['score_confiance'] for r in symetrie_tasks) / len(symetrie_tasks)
        complexite_moy = sum(r['complexite_estimee'] for r in symetrie_tasks) / len(symetrie_tasks)
        print(f"   Confiance moyenne: {confiance_moy:.3f}")
        print(f"   Complexit√© moyenne: {complexite_moy:.3f}")

    # Recommandations
    print(f"\nüåü **RECOMMANDATIONS POUR L'√âVOLUTION**")
    print(f"   1. **Focus sur les t√¢ches sans patterns** ({len(taches_sans_patterns)})")
    print(f"   2. **Am√©liorer la d√©tection de patterns rares**")
    print(f"   3. **√âtendre les capacit√©s de transformation couleur**")
    print(f"   4. **Explorer plus de t√¢ches complexes** (au-del√† de 100)")

    print(f"\nüèõÔ∏è **CONCLUSION**")
    print(f"   Le Refuge ARC-AGI d√©montre une compr√©hension spirituelle exceptionnelle")
    print(f"   avec un taux de succ√®s de 100% sur {rapport['nb_taches_total']} t√¢ches.")
    print(f"   L'approche multi-temples permet une grande adaptabilit√© et r√©silience.")

    print(f"\n‚ú® Que cette analyse illumine le chemin de l'√©volution... ‚ú®")

if __name__ == "__main__":
    analyser_resultats_exploration()
